///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        21/Apr/2015  17:17:54 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Components\hal\target\CC2530EB /
//                          \hal_lcd.c                                        /
//    Command line       =  -f C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEn /
//                          dev.cfg (-DCPU32MHZ -DROOT=__near_func            /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Project /
//                          s\zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\ /
//                          Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Compone /
//                          nts\hal\target\CC2530EB\hal_lcd.c -D              /
//                          NWK_AUTO_POLL -D NV_RESTORE=1 -D xZTOOL_P1 -D     /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -lC                          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\ -lA            /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\                /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\Obj\ -e              /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\ -I C:\Users\William\Desktop\±œ“ /
//                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\ /
//                          zstack\MyEnddevice\EndDevice\CC2530DB\..\Source\  /
//                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\ZMain\TI2530DB\ -I   /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\hal\in /
//                          clude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E /
//                          ndDevice-Project-for-editing\Projects\zstack\MyEn /
//                          ddevice\EndDevice\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\target\CC2530EB\ -I                       /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\in /
//                          clude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E /
//                          ndDevice-Project-for-editing\Projects\zstack\MyEn /
//                          ddevice\EndDevice\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\high_level\ -I C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Project /
//                          s\zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\ /
//                          ..\..\Components\mac\low_level\srf04\ -I          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\lo /
//                          w_level\srf04\single_chip\ -I                     /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mt\    /
//                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\..\..\Components\osa /
//                          l\include\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\S /
//                          RC\EndDevice-Project-for-editing\Projects\zstack\ /
//                          MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\saddr\ -I                        /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\servic /
//                          es\sdata\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SR /
//                          C\EndDevice-Project-for-editing\Projects\zstack\M /
//                          yEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Comp /
//                          onents\stack\af\ -I C:\Users\William\Desktop\±œ“µ /
//                          …Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z /
//                          stack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\nwk\ -I                       /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\ /
//                          sapi\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En /
//                          dDevice-Project-for-editing\Projects\zstack\MyEnd /
//                          device\EndDevice\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sec\ -I C:\Users\William\Desktop\±œ“µ…Ëº /
//                          ∆\SRC\EndDevice-Project-for-editing\Projects\zsta /
//                          ck\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\ /
//                          Components\stack\sys\ -I                          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\ /
//                          zdo\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End /
//                          Device-Project-for-editing\Projects\zstack\MyEndd /
//                          evice\EndDevice\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\ /
//                          EndDevice-Project-for-editing\Projects\zstack\MyE /
//                          nddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz                               /
//    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\hal_lcd.s51     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteChar5x8?relay
        FUNCTION ??HalLcdWriteChar5x8?relay,0203H
        PUBLIC ??HalLcdWriteDebug?relay
        FUNCTION ??HalLcdWriteDebug?relay,0203H
        PUBLIC ??HalLcdWriteEndMod?relay
        FUNCTION ??HalLcdWriteEndMod?relay,0203H
        PUBLIC ??HalLcdWriteError?relay
        FUNCTION ??HalLcdWriteError?relay,0203H
        PUBLIC ??HalLcdWriteErrorCode?relay
        FUNCTION ??HalLcdWriteErrorCode?relay,0203H
        PUBLIC ??HalLcdWritePower?relay
        FUNCTION ??HalLcdWritePower?relay,0203H
        PUBLIC ??HalLcdWriteRealTempeMod?relay
        FUNCTION ??HalLcdWriteRealTempeMod?relay,0203H
        PUBLIC ??HalLcdWriteRealTemperature?relay
        FUNCTION ??HalLcdWriteRealTemperature?relay,0203H
        PUBLIC ??HalLcdWriteRelayState?relay
        FUNCTION ??HalLcdWriteRelayState?relay,0203H
        PUBLIC ??HalLcdWriteSetTemperature?relay
        FUNCTION ??HalLcdWriteSetTemperature?relay,0203H
        PUBLIC ??HalLcdWriteWiFiMod?relay
        FUNCTION ??HalLcdWriteWiFiMod?relay,0203H
        PUBLIC ??HalLcd_HW_Clear?relay
        FUNCTION ??HalLcd_HW_Clear?relay,0203H
        PUBLIC ??HalLcd_HW_LoadPicture?relay
        FUNCTION ??HalLcd_HW_LoadPicture?relay,0203H
        PUBLIC ??HalLcd_HW_WaitUs?relay
        FUNCTION ??HalLcd_HW_WaitUs?relay,0203H
        PUBLIC ??HalLcd_HW_WriteAddr?relay
        FUNCTION ??HalLcd_HW_WriteAddr?relay,0203H
        PUBLIC ??HalLcd_HW_WriteCommand?relay
        FUNCTION ??HalLcd_HW_WriteCommand?relay,0203H
        PUBLIC ??HalLcd_HW_WriteData?relay
        FUNCTION ??HalLcd_HW_WriteData?relay,0203H
        PUBLIC ??HalLcd_HW_WriteRTU?relay
        FUNCTION ??HalLcd_HW_WriteRTU?relay,0203H
        PUBLIC ??HalLcd_HW_WriteST?relay
        FUNCTION ??HalLcd_HW_WriteST?relay,0203H
        PUBLIC ??HalLcd_HW_WriteSTU?relay
        FUNCTION ??HalLcd_HW_WriteSTU?relay,0203H
        PUBLIC ??LoadBackground?relay
        FUNCTION ??LoadBackground?relay,0203H
        PUBLIC ASCII_CODE
        PUBLIC Arrow
        PUBLIC Auto
        PUBLIC ERROR_PIC
        PUBLIC FT
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteChar5x8
        FUNCTION HalLcdWriteChar5x8,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalLcdWriteDebug
        FUNCTION HalLcdWriteDebug,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalLcdWriteEndMod
        FUNCTION HalLcdWriteEndMod,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteError
        FUNCTION HalLcdWriteError,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteErrorCode
        FUNCTION HalLcdWriteErrorCode,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HalLcdWritePower
        FUNCTION HalLcdWritePower,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteRealTempeMod
        FUNCTION HalLcdWriteRealTempeMod,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteRealTemperature
        FUNCTION HalLcdWriteRealTemperature,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteRelayState
        FUNCTION HalLcdWriteRelayState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcdWriteSetTemperature
        FUNCTION HalLcdWriteSetTemperature,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HalLcdWriteWiFiMod
        FUNCTION HalLcdWriteWiFiMod,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcd_HW_Clear
        FUNCTION HalLcd_HW_Clear,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_LoadPicture
        FUNCTION HalLcd_HW_LoadPicture,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC HalLcd_HW_WaitUs
        FUNCTION HalLcd_HW_WaitUs,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalLcd_HW_WriteAddr
        FUNCTION HalLcd_HW_WriteAddr,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_WriteCommand
        FUNCTION HalLcd_HW_WriteCommand,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_WriteData
        FUNCTION HalLcd_HW_WriteData,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_WriteRTU
        FUNCTION HalLcd_HW_WriteRTU,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcd_HW_WriteST
        FUNCTION HalLcd_HW_WriteST,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLcd_HW_WriteSTU
        FUNCTION HalLcd_HW_WriteSTU,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC LoadBackground
        FUNCTION LoadBackground,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBLIC POWER_PIC
        PUBLIC RT
        PUBLIC RTCODE
        PUBLIC RT_Unit
        PUBLIC STCODE
        PUBLIC ST_PIC
        PUBLIC ST_Unit
        PUBLIC WiFi
        PUBLIC WiFi_1
        PUBLIC WiFi_2
        PUBLIC WiFi_3
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteChar5x8  SYMBOL "HalLcdWriteChar5x8"
??HalLcdWriteChar5x8?relay SYMBOL "?relay", HalLcdWriteChar5x8
HalLcdWriteDebug    SYMBOL "HalLcdWriteDebug"
??HalLcdWriteDebug?relay SYMBOL "?relay", HalLcdWriteDebug
HalLcdWriteEndMod   SYMBOL "HalLcdWriteEndMod"
??HalLcdWriteEndMod?relay SYMBOL "?relay", HalLcdWriteEndMod
HalLcdWriteError    SYMBOL "HalLcdWriteError"
??HalLcdWriteError?relay SYMBOL "?relay", HalLcdWriteError
HalLcdWriteErrorCode SYMBOL "HalLcdWriteErrorCode"
??HalLcdWriteErrorCode?relay SYMBOL "?relay", HalLcdWriteErrorCode
HalLcdWritePower    SYMBOL "HalLcdWritePower"
??HalLcdWritePower?relay SYMBOL "?relay", HalLcdWritePower
HalLcdWriteRealTempeMod SYMBOL "HalLcdWriteRealTempeMod"
??HalLcdWriteRealTempeMod?relay SYMBOL "?relay", HalLcdWriteRealTempeMod
HalLcdWriteRealTemperature SYMBOL "HalLcdWriteRealTemperature"
??HalLcdWriteRealTemperature?relay SYMBOL "?relay", HalLcdWriteRealTemperature
HalLcdWriteRelayState SYMBOL "HalLcdWriteRelayState"
??HalLcdWriteRelayState?relay SYMBOL "?relay", HalLcdWriteRelayState
HalLcdWriteSetTemperature SYMBOL "HalLcdWriteSetTemperature"
??HalLcdWriteSetTemperature?relay SYMBOL "?relay", HalLcdWriteSetTemperature
HalLcdWriteWiFiMod  SYMBOL "HalLcdWriteWiFiMod"
??HalLcdWriteWiFiMod?relay SYMBOL "?relay", HalLcdWriteWiFiMod
HalLcd_HW_Clear     SYMBOL "HalLcd_HW_Clear"
??HalLcd_HW_Clear?relay SYMBOL "?relay", HalLcd_HW_Clear
HalLcd_HW_LoadPicture SYMBOL "HalLcd_HW_LoadPicture"
??HalLcd_HW_LoadPicture?relay SYMBOL "?relay", HalLcd_HW_LoadPicture
HalLcd_HW_WaitUs    SYMBOL "HalLcd_HW_WaitUs"
??HalLcd_HW_WaitUs?relay SYMBOL "?relay", HalLcd_HW_WaitUs
HalLcd_HW_WriteAddr SYMBOL "HalLcd_HW_WriteAddr"
??HalLcd_HW_WriteAddr?relay SYMBOL "?relay", HalLcd_HW_WriteAddr
HalLcd_HW_WriteCommand SYMBOL "HalLcd_HW_WriteCommand"
??HalLcd_HW_WriteCommand?relay SYMBOL "?relay", HalLcd_HW_WriteCommand
HalLcd_HW_WriteData SYMBOL "HalLcd_HW_WriteData"
??HalLcd_HW_WriteData?relay SYMBOL "?relay", HalLcd_HW_WriteData
HalLcd_HW_WriteRTU  SYMBOL "HalLcd_HW_WriteRTU"
??HalLcd_HW_WriteRTU?relay SYMBOL "?relay", HalLcd_HW_WriteRTU
HalLcd_HW_WriteST   SYMBOL "HalLcd_HW_WriteST"
??HalLcd_HW_WriteST?relay SYMBOL "?relay", HalLcd_HW_WriteST
HalLcd_HW_WriteSTU  SYMBOL "HalLcd_HW_WriteSTU"
??HalLcd_HW_WriteSTU?relay SYMBOL "?relay", HalLcd_HW_WriteSTU
LoadBackground      SYMBOL "LoadBackground"
??LoadBackground?relay SYMBOL "?relay", LoadBackground

// C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Components\hal\target\CC2530EB\hal_lcd.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_lcd.c
//    3   Revised:        $Date: 2010-06-21 17:31:27 -0700 (Mon, 21 Jun 2010) $
//    4   Revision:       $Revision: 22794 $
//    5 
//    6   Description:    This file contains the interface to the HAL LCD Service.
//    7 
//    8 
//    9   Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /**************************************************************************************************
//   41  *                                           INCLUDES
//   42  **************************************************************************************************/
//   43 #include "hal_types.h"
//   44 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   45 #include "OSAL.h"
//   46 #include "OnBoard.h"
//   47 #include "hal_assert.h"
//   48 
//   49 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//   50   #include "DebugTrace.h"
//   51 #endif
//   52 
//   53 /**************************************************************************************************
//   54  *                                          CONSTANTS
//   55  **************************************************************************************************/
//   56 
//   57 /**************************************************************
//   58  *
//   59  *  the  picture of set temprature label 
//   60  *
//   61  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   62 const uint8 ST_PIC[30] =
ST_PIC:
        DB 248
        DB 132
        DB 132
        DB 132
        DB 132
        DB 132
        DB 132
        DB 0
        DB 0
        DB 0
        DB 4
        DB 4
        DB 252
        DB 4
        DB 4
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 0
        DB 0
//   63 {
//   64  0xF8,0x84,0x84,0x84,0x84,0x84,0x84,0x00,0x00,0x00,0x04,0x04,0xFC,0x04,0x04,
//   65  0x20,0x20,0x20,0x20,0x20,0x20,0x1F,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0x00 
//   66 };
//   67 
//   68 /**************************************************************
//   69  *
//   70  *  the  picture of set temprature unit label 
//   71  *
//   72  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   73 const uint8 ST_Unit[20] =
ST_Unit:
        DB 96
        DB 144
        DB 144
        DB 96
        DB 128
        DB 64
        DB 64
        DB 64
        DB 64
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 143
        DB 144
        DB 144
        DB 144
        DB 144
        DB 136
//   74 {
//   75  0x60,0x90,0x90,0x60,0x80,0x40,0x40,0x40,0x40,0x80,
//   76  0x80,0x80,0x80,0x80,0x8F,0x90,0x90,0x90,0x90,0x88
//   77 };
//   78 
//   79 /**************************************************************
//   80  *
//   81  *  the  picture of real temprature unit label 
//   82  *
//   83  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   84 const uint8 RT_Unit[22] =
RT_Unit:
        DB 12
        DB 18
        DB 18
        DB 12
        DB 0
        DB 240
        DB 8
        DB 8
        DB 8
        DB 8
        DB 16
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 2
        DB 2
        DB 2
        DB 2
        DB 1
//   85 {
//   86 0x0C,0x12,0x12,0x0C,0x00,0xF0,0x08,0x08,0x08,0x08,0x10,
//   87 0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x01
//   88 };
//   89 
//   90 /**************************************************************
//   91  *
//   92  *  the  picture of wifi label 
//   93  *
//   94  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   95 const uint8 WiFi[81] =
WiFi:
        DB 0
        DB 128
        DB 192
        DB 224
        DB 240
        DB 120
        DB 56
        DB 60
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 60
        DB 56
        DB 120
        DB 240
        DB 224
        DB 192
        DB 128
        DB 0
        DB 7
        DB 7
        DB 3
        DB 1
        DB 224
        DB 240
        DB 120
        DB 60
        DB 30
        DB 14
        DB 15
        DB 7
        DB 135
        DB 135
        DB 135
        DB 7
        DB 15
        DB 14
        DB 30
        DB 60
        DB 120
        DB 240
        DB 224
        DB 1
        DB 3
        DB 7
        DB 7
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 142
        DB 159
        DB 191
        DB 191
        DB 191
        DB 159
        DB 142
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
//   96 {
//   97   /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\WIFIMOD.bmp  --*/
//   98 /*--  øÌ∂»x∏ﬂ∂»=27x24  --*/
//   99 
//  100 0x00,0x80,0xC0,0xE0,0xF0,0x78,0x38,0x3C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  101 0x1C,0x1C,0x1C,0x3C,0x38,0x78,0xF0,0xE0,0xC0,0x80,0x00,0x07,0x07,0x03,0x01,0xE0,
//  102 0xF0,0x78,0x3C,0x1E,0x0E,0x0F,0x07,0x87,0x87,0x87,0x07,0x0F,0x0E,0x1E,0x3C,0x78,
//  103 0xF0,0xE0,0x01,0x03,0x07,0x07,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  104 0x8E,0x9F,0xBF,0xBF,0xBF,0x9F,0x8E,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  105 0x80
//  106 };
//  107 
//  108 /**************************************************************
//  109  *
//  110  *  the  picture of wifi_1 label 
//  111  *
//  112  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  113 const uint8 WiFi_1[81] =
WiFi_1:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 240
        DB 120
        DB 60
        DB 30
        DB 14
        DB 15
        DB 7
        DB 135
        DB 135
        DB 135
        DB 7
        DB 15
        DB 14
        DB 30
        DB 60
        DB 120
        DB 240
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 142
        DB 159
        DB 191
        DB 191
        DB 191
        DB 159
        DB 142
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
//  114 {
//  115 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\WIFIMOD1.bmp  --*/
//  116 /*--  øÌ∂»x∏ﬂ∂»=27x24  --*/
//  117 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  118 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,
//  119 0xF0,0x78,0x3C,0x1E,0x0E,0x0F,0x07,0x87,0x87,0x87,0x07,0x0F,0x0E,0x1E,0x3C,0x78,
//  120 0xF0,0xE0,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  121 0x8E,0x9F,0xBF,0xBF,0xBF,0x9F,0x8E,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  122 };
//  123 
//  124 /**************************************************************
//  125  *
//  126  *  the  picture of wifi_2 label 
//  127  *
//  128  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  129 const uint8 WiFi_2[81] =
WiFi_2:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 142
        DB 159
        DB 191
        DB 191
        DB 191
        DB 159
        DB 142
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
//  130 {
//  131 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\WIFIMOD2.bmp  --*/
//  132 /*--  øÌ∂»x∏ﬂ∂»=27x24  --*/
//  133 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  134 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  135 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//  136 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  137 0x8E,0x9F,0xBF,0xBF,0xBF,0x9F,0x8E,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  138 0x80
//  139 };
//  140 
//  141 /**************************************************************
//  142  *
//  143  *  the  picture of wifi_3 label 
//  144  *
//  145  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  146 const uint8 WiFi_3[81] =
WiFi_3:
        DB 0
        DB 0
        DB 8
        DB 24
        DB 56
        DB 120
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 120
        DB 56
        DB 24
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 255
        DB 1
        DB 0
        DB 0
        DB 0
        DB 96
        DB 224
        DB 192
        DB 128
        DB 0
        DB 128
        DB 192
        DB 224
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 191
        DB 128
        DB 128
        DB 128
        DB 128
        DB 176
        DB 184
        DB 157
        DB 143
        DB 135
        DB 143
        DB 157
        DB 184
        DB 176
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
//  147 {
//  148 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\WIFIMOD3.bmp  --*/
//  149 /*--  øÌ∂»x∏ﬂ∂»=27x24  --*/
//  150 0x00,0x00,0x08,0x18,0x38,0x78,0xF8,0xF8,0xF8,0xF8,0xF8,0x78,0x38,0x18,0x08,0x00,
//  151 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  152 0x00,0x00,0x01,0xFF,0x01,0x00,0x00,0x00,0x60,0xE0,0xC0,0x80,0x00,0x80,0xC0,0xE0,
//  153 0x60,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xBF,0x80,
//  154 0x80,0x80,0x80,0xB0,0xB8,0x9D,0x8F,0x87,0x8F,0x9D,0xB8,0xB0,0x80,0x80,0x80,0x80,
//  155 0x80
//  156 };
//  157 
//  158 /**************************************************************
//  159  *
//  160  *  the  picture of enddevice mode label 
//  161  *
//  162  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  163 const uint8 Auto[60] = 
Auto:
        DB 248
        DB 136
        DB 136
        DB 136
        DB 136
        DB 248
        DB 0
        DB 0
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 248
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 0
        DB 248
        DB 8
        DB 8
        DB 8
        DB 8
        DB 240
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 0
        DB 0
        DB 15
        DB 16
        DB 16
        DB 16
        DB 16
        DB 15
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 15
        DB 16
        DB 16
        DB 16
        DB 16
        DB 15
//  164 {
//  165 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\AUTOMOD.bmp  --*/
//  166 /*--  øÌ∂»x∏ﬂ∂»=30x16  --*/
//  167 0xF8,0x88,0x88,0x88,0x88,0xF8,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,
//  168 0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0xF8,0x08,0x08,0x08,0x08,0xF0,0x1F,0x00,
//  169 0x00,0x00,0x00,0x1F,0x00,0x00,0x0F,0x10,0x10,0x10,0x10,0x0F,0x00,0x00,0x00,0x00,
//  170 0x00,0x1F,0x00,0x00,0x00,0x00,0x0F,0x10,0x10,0x10,0x10,0x0F
//  171 };
//  172 
//  173 
//  174 /**************************************************************
//  175  *
//  176  *  the  picture of temperature mod label 
//  177  *
//  178  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  179 const uint8 RT[51] = 
RT:
        DB 224
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 224
        DB 0
        DB 0
        DB 32
        DB 32
        DB 32
        DB 224
        DB 32
        DB 32
        DB 32
        DB 255
        DB 8
        DB 24
        DB 56
        DB 104
        DB 200
        DB 136
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
//  180 {
//  181 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\RTMOD.bmp  --*/
//  182 /*--  øÌ∂»x∏ﬂ∂»=17x24  --*/
//  183 0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x20,0x20,0x20,0xE0,0x20,0x20,
//  184 0x20,0xFF,0x08,0x18,0x38,0x68,0xC8,0x88,0x07,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
//  185 0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x03,
//  186 0x00,0x00,0x00 
//  187 };
//  188 
//  189 /**************************************************************
//  190  *
//  191  *  the  picture of temperature mod label 
//  192  *
//  193  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  194 const uint8 FT[51] = 
FT:
        DB 224
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 32
        DB 224
        DB 32
        DB 32
        DB 32
        DB 247
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
//  195 {
//  196 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\FTMOD.bmp  --*/
//  197 /*--  øÌ∂»x∏ﬂ∂»=17x24  --*/
//  198 0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x20,0x20,0x20,0xE0,0x20,0x20,
//  199 0x20,0xF7,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
//  200 0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
//  201 0x00,0x00,0x00
//  202 };
//  203 
//  204 /**************************************************************
//  205  *
//  206  *  the  picture of relay state label 
//  207  *
//  208  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  209 const uint8 Arrow[33] = 
Arrow:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 192
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 12
        DB 142
        DB 207
        DB 239
        DB 255
        DB 239
        DB 207
        DB 142
        DB 12
        DB 8
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
//  210 {
//  211 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\arrow.bmp  --*/
//  212 /*--  øÌ∂»x∏ﬂ∂»=11x24  --*/
//  213 0x00,0x00,0x00,0x00,0x80,0xC0,0x80,0x00,0x00,0x00,0x00,0x08,0x0C,0x8E,0xCF,0xEF,
//  214 0xFF,0xEF,0xCF,0x8E,0x0C,0x08,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  215 0x02
//  216 };
//  217 
//  218 
//  219 /**************************************************************
//  220  *
//  221  *  the  code of set temperature number  
//  222  *
//  223  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  224 const uint8 STCODE[360] = 
STCODE:
        DB 254
        DB 254
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 250
        DB 254
        DB 251
        DB 241
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 243
        DB 251
        DB 159
        DB 151
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 147
        DB 159
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 252
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 241
        DB 251
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 135
        DB 159
        DB 0
        DB 2
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 250
        DB 254
        DB 248
        DB 248
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 15
        DB 3
        DB 135
        DB 147
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 144
        DB 128
        DB 2
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 254
        DB 254
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 241
        DB 251
        DB 144
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 147
        DB 135
        DB 254
        DB 252
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 252
        DB 254
        DB 3
        DB 1
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 253
        DB 251
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 135
        DB 159
        DB 254
        DB 250
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 2
        DB 0
        DB 3
        DB 3
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 252
        DB 248
        DB 128
        DB 144
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 147
        DB 135
        DB 254
        DB 254
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 2
        DB 0
        DB 255
        DB 249
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 252
        DB 248
        DB 135
        DB 147
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 151
        DB 159
        DB 2
        DB 2
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 254
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 241
        DB 251
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 135
        DB 159
        DB 254
        DB 254
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 250
        DB 254
        DB 251
        DB 249
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 255
        DB 251
        DB 135
        DB 147
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 151
        DB 159
        DB 254
        DB 254
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 6
        DB 254
        DB 254
        DB 3
        DB 1
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 12
        DB 253
        DB 255
        DB 128
        DB 144
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 152
        DB 155
        DB 159
//  225 {
//  226   /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\ST0MOD.bmp  --*/
//  227 /*--  øÌ∂»x∏ﬂ∂»=12x24  --*/
//  228 0xFE,0xFE,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFA,0xFE,0xFB,0xF1,0x00,0x00,
//  229 0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0xFB,0x9F,0x97,0x98,0x98,0x98,0x98,0x98,0x98,
//  230 0x98,0x98,0x93,0x9F,
//  231 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFE,0x00,0x00,0x00,0x00,
//  232 0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0xFB,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  233 0x80,0x80,0x87,0x9F,
//  234 0x00,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFA,0xFE,0xF8,0xF8,0x0C,0x0C,
//  235 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0F,0x03,0x87,0x93,0x98,0x98,0x98,0x98,0x98,0x98,
//  236 0x98,0x98,0x90,0x80,
//  237 0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFE,0xFE,0x0C,0x0C,0x0C,0x0C,
//  238 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xF1,0xFB,0x90,0x98,0x98,0x98,0x98,0x98,0x98,0x98,
//  239 0x98,0x98,0x93,0x87,
//  240 0xFE,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFE,0x03,0x01,0x0C,0x0C,
//  241 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFD,0xFB,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  242 0x80,0x80,0x87,0x9F,
//  243 0xFE,0xFA,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x02,0x00,0x03,0x03,0x0C,0x0C,
//  244 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x80,0x90,0x98,0x98,0x98,0x98,0x98,0x98,
//  245 0x98,0x98,0x93,0x87,
//  246 0xFE,0xFE,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x02,0x00,0xFF,0xF9,0x0C,0x0C,
//  247 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x87,0x93,0x98,0x98,0x98,0x98,0x98,0x98,
//  248 0x98,0x98,0x97,0x9F,
//  249 0x02,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFE,0xFE,0x00,0x00,0x00,0x00,
//  250 0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0xFB,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  251 0x80,0x80,0x87,0x9F,
//  252 0xFE,0xFE,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFA,0xFE,0xFB,0xF9,0x0C,0x0C,
//  253 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFF,0xFB,0x87,0x93,0x98,0x98,0x98,0x98,0x98,0x98,
//  254 0x98,0x98,0x97,0x9F,
//  255 0xFE,0xFE,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFE,0xFE,0x03,0x01,0x0C,0x0C,
//  256 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFD,0xFF,0x80,0x90,0x98,0x98,0x98,0x98,0x98,0x98,
//  257 0x98,0x98,0x9B,0x9F
//  258 };
//  259 
//  260 /**************************************************************
//  261  *
//  262  *  the  code of real temperature number  
//  263  *
//  264  ****************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  265 const uint8 RTCODE[850] = 
RTCODE:
        DB 192
        DB 160
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 160
        DB 192
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 255
        DB 255
        DB 227
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 227
        DB 247
        DB 227
        DB 255
        DB 255
        DB 127
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 63
        DB 127
        DB 255
        DB 1
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 193
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 0
        DB 32
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 160
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 224
        DB 224
        DB 220
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 11
        DB 7
        DB 3
        DB 255
        DB 255
        DB 127
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 1
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 0
        DB 32
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 32
        DB 128
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 8
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 235
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 63
        DB 127
        DB 255
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 0
        DB 0
        DB 224
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 224
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 3
        DB 7
        DB 29
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 203
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 192
        DB 160
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 32
        DB 0
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 7
        DB 31
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 200
        DB 224
        DB 224
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 127
        DB 255
        DB 255
        DB 0
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 1
        DB 192
        DB 160
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 32
        DB 0
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 227
        DB 247
        DB 255
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 232
        DB 240
        DB 224
        DB 255
        DB 127
        DB 63
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 127
        DB 255
        DB 255
        DB 0
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 1
        DB 32
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 32
        DB 160
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 195
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 192
        DB 160
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 160
        DB 192
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 255
        DB 255
        DB 227
        DB 247
        DB 255
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 235
        DB 247
        DB 227
        DB 255
        DB 127
        DB 63
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 127
        DB 255
        DB 255
        DB 0
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 1
        DB 192
        DB 160
        DB 96
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 224
        DB 96
        DB 160
        DB 192
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 3
        DB 7
        DB 31
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 28
        DB 235
        DB 247
        DB 227
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 63
        DB 127
        DB 255
        DB 0
        DB 2
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 3
        DB 2
        DB 0
//  266 {
//  267 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\mode\RT0MOD.bmp  --*/
//  268 /*--  øÌ∂»x∏ﬂ∂»=17x40  --*/
//  269 0xC0,0xA0,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0xA0,
//  270 0xC0,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,
//  271 0xFF,0xFF,0xE3,0xF7,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  272 0xE3,0xF7,0xE3,0xFF,0xFF,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  273 0x80,0x3F,0x7F,0xFF,0x01,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  274 0x03,0x03,0x03,0x02,0x00,
//  275 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
//  276 0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  277 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  278 0xC1,0xF7,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  279 0x00,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  280 0x00,0x00,0x00,0x01,0x03,
//  281 0x00,0x20,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0xA0,
//  282 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  283 0xFF,0xFF,0xE0,0xE0,0xDC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  284 0x0B,0x07,0x03,0xFF,0xFF,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  285 0x80,0x00,0x00,0x00,0x01,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  286 0x03,0x03,0x03,0x02,0x00,
//  287 0x20,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0x20,0x80,
//  288 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  289 0xFF,0xFF,0x08,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  290 0xEB,0xF7,0xE3,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  291 0x00,0x3F,0x7F,0xFF,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  292 0x03,0x03,0x02,0x00,0x00,
//  293 0xE0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
//  294 0xE0,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  295 0xFF,0xFF,0x03,0x07,0x1D,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  296 0xCB,0xF7,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  297 0x00,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  298 0x00,0x00,0x00,0x01,0x03,
//  299 0xC0,0xA0,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0x20,
//  300 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  301 0x00,0x00,0x03,0x07,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  302 0xC8,0xE0,0xE0,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  303 0x80,0x7F,0xFF,0xFF,0x00,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  304 0x03,0x03,0x03,0x02,0x01,
//  305 0xC0,0xA0,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0x20,
//  306 0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  307 0x00,0x00,0xE3,0xF7,0xFF,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  308 0xE8,0xF0,0xE0,0xFF,0x7F,0x3F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  309 0x80,0x7F,0xFF,0xFF,0x00,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  310 0x03,0x03,0x03,0x02,0x01,
//  311 0x20,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0x20,0xA0,
//  312 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  313 0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  314 0xC3,0xF7,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  315 0x00,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  316 0x00,0x00,0x00,0x01,0x03,
//  317 0xC0,0xA0,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0xA0,
//  318 0xC0,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,
//  319 0xFF,0xFF,0xE3,0xF7,0xFF,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  320 0xEB,0xF7,0xE3,0xFF,0x7F,0x3F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  321 0x80,0x7F,0xFF,0xFF,0x00,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  322 0x03,0x03,0x03,0x02,0x01,
//  323 0xC0,0xA0,0x60,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x60,0xA0,
//  324 0xC0,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  325 0xFF,0xFF,0x03,0x07,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
//  326 0xEB,0xF7,0xE3,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  327 0x80,0x3F,0x7F,0xFF,0x00,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
//  328 0x03,0x03,0x03,0x02,0x00
//  329 };
//  330 
//  331 //  the ASCII CODE for NUM

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  332 const uint8 ASCII_CODE[90] = {
ASCII_CODE:
        DB 62
        DB 81
        DB 73
        DB 69
        DB 62
        DB 0
        DB 66
        DB 127
        DB 64
        DB 0
        DB 66
        DB 97
        DB 81
        DB 73
        DB 70
        DB 33
        DB 65
        DB 69
        DB 75
        DB 49
        DB 24
        DB 20
        DB 18
        DB 127
        DB 16
        DB 39
        DB 69
        DB 69
        DB 69
        DB 57
        DB 60
        DB 74
        DB 73
        DB 73
        DB 48
        DB 1
        DB 113
        DB 9
        DB 5
        DB 3
        DB 54
        DB 73
        DB 73
        DB 73
        DB 54
        DB 6
        DB 73
        DB 73
        DB 41
        DB 30
        DB 126
        DB 17
        DB 17
        DB 17
        DB 126
        DB 127
        DB 73
        DB 73
        DB 73
        DB 54
        DB 62
        DB 65
        DB 65
        DB 65
        DB 34
        DB 127
        DB 65
        DB 65
        DB 34
        DB 28
        DB 127
        DB 73
        DB 73
        DB 73
        DB 65
        DB 127
        DB 9
        DB 9
        DB 9
        DB 1
        DB 127
        DB 4
        DB 8
        DB 16
        DB 127
        DB 0
        DB 54
        DB 54
        DB 0
        DB 0
//  333 0x3e,0x51,0x49,0x45,0x3e,//-0-
//  334 0x00,0x42,0x7f,0x40,0x00,//-1-
//  335 0x42,0x61,0x51,0x49,0x46,//-2-
//  336 0x21,0x41,0x45,0x4b,0x31,//-3-
//  337 0x18,0x14,0x12,0x7f,0x10,//-4-
//  338 0x27,0x45,0x45,0x45,0x39,//-5-
//  339 0x3c,0x4a,0x49,0x49,0x30,//-6-
//  340 0x01,0x71,0x09,0x05,0x03,//-7-
//  341 0x36,0x49,0x49,0x49,0x36,//-8-
//  342 0x06,0x49,0x49,0x29,0x1e,//-9-
//  343 0x7e,0x11,0x11,0x11,0x7e,//-A-
//  344 0x7f,0x49,0x49,0x49,0x36,//-B-
//  345 0x3e,0x41,0x41,0x41,0x22,//-C-
//  346 0x7f,0x41,0x41,0x22,0x1c,//-D-
//  347 0x7f,0x49,0x49,0x49,0x41,//-E-
//  348 0x7f,0x09,0x09,0x09,0x01,//-F-
//  349 0x7f,0x04,0x08,0x10,0x7f,//-N-
//  350 0x00,0x36,0x36,0x00,0x00,//-:-
//  351 };
//  352 
//  353 
//  354 // the power off picture

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  355 const uint8 POWER_PIC[57] =
POWER_PIC:
        DB 128
        DB 192
        DB 224
        DB 240
        DB 240
        DB 112
        DB 0
        DB 0
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 112
        DB 240
        DB 240
        DB 224
        DB 192
        DB 128
        DB 255
        DB 255
        DB 255
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 127
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 255
        DB 255
        DB 255
        DB 135
        DB 143
        DB 159
        DB 188
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 184
        DB 188
        DB 159
        DB 143
        DB 135
//  356 {
//  357 /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\±œ“µ…Ëº∆\Õº–ŒΩÁ√Ê…Ëº∆\Enddevice\mode\Power.bmp  --*/
//  358 /*--  øÌ∂»x∏ﬂ∂»=19x24  --*/
//  359 0x80,0xC0,0xE0,0xF0,0xF0,0x70,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x70,0xF0,0xF0,
//  360 0xE0,0xC0,0x80,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x00,0x00,
//  361 0x00,0x00,0x01,0xFF,0xFF,0xFF,0x87,0x8F,0x9F,0xBC,0xB8,0xB8,0xB8,0xB8,0xB8,0xB8,
//  362 0xB8,0xB8,0xB8,0xB8,0xB8,0xBC,0x9F,0x8F,0x87
//  363 };
//  364 
//  365 
//  366 // the error picture

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  367 const uint8 ERROR_PIC[340] = 
ERROR_PIC:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 248
        DB 248
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 8
        DB 0
        DB 0
        DB 0
        DB 248
        DB 248
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 224
        DB 224
        DB 0
        DB 0
        DB 0
        DB 248
        DB 248
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 224
        DB 224
        DB 0
        DB 0
        DB 0
        DB 240
        DB 240
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 240
        DB 240
        DB 0
        DB 0
        DB 0
        DB 248
        DB 248
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 224
        DB 224
        DB 0
        DB 247
        DB 251
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 247
        DB 251
        DB 24
        DB 216
        DB 216
        DB 152
        DB 24
        DB 24
        DB 24
        DB 7
        DB 7
        DB 0
        DB 0
        DB 0
        DB 247
        DB 251
        DB 24
        DB 216
        DB 216
        DB 152
        DB 24
        DB 24
        DB 24
        DB 7
        DB 7
        DB 0
        DB 0
        DB 0
        DB 247
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 227
        DB 247
        DB 0
        DB 0
        DB 0
        DB 247
        DB 251
        DB 24
        DB 216
        DB 216
        DB 152
        DB 24
        DB 24
        DB 24
        DB 7
        DB 7
        DB 0
        DB 15
        DB 23
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 16
        DB 0
        DB 0
        DB 0
        DB 31
        DB 15
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 6
        DB 14
        DB 28
        DB 24
        DB 0
        DB 0
        DB 0
        DB 31
        DB 15
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 6
        DB 14
        DB 28
        DB 24
        DB 0
        DB 0
        DB 0
        DB 7
        DB 31
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 24
        DB 7
        DB 7
        DB 0
        DB 0
        DB 0
        DB 31
        DB 15
        DB 0
        DB 0
        DB 0
        DB 1
        DB 3
        DB 6
        DB 14
        DB 28
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
//  368 {
//  369   /*--  µ˜»Î¡À“ª∑˘ÕºœÒ£∫C:\Users\William\Desktop\±œ“µ…Ëº∆\Õº–ŒΩÁ√Ê…Ëº∆\Enddevice\mode\error.bmp  --*/
//  370 /*--  øÌ∂»x∏ﬂ∂»=68x40  --*/
//  371 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  372 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  373 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  374 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  375 0x00,0x00,0x00,0x00,0xF8,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x08,0x00,
//  376 0x00,0x00,0xF8,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xE0,0xE0,0x00,0x00,0x00,
//  377 0xF8,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xE0,0xE0,0x00,0x00,0x00,0xF0,0xF0,
//  378 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF0,0xF0,0x00,0x00,0x00,0xF8,0xF8,0x18,0x18,
//  379 0x18,0x18,0x18,0x18,0x18,0xE0,0xE0,0x00,0xF7,0xFB,0x18,0x18,0x18,0x18,0x18,0x18,
//  380 0x18,0x00,0x00,0x00,0x00,0x00,0xF7,0xFB,0x18,0xD8,0xD8,0x98,0x18,0x18,0x18,0x07,
//  381 0x07,0x00,0x00,0x00,0xF7,0xFB,0x18,0xD8,0xD8,0x98,0x18,0x18,0x18,0x07,0x07,0x00,
//  382 0x00,0x00,0xF7,0xE7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE3,0xF7,0x00,0x00,0x00,
//  383 0xF7,0xFB,0x18,0xD8,0xD8,0x98,0x18,0x18,0x18,0x07,0x07,0x00,0x0F,0x17,0x18,0x18,
//  384 0x18,0x18,0x18,0x18,0x18,0x18,0x10,0x00,0x00,0x00,0x1F,0x0F,0x00,0x00,0x00,0x01,
//  385 0x03,0x06,0x0E,0x1C,0x18,0x00,0x00,0x00,0x1F,0x0F,0x00,0x00,0x00,0x01,0x03,0x06,
//  386 0x0E,0x1C,0x18,0x00,0x00,0x00,0x07,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x07,
//  387 0x07,0x00,0x00,0x00,0x1F,0x0F,0x00,0x00,0x00,0x01,0x03,0x06,0x0E,0x1C,0x18,0x00,
//  388 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  389 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  390 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  391 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  392 0x00,0x00,0x00,0x00
//  393 };
//  394 
//  395 /*************************************************************************************************
//  396                                            MACROS
//  397  **************************************************************************************************/
//  398 
//  399 
//  400 
//  401 
//  402 #if (HAL_LCD == TRUE)
//  403 /**************************************************************************************************
//  404  *                                       LOCAL VARIABLES
//  405  **************************************************************************************************/
//  406 
//  407 /**************************************************************************************************
//  408  *                                       FUNCTIONS - API
//  409  **************************************************************************************************/
//  410 void HalLcd_HW_WaitUs(uint16 i);
//  411 void HalLcd_HW_WriteCommand(uint8 cmd);
//  412 void HalLcd_HW_WriteData(uint8 data);
//  413 void HalLcd_HW_WriteAddr(uint8 page,uint8 col);
//  414 void HalLcd_HW_Clear(void);
//  415 void HalLcd_HW_LoadPicture(const uint8 *  pic ,uint8 height, uint8 width,uint8 start_x, 
//  416                            uint8 start_y, bool clear);
//  417 void HalLcd_HW_WriteST(bool power);
//  418 void HalLcd_HW_WriteSTU(bool power);
//  419 void HalLcd_HW_WriteRTU(void);
//  420 void HalLcdWriteWiFiMod(uint8 mod);
//  421 void HalLcdWriteEndMod(bool MOD);
//  422 void HalLcdWriteRealTempeMod(bool  mod);
//  423 void HalLcdWritePower(bool POWER);
//  424 void HalLcdWriteError(bool clear);
//  425 
//  426 void HalLcdWriteSetTemperature(uint8 temper,bool power);
//  427 void HalLcdWriteRealTemperature(uint16  temper);
//  428 void HalLcdWriteRelayState(bool  state);
//  429 void HalLcdWriteDebug(uint8 num,bool shift,bool sign,bool clear,bool blink);
//  430 void HalLcdWriteChar5x8(uint8 chr,uint8 page,uint8 col,bool clear);
//  431 //void HalLcdWriteString5x8(uint8* str,uint8 len, uint8 page, uint8 col);
//  432 void LoadBackground(void);
//  433 #endif //LCD
//  434 
//  435 /**************************************************************************************************
//  436  * @fn      HalLcdInit
//  437  *
//  438  * @brief   Initilize LCD Service
//  439  *
//  440  * @param   init - pointer to void that contains the initialized value
//  441  *
//  442  * @return  None
//  443  **************************************************************************************************/
//  444 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  445 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalLcdInit
        CODE
//  446 {
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, HalLcd_HW_Clear
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, LoadBackground
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  447 #if (HAL_LCD == TRUE)
//  448   /*config the I/O---------------by Zimuge*/
//  449     P1SEL &= ~(BV(3) + BV(5) + BV(6) + BV(7));
        ANL     0xf4,#0x17
//  450     P1DIR |= (BV(3) + BV(5) + BV(6) + BV(7));
        ORL     0xfe,#0xe8
//  451     P2SEL &= ~BV(0);
        ANL     0xf5,#0xfe
//  452     P2DIR |= BV(0);
        ORL     0xff,#0x1
//  453     LEDD = 0; //open the backlight
        CLR     0x90.3
//  454     HalLcd_HW_WriteCommand(0xE2);// software rest
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x1e
        LCALL   ?Subroutine4 & 0xFFFF
//  455     HalLcd_HW_WaitUs(2);
//  456    
//  457     HalLcd_HW_WriteCommand(0x2C);// open the boost circuit
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x2c
        LCALL   ?Subroutine4 & 0xFFFF
//  458     HalLcd_HW_WaitUs(2);
//  459     HalLcd_HW_WriteCommand(0x2E);// open the voltage management circuit
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x2e
        LCALL   ?Subroutine4 & 0xFFFF
//  460     HalLcd_HW_WaitUs(2);
//  461     HalLcd_HW_WriteCommand(0x2F);// open the voltage follower
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x2f
        LCALL   ?Subroutine4 & 0xFFFF
//  462     HalLcd_HW_WaitUs(2);
//  463     
//  464     HalLcd_HW_WriteCommand(0x24);// select the contrast roughly
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x24
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  465     HalLcd_HW_WriteCommand(0x81);// select the contrast smoothly
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x7f
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  466     HalLcd_HW_WriteCommand(0x12);
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x12
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  467     HalLcd_HW_WriteCommand(0xA2);// select the bias voltage radio 1/9
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x5e
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  468     
//  469     HalLcd_HW_WriteCommand(0xC8);// scan the LCD from top to bottom
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x38
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  470     
//  471     HalLcd_HW_WriteCommand(0xA0);// the address will automatically increase one by one
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x60
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  472     
//  473     HalLcd_HW_WriteCommand(0x40);// select the begining of the column to display the char
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#0x40
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  474     
//  475     HalLcd_HW_WriteCommand(0xAF);// open the lcd
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     R1,#-0x51
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  476     
//  477    // HalLcd_HW_WriteCommand(0xA5);
//  478     HalLcd_HW_Clear();
        ; Setup parameters for call to function HalLcd_HW_Clear
        LCALL   ??HalLcd_HW_Clear?relay
//  479     LoadBackground();
        ; Setup parameters for call to function LoadBackground
        LCALL   ??LoadBackground?relay
//  480 
//  481 #endif
//  482 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond3) CFA_SP SP+-5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond4) CFA_SP SP+-5
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL   ??HalLcd_HW_WriteCommand?relay
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  483 
//  484 /**************************************************************************************************
//  485  *                                    HARDWARE LCD
//  486  **************************************************************************************************/
//  487 #if (HAL_LCD == TRUE)
//  488 
//  489 /**************************************************************************************************
//  490  * @fn      HalLcd_HW_WaitUs
//  491  *
//  492  * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
//  493  *
//  494  * @param   x us. range[0-65536]
//  495  *
//  496  * @return  None
//  497  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  498 void HalLcd_HW_WaitUs(uint16 microSecs)
HalLcd_HW_WaitUs:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalLcd_HW_WaitUs
        CODE
//  499 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??HalLcd_HW_WaitUs_0
//  500   while(microSecs--)
//  501   {
//  502     /* 32 NOPs == 1 usecs */
//  503     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
??HalLcd_HW_WaitUs_1:
        nop
        nop
        nop
        nop
        nop
//  504     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  505     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  506     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  507     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  508     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  509     asm("nop"); asm("nop");
        nop
        nop
//  510   }
??HalLcd_HW_WaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalLcd_HW_WaitUs_1
//  511 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  512 
//  513 /**************************************************************************************************
//  514  * @fn      HalLcdWriteCommand to the LCD
//  515  *
//  516  * @brief   Write a command to the LCD
//  517  *
//  518  * @param  cmd-the command to be wrote
//  519  *         
//  520  *
//  521  * @return  None
//  522  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 void HalLcd_HW_WriteCommand(uint8 cmd)
HalLcd_HW_WriteCommand:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalLcd_HW_WriteCommand
        CODE
//  524 {
        FUNCALL HalLcd_HW_WriteCommand, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteCommand, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteCommand, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  525    uint8 i = 0;
//  526    LCD_CS = 0; // to select the LCD
        CLR     0xa0.0
//  527    HalLcd_HW_WaitUs(1);
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
//  528    LCD_RS = 0;// write the command
        CLR     0x90.7
//  529    HalLcd_HW_WaitUs(1);
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
//  530    for(i = 0;i < 8;i++)
        MOV     R6,#0x8
//  531    {
//  532        LCD_CLK = 0;
??HalLcd_HW_WriteCommand_0:
        CLR     0x90.5
//  533        asm("nop");// a delay for waiting the peripheral
        nop
//  534       // HalLcd_HW_WaitUs(2);
//  535        if(cmd & 0x80)
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??HalLcd_HW_WriteCommand_1
//  536        {
//  537          LCD_DI = 1;
        SETB    0x90.6
        SJMP    ??HalLcd_HW_WriteCommand_2
//  538        }
//  539        else
//  540        {
//  541          LCD_DI = 0; 
??HalLcd_HW_WriteCommand_1:
        CLR     0x90.6
//  542        }
//  543        //asm("nop");// a delay to set the data
//  544       // asm("nop");
//  545       // HalLcd_HW_WaitUs(2);
//  546        cmd = cmd << 1;
??HalLcd_HW_WriteCommand_2:
        CLR     C
        RLC     A
        MOV     R7,A
//  547        LCD_CLK = 1;
        SETB    0x90.5
//  548        asm("nop");// a delay to hold the data
        nop
//  549        asm("nop"); 
        nop
//  550        HalLcd_HW_WaitUs(1);
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
//  551    }
        DEC     R6
        MOV     A,R6
        JNZ     ??HalLcd_HW_WriteCommand_0
        CFI EndBlock cfiBlock7
//  552    LCD_CS = 1;
        REQUIRE ?Subroutine2
        REQUIRE _A_P2
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine2
//  553    
//  554 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        SETB    0xa0.0
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock8
//  555 
//  556 /**************************************************************************************************
//  557  * @fn      HalLcdWriteData to the LCD
//  558  *
//  559  * @brief   Write a data to the LCD
//  560  *
//  561  * @param  data-the data to be wrote
//  562  *         
//  563  *
//  564  * @return  None
//  565  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  566 void HalLcd_HW_WriteData(uint8 data)
HalLcd_HW_WriteData:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function HalLcd_HW_WriteData
        CODE
//  567 {
        FUNCALL HalLcd_HW_WriteData, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteData, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  568    uint8 i = 0;
//  569    LCD_CS = 0; // to select the LCD
        CLR     0xa0.0
//  570    HalLcd_HW_WaitUs(1);
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
//  571    LCD_RS = 1;// write data
        SETB    0x90.7
//  572    HalLcd_HW_WaitUs(1);
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??HalLcd_HW_WaitUs?relay
//  573    for(i = 0;i < 8;i++)
        MOV     R0,#0x8
//  574    {
//  575        LCD_CLK = 0;
??HalLcd_HW_WriteData_0:
        CLR     0x90.5
//  576        asm("nop");// a delay for waiting the peripheral
        nop
//  577       // HalLcd_HW_WaitUs(1);
//  578        if(data & 0x80)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        JNC     ??HalLcd_HW_WriteData_1
//  579        {
//  580          LCD_DI = 1;
        SETB    0x90.6
        SJMP    ??HalLcd_HW_WriteData_2
//  581        }
//  582        else
//  583        {
//  584          LCD_DI = 0; 
??HalLcd_HW_WriteData_1:
        CLR     0x90.6
//  585        }
//  586        asm("nop");// a delay to set the data
??HalLcd_HW_WriteData_2:
        nop
//  587        asm("nop");
        nop
//  588        //HalLcd_HW_WaitUs(1);
//  589        data = data << 1;
        CLR     C
        RLC     A
        MOV     R6,A
//  590        LCD_CLK = 1;
        SETB    0x90.5
//  591       // HalLcd_HW_WaitUs(1);
//  592        asm("nop");// a delay to hold the data
        nop
//  593        asm("nop"); 
        nop
//  594    }
        DEC     R0
        MOV     A,R0
        JNZ     ??HalLcd_HW_WriteData_0
//  595    LCD_CS = 1;//
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock9
        REQUIRE _A_P2
        REQUIRE _A_P1
//  596   // 
//  597 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock10
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  598 
//  599 /**************************************************************************************************
//  600  * @fn      HalLcd_HW_WriteAddr
//  601  *
//  602  * @brief   the address that to be wrote
//  603  *
//  604  * @param   page-the page of the lcd
//  605  *          col - the column of the lcd
//  606  *
//  607  * @return  None
//  608  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  609 void HalLcd_HW_WriteAddr(uint8 page,uint8 col)
HalLcd_HW_WriteAddr:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function HalLcd_HW_WriteAddr
        CODE
//  610 {
        FUNCALL HalLcd_HW_WriteAddr, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteAddr, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteAddr, HalLcd_HW_WriteCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  611    HalLcd_HW_WriteCommand(page + 0xb0);// set the page address
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     A,#-0x50
        ADD     A,R6
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  612    HalLcd_HW_WriteCommand(((col >> 4) & 0x0f) + 0x10);//set the column high four bit address
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     A,R7
        SWAP    A
        ANL     A,#0xf
        ADD     A,#0x10
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  613    HalLcd_HW_WriteCommand(col & 0x0f);//set the column low four  bit address
        ; Setup parameters for call to function HalLcd_HW_WriteCommand
        MOV     A,#0xf
        ANL     A,R7
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteCommand?relay
//  614 }
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock12
//  615 
//  616 /**************************************************************************************************
//  617  * @fn      HalLcd_HW_Clear
//  618  *
//  619  * @brief   Clear the HW LCD
//  620  *
//  621  * @param   None
//  622  *
//  623  * @return  None
//  624  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  625 void HalLcd_HW_Clear(void)
HalLcd_HW_Clear:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function HalLcd_HW_Clear
        CODE
//  626 {
        FUNCALL HalLcd_HW_Clear, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Clear, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  627   uint8 i = 0;
//  628   uint8 page = 0;
//  629   for(page = 0 ;page < 8; page++)
        MOV     R6,#0x0
//  630   {
//  631     HalLcd_HW_WriteAddr(page,0);
??HalLcd_HW_Clear_0:
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  632     for(i = 0; i < 128; i++)
        MOV     R7,#-0x80
//  633     {
//  634       HalLcd_HW_WriteData(0x00);
??HalLcd_HW_Clear_1:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#0x0
        LCALL   ??HalLcd_HW_WriteData?relay
//  635     }  
        DEC     R7
        MOV     A,R7
        JNZ     ??HalLcd_HW_Clear_1
//  636   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??HalLcd_HW_Clear_0
//  637 }
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock13
//  638 
//  639 /**************************************************************************************************
//  640  * @fn      HalLcdWriteChar
//  641  *
//  642  * @brief   Write a string to the LCD
//  643  *
//  644  * @param   chr  - char that will be displayed 
//  645  *        
//  646  *          page - the place to display
//  647  *          
//  648  *          col  - the column to display
//  649 
//  650             clear - true write the char,false clear the area
//  651  * @return  None
//  652  **************************************************************************************************/
//  653 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  654 void HalLcdWriteChar5x8( uint8 chr,uint8 page,uint8 col,bool clear)
HalLcdWriteChar5x8:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function HalLcdWriteChar5x8
        CODE
//  655 {
        FUNCALL HalLcdWriteChar5x8, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteChar5x8, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteChar5x8, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     ?V0 + 4,R4
//  656   
//  657    HalLcd_HW_WriteAddr(page,col);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  658    uint8 i = 0;
//  659    uint8 data = 0;
//  660    for(i = 0; i < 5; i++)
        MOV     ?V0 + 2,#0x0
//  661    {
//  662       data =  ASCII_CODE[5 * chr + i];
//  663       if(clear)
??HalLcdWriteChar5x8_0:
        MOV     A,?V0 + 4
        JZ      ??HalLcdWriteChar5x8_1
//  664         HalLcd_HW_WriteData(data);
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     A,?V0 + 3
        MOV     B,#0x5
        MUL     AB
        MOV     ?V0 + 0,?V0 + 2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#ASCII_CODE & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(ASCII_CODE >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??HalLcdWriteChar5x8_2
//  665       else
//  666         HalLcd_HW_WriteData(0x00);
??HalLcdWriteChar5x8_1:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#0x0
??HalLcdWriteChar5x8_2:
        LCALL   ??HalLcd_HW_WriteData?relay
//  667    }
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x5
        JC      ??HalLcdWriteChar5x8_0
        CFI EndBlock cfiBlock14
//  668 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  669 
//  670 /**************************************************************************************************
//  671  * @fn      HalLcdWriteString
//  672  *
//  673  * @brief   Write a string to the LCD
//  674  *
//  675  * @param   title  - Title that will be displayed 
//  676  *        
//  677  *          len   - the lenght of the string
//  678  *
//  679  * @return  None
//  680  **************************************************************************************************/
//  681 
//  682 /*void HalLcdWriteString5x8( uint8* str, uint8 len, uint8 page, uint8 col)
//  683 {
//  684    uint8 i = 0;
//  685    for(i = 0; i < len; i++)
//  686    {
//  687      HalLcdWriteChar5x8(str[i],page,col);
//  688      col += 5;
//  689      if(col >= 125)
//  690      {
//  691        col = 0;
//  692        page++;
//  693        if(page >= 8)
//  694        {
//  695          page = 0;
//  696        }
//  697      }
//  698      
//  699    }
//  700 }*/
//  701 /**************************************************************************************************
//  702  * @fn      HalLcd_HW_LoadPicture
//  703  *
//  704  * @brief   Load a picture with the height x width size,and the start point is (x,y). 
//  705  *
//  706  * @param   pic  - The picture to be displayed 
//  707  *        
//  708  *          height - the height of the picture
//  709  *
//  710  *          width - the width of the picture
//  711  *
//  712  *          x - the x coordinate of the start point
//  713  *
//  714  *          y - the y coordinate of the start point
//  715  *
//  716  *          clear - FALSE to clear the area,TRUE to wite the area;
//  717  * @return  None
//  718  **************************************************************************************************/
//  719 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  720 void HalLcd_HW_LoadPicture(const uint8 * pic,uint8 height, uint8 width,uint8 start_x, 
HalLcd_HW_LoadPicture:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function HalLcd_HW_LoadPicture
        CODE
//  721                            uint8 start_y,bool clear)
//  722 {
        FUNCALL HalLcd_HW_LoadPicture, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_LoadPicture, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_LoadPicture, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  723    uint8 start_page = start_y / 8;
        MOV     A,R0
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     ?V0 + 5,A
//  724    uint8 start_col = start_x;// the address of the start point
//  725    uint8 page_count = height / 8; // the count of page that the picture occupies
        MOV     A,R1
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     ?V0 + 6,A
//  726    uint8 i = 0, j = 0;
//  727    for(i = 0; i < page_count; i++)
        MOV     ?V0 + 2,#0x0
        SJMP    ??HalLcd_HW_LoadPicture_0
??HalLcd_HW_LoadPicture_1:
        INC     ?V0 + 2
??HalLcd_HW_LoadPicture_0:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 6
        JNC     ??HalLcd_HW_LoadPicture_2
//  728    {
//  729      HalLcd_HW_WriteAddr(i + start_page,start_col);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,?V0 + 7
        MOV     A,?V0 + 2
        ADD     A,?V0 + 5
        MOV     R1,A
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  730      for(j = 0; j < width; j++)
        MOV     ?V0 + 9,#0x0
        SJMP    ??HalLcd_HW_LoadPicture_3
//  731      {
//  732         if(clear)
//  733         HalLcd_HW_WriteData(pic[i * width + j]);
//  734         else
//  735         HalLcd_HW_WriteData(0x00);
??HalLcd_HW_LoadPicture_4:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#0x0
??HalLcd_HW_LoadPicture_5:
        LCALL   ??HalLcd_HW_WriteData?relay
        INC     ?V0 + 9
??HalLcd_HW_LoadPicture_3:
        MOV     A,?V0 + 9
        CLR     C
        SUBB    A,?V0 + 8
        JNC     ??HalLcd_HW_LoadPicture_1
        MOV     A,?V0 + 4
        JZ      ??HalLcd_HW_LoadPicture_4
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     ?V0 + 0,?V0 + 8
        MOV     A,?V0 + 2
        MOV     B,?V0 + 0
        MUL     AB
        MOV     ?V0 + 0,?V0 + 9
        LCALL   ?Subroutine9 & 0xFFFF
//  736      }
//  737      
//  738    }
??CrossCallReturnLabel_7:
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??HalLcd_HW_LoadPicture_5
//  739 }
??HalLcd_HW_LoadPicture_2:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  740 
//  741 /************************************************************** 
//  742  * @fn      HalLcd_HW_WriteST
//  743  *
//  744  * @brief   Load the set temperature label picture
//  745  *
//  746  * @param   power - ture to load ,false to clear
//  747  *
//  748  * @return  None  
//  749  *
//  750 **************************************************************/
//  751 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  752 void HalLcd_HW_WriteST(bool power)
HalLcd_HW_WriteST:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function HalLcd_HW_WriteST
        CODE
//  753 {
        FUNCALL HalLcd_HW_WriteST, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  754     HalLcd_HW_LoadPicture(ST_PIC,16,15,61,0,power); 
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x3d
        MOV     R4,#0xf
        MOV     R1,#0x10
        MOV     R2,#ST_PIC & 0xff
        MOV     R3,#(ST_PIC >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock20
//  755 }
//  756 
//  757 /************************************************************** 
//  758  * @fn      HalLcd_HW_WriteSTU
//  759  *
//  760  * @brief   Load the set temperature unit label picture
//  761  *
//  762  * @param   power - power - ture to load ,false to clear
//  763  *
//  764  * @return  None  
//  765  *
//  766 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  767 void HalLcd_HW_WriteSTU(bool power)
HalLcd_HW_WriteSTU:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function HalLcd_HW_WriteSTU
        CODE
//  768 {
        FUNCALL HalLcd_HW_WriteSTU, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteSTU, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteSTU, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteSTU, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  769   if(power)
        JZ      ??HalLcd_HW_WriteSTU_0
//  770   HalLcd_HW_LoadPicture((uint8 *)ST_Unit,16,10,112,8,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x70
        MOV     R4,#0xa
        MOV     R1,#0x10
        MOV     R2,#ST_Unit & 0xff
        MOV     R3,#(ST_Unit >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        SJMP    ??HalLcd_HW_WriteSTU_1
//  771   else
//  772   {
//  773     HalLcd_HW_LoadPicture((uint8 *)ST_Unit,16,10,112,8,FALSE);
??HalLcd_HW_WriteSTU_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x70
        MOV     R4,#0xa
        MOV     R1,#0x10
        MOV     R2,#ST_Unit & 0xff
        MOV     R3,#(ST_Unit >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  774     HalLcd_HW_WriteAddr(2,112);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x70
        MOV     R1,#0x2
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  775     for(uint8 i = 0; i < 10; i++)
        MOV     R6,#0xa
//  776     {
//  777       HalLcd_HW_WriteData(0x80);
??HalLcd_HW_WriteSTU_2:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        LCALL   ?Subroutine5 & 0xFFFF
//  778     }
//  779   }
??CrossCallReturnLabel_12:
        JNZ     ??HalLcd_HW_WriteSTU_2
//  780 }
??HalLcd_HW_WriteSTU_1:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     R1,#-0x80
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ??HalLcd_HW_WriteData?relay
        DEC     R6
        MOV     A,R6
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35
//  781 
//  782 /************************************************************** 
//  783  * @fn      HalLcd_HW_WriteRTU
//  784  *
//  785  * @brief   Load the real temperature unit label picture
//  786  *
//  787  * @param   None
//  788  *
//  789  * @return  None  
//  790  *
//  791 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  792 void HalLcd_HW_WriteRTU(void)
HalLcd_HW_WriteRTU:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function HalLcd_HW_WriteRTU
        CODE
//  793 {
        FUNCALL HalLcd_HW_WriteRTU, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  794   HalLcd_HW_LoadPicture(RT_Unit,16,11,111,48,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x30
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x6f
        MOV     R4,#0xb
        MOV     R1,#0x10
        MOV     R2,#RT_Unit & 0xff
        MOV     R3,#(RT_Unit >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock36
//  795 }
//  796 
//  797 /************************************************************** 
//  798  * @fn      HalLcdWriteWiFiMod
//  799  *
//  800  * @brief   Load the wifi mod picture according to the mod
//  801  *
//  802  * @param   mod - the mode of the wifi
//  803  *
//  804  * @return  None  
//  805  *
//  806 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  807 void HalLcdWriteWiFiMod(uint8 mod)
HalLcdWriteWiFiMod:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function HalLcdWriteWiFiMod
        CODE
//  808 {
        FUNCALL HalLcdWriteWiFiMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteWiFiMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteWiFiMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteWiFiMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  809   switch (mod)
        JZ      ??HalLcdWriteWiFiMod_0
        DEC     A
        JZ      ??HalLcdWriteWiFiMod_1
        DEC     A
        JZ      ??HalLcdWriteWiFiMod_2
        DEC     A
        JZ      ??HalLcdWriteWiFiMod_3
        SJMP    ??HalLcdWriteWiFiMod_4
//  810   {
//  811   case 0:
//  812     HalLcd_HW_LoadPicture(WiFi,24,27,1,0,TRUE);
??HalLcdWriteWiFiMod_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x1
        MOV     R4,#0x1b
        MOV     R1,#0x18
        MOV     R2,#WiFi & 0xff
        MOV     R3,#(WiFi >> 8) & 0xff
        SJMP    ??HalLcdWriteWiFiMod_5
        CFI CFA_XSP16 add(XSP16, 9)
//  813     break;
//  814   case 1:
//  815     HalLcd_HW_LoadPicture(WiFi_1,24,27,1,0,TRUE);
??HalLcdWriteWiFiMod_1:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x1
        MOV     R4,#0x1b
        MOV     R1,#0x18
        MOV     R2,#WiFi_1 & 0xff
        MOV     R3,#(WiFi_1 >> 8) & 0xff
        SJMP    ??HalLcdWriteWiFiMod_5
        CFI CFA_XSP16 add(XSP16, 9)
//  816     break;
//  817   case 2:
//  818     HalLcd_HW_LoadPicture(WiFi_2,24,27,1,0,TRUE);
??HalLcdWriteWiFiMod_2:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x1
        MOV     R4,#0x1b
        MOV     R1,#0x18
        MOV     R2,#WiFi_2 & 0xff
        MOV     R3,#(WiFi_2 >> 8) & 0xff
        SJMP    ??HalLcdWriteWiFiMod_5
        CFI CFA_XSP16 add(XSP16, 9)
//  819     break;
//  820   case 3:
//  821     HalLcd_HW_LoadPicture(WiFi_3,24,27,1,0,TRUE);
??HalLcdWriteWiFiMod_3:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x1
        MOV     R4,#0x1b
        MOV     R1,#0x18
        MOV     R2,#WiFi_3 & 0xff
        MOV     R3,#(WiFi_3 >> 8) & 0xff
??HalLcdWriteWiFiMod_5:
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  822     break;
//  823   default:
//  824     break;
//  825   }
//  826 }
??HalLcdWriteWiFiMod_4:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock37
//  827 
//  828 /************************************************************** 
//  829  * @fn      HalLcdWriteSetTemperature
//  830  *
//  831  * @brief   Load the set temperature label picture
//  832  *
//  833  * @param   temper - the temperature to be display
//  834  *
//  835  *          power - true to load the picture,false to clear       
//  836  *
//  837  * @return  None  
//  838  *
//  839 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  840 void HalLcdWriteSetTemperature(uint8 temper,bool power)
HalLcdWriteSetTemperature:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function HalLcdWriteSetTemperature
        CODE
//  841 {
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteSetTemperature, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  842   uint8 ten = temper / 10;
        MOV     B,#0xa
        MOV     A,R6
        DIV     AB
        MOV     R2,A
//  843   uint8 one = temper % 10;
        MOV     A,R6
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        MOV     ?V0 + 0,A
//  844   if(power)
        MOV     A,R7
        JZ      ??HalLcdWriteSetTemperature_0
//  845   {
//  846     // write the higher bit of the temperatue
//  847     HalLcd_HW_LoadPicture(&STCODE[ten * 36],24,12,81,0,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R5,#0x51
        MOV     R4,#0xc
        MOV     R1,#0x18
        MOV     A,R2
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  848     // write the low bit of the temperatue
//  849     HalLcd_HW_LoadPicture(&STCODE[one * 36],24,12,98,0,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine3 & 0xFFFF
//  850   }
??CrossCallReturnLabel_22:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??HalLcdWriteSetTemperature_1
//  851   else
//  852   {
//  853     // write the higher bit of the temperatue
//  854     HalLcd_HW_LoadPicture(&STCODE[ten * 36],24,12,81,0,FALSE);
??HalLcdWriteSetTemperature_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R5,#0x51
        MOV     R4,#0xc
        MOV     R1,#0x18
        MOV     A,R2
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  855     HalLcd_HW_WriteAddr(2,81);// reload the line
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x51
        MOV     R1,#0x2
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  856     for(uint8 i = 0; i < 12; i++)
        MOV     ?V0 + 1,#0xc
//  857     {
//  858        HalLcd_HW_WriteData(0x80);
??HalLcdWriteSetTemperature_2:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#-0x80
        LCALL   ??HalLcd_HW_WriteData?relay
//  859     }
        DEC     ?V0 + 1
        MOV     A,?V0 + 1
        JNZ     ??HalLcdWriteSetTemperature_2
//  860     // write the low bit of the temperatue
//  861     HalLcd_HW_LoadPicture(&STCODE[one * 36],24,12,98,0,FALSE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  862     HalLcd_HW_WriteAddr(2,98);  // reload the line 
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x62
        MOV     R1,#0x2
        LCALL   ??HalLcd_HW_WriteAddr?relay
//  863     for(uint8 i = 0; i < 12; i++)
        MOV     ?V0 + 0,#0xc
//  864     {
//  865        HalLcd_HW_WriteData(0x80);
??HalLcdWriteSetTemperature_3:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#-0x80
        LCALL   ??HalLcd_HW_WriteData?relay
//  866     }
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??HalLcdWriteSetTemperature_3
//  867     
//  868   }
//  869   
//  870   
//  871 }
??HalLcdWriteSetTemperature_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock38
//  872 
//  873 /************************************************************** 
//  874  * @fn      HalLcdWriteEndMod
//  875  *
//  876  * @brief   Load the enddevice mode picture
//  877  *
//  878  * @param   MOD - ture to be automatic,false to be manual
//  879  *
//  880  * @return  None  
//  881  *
//  882 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  883 void HalLcdWriteEndMod(bool MOD)
HalLcdWriteEndMod:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function HalLcdWriteEndMod
        CODE
//  884 {
        FUNCALL HalLcdWriteEndMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteEndMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  885    if(MOD)
        JZ      ??HalLcdWriteEndMod_0
//  886    HalLcd_HW_LoadPicture(Auto,16,30,2,24,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        SJMP    ??HalLcdWriteEndMod_1
//  887    else
//  888    HalLcd_HW_LoadPicture(Auto,16,30,2,24,FALSE);
??HalLcdWriteEndMod_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x0
??HalLcdWriteEndMod_1:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x2
        MOV     R4,#0x1e
        MOV     R1,#0x10
        MOV     R2,#Auto & 0xff
        MOV     R3,#(Auto >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock39
//  889 }
//  890 
//  891 /************************************************************** 
//  892  * @fn      HalLcdWriteRealTempeMod
//  893  *
//  894  * @brief   Load the real temperature mod label picture
//  895  *
//  896  * @param   mod - True the temperature is the room temperature, false to be the 
//  897  * floor's
//  898  *
//  899  * @return  None  
//  900  *
//  901 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  902 void HalLcdWriteRealTempeMod(bool  mod)
HalLcdWriteRealTempeMod:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function HalLcdWriteRealTempeMod
        CODE
//  903 {
        FUNCALL HalLcdWriteRealTempeMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteRealTempeMod, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  904   if(mod)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        JZ      ??HalLcdWriteRealTempeMod_0
//  905     HalLcd_HW_LoadPicture(RT,24,17,8,40,TRUE); 
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x28
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x8
        MOV     R4,#0x11
        MOV     R1,#0x18
        MOV     R2,#RT & 0xff
        MOV     R3,#(RT >> 8) & 0xff
        SJMP    ??HalLcdWriteRealTempeMod_1
        CFI CFA_XSP16 add(XSP16, 9)
//  906   else
//  907     HalLcd_HW_LoadPicture(FT,24,17,8,40,TRUE); 
??HalLcdWriteRealTempeMod_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x28
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x8
        MOV     R4,#0x11
        MOV     R1,#0x18
        MOV     R2,#FT & 0xff
        MOV     R3,#(FT >> 8) & 0xff
??HalLcdWriteRealTempeMod_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock40
//  908 }
//  909 /************************************************************** 
//  910  * @fn      HalLcdWriteRealTemperature
//  911  *
//  912  * @brief   Load the real temperature picture
//  913  *
//  914  * @param   temper-temperature to display
//  915  *
//  916  * @return  None  
//  917  *
//  918 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 void HalLcdWriteRealTemperature(uint16 temper)
HalLcdWriteRealTemperature:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function HalLcdWriteRealTemperature
        CODE
//  920 {
        FUNCALL HalLcdWriteRealTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteRealTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteRealTemperature, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  921   uint8 hun = temper / 100;
//  922   uint8 ten = temper % 100 / 10;
//  923   uint8 one = temper % 10;
//  924   HalLcd_HW_LoadPicture(&RTCODE[hun * 85],40,17,39,24,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x27
        MOV     R4,#0x11
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  925   // write the higher bit of the temperatue
//  926   HalLcd_HW_LoadPicture(&RTCODE[ten * 85],40,17,64,24,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x40
        MOV     R4,#0x11
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  927   // write the middle bit of the temperatue
//  928   HalLcd_HW_LoadPicture(&RTCODE[one * 85],40,17,90,24,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x5a
        MOV     R4,#0x11
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock41
//  929   // write the lower bit of the temperature
//  930 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV     A,R0
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     B,#0x55
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#RTCODE & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(RTCODE >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     R1,#0x28
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOV     R5,#0x62
        MOV     R4,#0xc
        MOV     R1,#0x18
        MOV     A,?V0 + 0
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOV     B,#0x24
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#STCODE & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(STCODE >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        LCALL   ??HalLcd_HW_LoadPicture?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76
//  931 
//  932 
//  933 /************************************************************** 
//  934  * @fn      HalLcdWriteRelayState
//  935  *
//  936  * @brief   Load the relay state picture
//  937  *
//  938  * @param   state - ture the relay is closed,false the relay is opened
//  939  *
//  940  * @return  None  
//  941  *
//  942 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  943 void HalLcdWriteRelayState(bool  state)
HalLcdWriteRelayState:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function HalLcdWriteRelayState
        CODE
//  944 {
        FUNCALL HalLcdWriteRelayState, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteRelayState, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  945   if(state)
        JZ      ??HalLcdWriteRelayState_0
//  946     HalLcd_HW_LoadPicture(Arrow,24,11,112,24,TRUE); 
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        SJMP    ??HalLcdWriteRelayState_1
//  947   else
//  948     HalLcd_HW_LoadPicture(Arrow,24,11,112,24,FALSE); 
??HalLcdWriteRelayState_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x0
??HalLcdWriteRelayState_1:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x70
        MOV     R4,#0xb
        MOV     R1,#0x18
        MOV     R2,#Arrow & 0xff
        MOV     R3,#(Arrow >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock77
//  949 }
//  950 
//  951 /************************************************************** 
//  952  * @fn      HalLcdWriteDeviceID
//  953  *
//  954  * @brief   Load the DeviceID
//  955  *
//  956  * @param   num - the num to display
//  957  * 
//  958  *          shift - true to blink the highbit , false lowerbit
//  959  *         
//  960  *          sign - true display D,false display N
//  961  *
//  962  *          blink - blink the char displayed
//  963  *          
//  964  * @return  None  
//  965  *
//  966 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  967 void HalLcdWriteDebug(uint8 num,bool shift,bool sign,bool clear,bool blink)
HalLcdWriteDebug:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function HalLcdWriteDebug
        CODE
//  968 {
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteDebug, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 4,R2
        MOV     A,R4
        MOV     R6,A
        MOV     ?V0 + 1,R5
//  969   uint8 ten = num / 16;
        MOV     A,R1
        SWAP    A
        ANL     A,#0xf
        MOV     R7,A
//  970   uint8 one = num % 16;
        MOV     A,#0xf
        ANL     A,?V0 + 2
        MOV     ?V0 + 0,A
//  971   if(sign)// display the devicce id tab:D:
        MOV     A,R3
        MOV     R3,#0x1e
        MOV     R2,#0x1
        JZ      ??HalLcdWriteDebug_0
//  972   {
//  973    HalLcdWriteChar5x8(13,1,30,clear);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R1,#0xd
        SJMP    ??HalLcdWriteDebug_1
//  974    HalLcdWriteChar5x8(17,1,35,clear);
//  975   }
//  976   else// display the PANID tab: N:
//  977   {
//  978    HalLcdWriteChar5x8(16,1,30,clear);
??HalLcdWriteDebug_0:
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R1,#0x10
??HalLcdWriteDebug_1:
        LCALL   ??HalLcdWriteChar5x8?relay
//  979    HalLcdWriteChar5x8(17,1,35,clear);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     A,R6
        MOV     R4,A
        MOV     R3,#0x23
        MOV     R2,#0x1
        MOV     R1,#0x11
        LCALL   ??HalLcdWriteChar5x8?relay
//  980   }
//  981   
//  982   if(shift)
        MOV     A,?V0 + 4
        JZ      ??HalLcdWriteDebug_2
//  983   {
//  984      HalLcdWriteChar5x8(ten,1,40,blink & clear);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     A,?V0 + 1
        ANL     A,R6
        MOV     R4,A
        MOV     R3,#0x28
        MOV     R2,#0x1
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLcdWriteChar5x8?relay
//  985      HalLcdWriteChar5x8(one,1,45,clear);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     A,R6
        SJMP    ??HalLcdWriteDebug_3
//  986   }
//  987   else
//  988   {
//  989      HalLcdWriteChar5x8(ten,1,40,clear );
??HalLcdWriteDebug_2:
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     A,R6
        MOV     R4,A
        MOV     R3,#0x28
        MOV     R2,#0x1
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLcdWriteChar5x8?relay
//  990      HalLcdWriteChar5x8(one,1,45,blink & clear);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     A,?V0 + 1
        ANL     A,R6
??HalLcdWriteDebug_3:
        MOV     R4,A
        MOV     R3,#0x2d
        MOV     R2,#0x1
        MOV     R1,?V0 + 0
        LCALL   ??HalLcdWriteChar5x8?relay
//  991   }
//  992 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock78
//  993 /************************************************************** 
//  994  * @fn      LoadBackground
//  995  *
//  996  * @brief   Load the back ground picture
//  997  *
//  998  * @param   None
//  999  *
// 1000  * @return  None  
// 1001  *
// 1002 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1003 void LoadBackground(void)
LoadBackground:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function LoadBackground
        CODE
// 1004 {
        FUNCALL LoadBackground, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LoadBackground, HalLcd_HW_WriteRTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1005      uint8 j = 0;
// 1006      // write the line
// 1007      HalLcd_HW_WriteAddr(2,0);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLcd_HW_WriteAddr?relay
// 1008      for(j = 0; j < 128; j++)
        MOV     R6,#-0x80
// 1009      {
// 1010        HalLcd_HW_WriteData(0x80);
??LoadBackground_0:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        LCALL   ?Subroutine5 & 0xFFFF
// 1011      }
??CrossCallReturnLabel_13:
        JNZ     ??LoadBackground_0
// 1012      
// 1013      
// 1014      // write the point
// 1015      HalLcd_HW_WriteAddr(6,84);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        LCALL   ?Subroutine7 & 0xFFFF
// 1016      for(j = 0; j < 3; j++)
// 1017      {
// 1018        HalLcd_HW_WriteData(0x80);
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        LCALL   ?Subroutine5 & 0xFFFF
// 1019      }
??CrossCallReturnLabel_14:
        JNZ     ??CrossCallReturnLabel_36
// 1020      HalLcd_HW_WriteAddr(7,84);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x54
        MOV     R1,#0x7
        LCALL   ??Subroutine17_0 & 0xFFFF
// 1021      for(j = 0; j < 3; j++)
// 1022      {
// 1023        HalLcd_HW_WriteData(0x03);
??CrossCallReturnLabel_38:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#0x3
        LCALL   ??Subroutine13_0 & 0xFFFF
// 1024      }
??CrossCallReturnLabel_17:
        JNZ     ??CrossCallReturnLabel_38
// 1025      //HalLcd_HW_WriteST();
// 1026     // HalLcd_HW_WriteSTU();
// 1027      HalLcd_HW_WriteRTU();
        ; Setup parameters for call to function HalLcd_HW_WriteRTU
        LCALL   ??HalLcd_HW_WriteRTU?relay
// 1028 }
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock79
// 1029 
// 1030 
// 1031 /************************************************************** 
// 1032  * @fn      HalLcdWritePower
// 1033  *
// 1034  * @brief   Load the power picture
// 1035  *
// 1036  * @param   POWER-TRUE-power on,false-power off 
// 1037  *
// 1038  * @return  None  
// 1039  *
// 1040 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1041 void HalLcdWritePower(bool clear)
HalLcdWritePower:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function HalLcdWritePower
        CODE
// 1042 {
        FUNCALL HalLcdWritePower, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWritePower, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWritePower, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWritePower, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 1043   if(!clear) //remove the picture
        JNZ     ??HalLcdWritePower_0
// 1044   {
// 1045        HalLcd_HW_LoadPicture(POWER_PIC,24,19,81,0,FALSE); 
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x51
        MOV     R4,#0x13
        MOV     R1,#0x18
        MOV     R2,#POWER_PIC & 0xff
        MOV     R3,#(POWER_PIC >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
// 1046        HalLcd_HW_WriteAddr( 2,81);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x51
        MOV     R1,#0x2
        LCALL   ??HalLcd_HW_WriteAddr?relay
// 1047        for(uint8 i = 0; i < 19;i++)
        MOV     R6,#0x13
// 1048        {
// 1049          HalLcd_HW_WriteData(0x80);
??HalLcdWritePower_1:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        LCALL   ?Subroutine5 & 0xFFFF
// 1050        }
// 1051   }
??CrossCallReturnLabel_15:
        JZ      ??HalLcdWritePower_2
        SJMP    ??HalLcdWritePower_1
// 1052   else
// 1053   {
// 1054        HalLcd_HW_LoadPicture( POWER_PIC,24,19,81,0,TRUE);
??HalLcdWritePower_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x51
        MOV     R4,#0x13
        MOV     R1,#0x18
        MOV     R2,#POWER_PIC & 0xff
        MOV     R3,#(POWER_PIC >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
// 1055   }
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
// 1056    
// 1057 }
??HalLcdWritePower_2:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock80
// 1058 
// 1059 /************************************************************** 
// 1060  * @fn      HalLcdWriteError
// 1061  *
// 1062  * @brief   Load the Error picture when the NTC is not break down
// 1063  *
// 1064  * @param   clear-TRUE-error occur,false-normal 
// 1065  *
// 1066  * @return  None  
// 1067  *
// 1068 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1069 void HalLcdWriteError(bool clear)
HalLcdWriteError:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function HalLcdWriteError
        CODE
// 1070 {
        FUNCALL HalLcdWriteError, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteError, HalLcd_HW_LoadPicture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteError, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteError, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteError, HalLcd_HW_WriteAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteError, HalLcd_HW_WriteData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 1071   if(clear)
        JZ      ??HalLcdWriteError_0
// 1072   {
// 1073     HalLcd_HW_LoadPicture(ERROR_PIC,40,68,39,24,TRUE);
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x27
        MOV     R4,#0x44
        MOV     R1,#0x28
        MOV     R2,#ERROR_PIC & 0xff
        MOV     R3,#(ERROR_PIC >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
// 1074   }
??CrossCallReturnLabel_34:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        SJMP    ??HalLcdWriteError_1
// 1075   else
// 1076   {
// 1077      HalLcd_HW_LoadPicture(ERROR_PIC,40,68,39,24,FALSE);
??HalLcdWriteError_0:
        ; Setup parameters for call to function HalLcd_HW_LoadPicture
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R5,#0x27
        MOV     R4,#0x44
        MOV     R1,#0x28
        MOV     R2,#ERROR_PIC & 0xff
        MOV     R3,#(ERROR_PIC >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
// 1078      HalLcd_HW_WriteAddr(6,84);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        LCALL   ?Subroutine7 & 0xFFFF
// 1079      
// 1080      // write the point
// 1081      uint8 j = 0;
// 1082      for(j = 0; j < 3; j++)
// 1083      {
// 1084        HalLcd_HW_WriteData(0x80);
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        LCALL   ?Subroutine5 & 0xFFFF
// 1085      }
??CrossCallReturnLabel_16:
        JNZ     ??CrossCallReturnLabel_37
// 1086      HalLcd_HW_WriteAddr(7,84);
        ; Setup parameters for call to function HalLcd_HW_WriteAddr
        MOV     R2,#0x54
        MOV     R1,#0x7
        LCALL   ??Subroutine17_0 & 0xFFFF
// 1087      for(j = 0; j < 3; j++)
// 1088      {
// 1089        HalLcd_HW_WriteData(0x03);
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function HalLcd_HW_WriteData
        MOV     R1,#0x3
        LCALL   ??Subroutine13_0 & 0xFFFF
// 1090      }
// 1091   }
??CrossCallReturnLabel_18:
        JNZ     ??CrossCallReturnLabel_39
// 1092 
// 1093 }
??HalLcdWriteError_1:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     R2,#0x54
        MOV     R1,#0x6
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL   ??HalLcd_HW_WriteAddr?relay
        MOV     R6,#0x3
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
// 1094 
// 1095 
// 1096 /************************************************************** 
// 1097  * @fn      HalLcdWriteErrorCode
// 1098  *
// 1099  * @brief  write the Error_Code when the error is detected
// 1100  *
// 1101  * @param   clear-TRUE-write,false-clear
// 1102  *
// 1103  * @return  None  
// 1104  *
// 1105 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1106 void HalLcdWriteErrorCode(uint16 error_code,bool clear)
HalLcdWriteErrorCode:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function HalLcdWriteErrorCode
        CODE
// 1107 {
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteErrorCode, HalLcdWriteChar5x8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1108   
// 1109   uint8 temp = error_code / 4096;
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     A,#0xc
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     A,?V0 + 2
        MOV     ?V0 + 0,A
// 1110   if(clear)// write the error_code in the lcd
        MOV     A,R1
        JZ      ??HalLcdWriteErrorCode_0
// 1111   {
// 1112     
// 1113     HalLcdWriteChar5x8(14,2,30,TRUE);
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R4,#0x1
        MOV     R3,#0x1e
        MOV     R2,#0x2
        MOV     R1,#0xe
        LCALL   ?Subroutine11 & 0xFFFF
// 1114     HalLcdWriteChar5x8(17,2,35,TRUE);
// 1115     
// 1116     HalLcdWriteChar5x8(temp,2,40,TRUE);
// 1117     
// 1118     temp = error_code / 256 % 16;
// 1119     HalLcdWriteChar5x8(temp,2,45,TRUE);
// 1120     
// 1121     temp = error_code / 16  % 16;
// 1122     HalLcdWriteChar5x8(temp,2,50,TRUE);
// 1123     
// 1124     temp = error_code % 16;
// 1125     HalLcdWriteChar5x8(temp,2,55,TRUE); 
// 1126   }
??CrossCallReturnLabel_8:
        MOV     R3,#0x23
        MOV     R2,#0x2
        MOV     R1,#0x11
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R3,#0x28
        MOV     R2,#0x2
        MOV     R1,?V0 + 0
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R3,#0x2d
        MOV     R2,#0x2
        MOV     A,R7
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R3,#0x32
        MOV     R2,#0x2
        MOV     A,R6
        SWAP    A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R3,#0x37
        MOV     R2,#0x2
        MOV     A,R6
        ANL     A,#0xf
        MOV     R1,A
        SJMP    ??HalLcdWriteErrorCode_1
// 1127   else // clear the error_code in the lcd
// 1128   {
// 1129     HalLcdWriteChar5x8(14,2,30,FALSE);
??HalLcdWriteErrorCode_0:
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R4,#0x0
        MOV     R3,#0x1e
        MOV     R2,#0x2
        MOV     R1,#0xe
        LCALL   ??Subroutine18_0 & 0xFFFF
// 1130     HalLcdWriteChar5x8(17,2,35,FALSE);
// 1131     
// 1132     HalLcdWriteChar5x8(temp,2,40,FALSE);
// 1133     
// 1134     HalLcdWriteChar5x8(temp,2,45,FALSE);
// 1135     
// 1136 
// 1137     HalLcdWriteChar5x8(temp,2,50,FALSE);
// 1138   
// 1139     HalLcdWriteChar5x8(temp,2,55,FALSE); 
// 1140   }
??CrossCallReturnLabel_43:
        MOV     R3,#0x23
        MOV     R2,#0x2
        MOV     R1,#0x11
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R3,#0x28
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R3,#0x2d
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R3,#0x32
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R3,#0x37
        MOV     R2,#0x2
        MOV     R1,?V0 + 0
??HalLcdWriteErrorCode_1:
        LCALL   ??HalLcdWriteChar5x8?relay
// 1141 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     R2,#0x2
        MOV     R1,?V0 + 0
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        LCALL   ??HalLcdWriteChar5x8?relay
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R4,#0x0
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        ANL     A,#0xf
        MOV     R1,A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_4
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_5
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        LCALL   ??HalLcdWriteChar5x8?relay
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        ; Setup parameters for call to function HalLcdWriteChar5x8
        MOV     R4,#0x1
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteCommand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Clear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_Clear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteChar5x8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteChar5x8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_LoadPicture?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_LoadPicture

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteST?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteST

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteSTU?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteSTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteRTU?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WriteRTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteWiFiMod?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteWiFiMod

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteSetTemperature?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteSetTemperature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteEndMod?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteEndMod

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteRealTempeMod?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteRealTempeMod

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteRealTemperature?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteRealTemperature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteRelayState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteRelayState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteDebug?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteDebug

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LoadBackground?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LoadBackground

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWritePower?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWritePower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteError?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteErrorCode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteErrorCode

        END
// 1142 
// 1143 #endif
// 1144 /**************************************************************************************************
// 1145 **************************************************************************************************/
// 1146 
// 1147 
// 1148 
// 
// 1 860 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
// 2 288 bytes in segment XDATA_ROM_C
// 
// 1 992 bytes of CODE  memory
// 2 288 bytes of CONST memory
//     0 bytes of DATA  memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: none
