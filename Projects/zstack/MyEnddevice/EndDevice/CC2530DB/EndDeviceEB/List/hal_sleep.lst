###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         20/Apr/2015  19:31:57 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Components\hal\target\CC2530EB #
#                          \hal_sleep.c                                       #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde #
#                          v.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"        #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Components\hal\target\CC2530EB\hal_sleep.c #
#                          " -D NWK_AUTO_POLL -D NV_RESTORE=1 -D xZTOOL_P1    #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\" -lA            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\"                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\" -e              #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\" -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\EndDevice Project for                 #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\Source\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\EndDevice Project for                     #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\ZMain\TI2530DB\" -I                  #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\hal\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\hal\target\CC2530EB\" -I                         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\high_level\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice Project for                   #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDe #
#                          vice Project for editing\Projects\zstack\MyEnddevi #
#                          ce\EndDevice\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\single_chip\" -I                 #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mt\"    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\..\..\Components\osal\ #
#                          include\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\saddr\" -I                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\af\" -I "C:\Users\William\Desktop\±œ“µ… #
#                          Ëº∆\SRC\EndDevice Project for                      #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\nwk\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          api\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En #
#                          dDevice Project for editing\Projects\zstack\MyEndd #
#                          evice\EndDevice\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sec\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆ #
#                          \SRC\EndDevice Project for                         #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sys\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End #
#                          Device Project for editing\Projects\zstack\MyEndde #
#                          vice\EndDevice\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\f8w\" -Ohz                                  #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\hal_sleep.lst    #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\hal_sleep.r51     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice Project for editing\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2012-03-07 11:55:12 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29664 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_key.h"
     49          #include "mac_api.h"
     50          #include "OSAL.h"
     51          #include "OSAL_Timers.h"
     52          #include "OSAL_Tasks.h"
     53          #include "OSAL_PwrMgr.h"
     54          #include "OnBoard.h"
     55          #include "hal_drivers.h"
     56          #include "hal_assert.h"
     57          #include "mac_mcu.h"
     58          
     59          #ifndef ZG_BUILD_ENDDEVICE_TYPE
     60          # define ZG_BUILD_ENDDEVICE_TYPE FALSE
     61          #endif
     62          
     63          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     64          #include "nwk_globals.h"
     65          #include "ZGlobals.h"
     66          #endif
     67          
     68          /* ------------------------------------------------------------------------------------------------
     69           *                                           Macros
     70           * ------------------------------------------------------------------------------------------------
     71           */
     72          
     73          /* POWER CONSERVATION DEFINITIONS
     74           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     75           */
     76          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     77          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     78          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     79          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     80          
     81          /* HAL power management mode is set according to the power management state. The default
     82           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     83           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     84           *   1. turn off the system clock, and
     85           *   2. halt the MCU.
     86           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     87           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     88           */
     89          #define HAL_SLEEP_OFF         CC2530_PM0
     90          #define HAL_SLEEP_TIMER       CC2530_PM2
     91          #define HAL_SLEEP_DEEP        CC2530_PM3
     92          
     93          /* MAX_SLEEP_TIME calculation:
     94           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     95           *   Round it to 510 seconds or 510000 ms
     96           */
     97          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     98          #define TICKS_SUBTRACTED                 2
     99          
    100          /* minimum time to sleep, this macro is to:
    101           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    102           * 2. define minimum safe sleep period
    103           */
    104          #if !defined (PM_MIN_SLEEP_TIME)
    105          #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
    106          #endif
    107          
    108          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    109           * consumption if not aligned. See linker file ".xcl" for actual placement.
    110           */
    111          #pragma location = "SLEEP_CODE"
    112          void halSetSleepMode(void);
    113          
    114          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    115           * compare takes into account the amount of processing time spent in function halSleep().
    116           * The first value is determined by measuring the number of sleep timer ticks it from
    117           * the beginning of the function to entering sleep mode or more precisely, when
    118           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    119           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    120           * MAC timer is restarted.
    121           */
    122          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    123          
    124          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    125          /* set CC2530 power mode; always use PM2 */
    126          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    127                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    128                                                          while (!(STLOAD & LDRDY));                   \
    129                                                          halSleepPconValue = PCON_IDLE;               \
    130                                                        )
    131          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    132          #else
    133          /* Debug: don't set power mode, just block until sleep timer interrupt */
    134          #define HAL_SLEEP_PREP_POWER_MODE(mode)     /* nothing */
    135          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    136                                                          halSleepInt = FALSE;         \
    137                                                          HAL_DISABLE_INTERRUPTS();    \
    138                                                        )
    139          #endif
    140          
    141          /* sleep and external interrupt port masks */
    142          #define STIE_BV                             BV(5)
    143          #define P0IE_BV                             BV(5)
    144          #define P1IE_BV                             BV(4)
    145          #define P2IE_BV                             BV(1)
    146          
    147          /* sleep timer interrupt control */
    148          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    149          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    150          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    151          
    152          /* backup interrupt enable registers before sleep */
    153          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    154                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    155                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    156                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    157                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    158                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    159          
    160          /* restore interrupt enable registers before sleep */
    161          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    162                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    163                                                            IEN2 = ien2;)  /* restore IEN2 register */
    164          
    165          /* convert msec to 320 usec units with round */
    166          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    167          
    168          /* for optimized indexing of uint32's */
    169          #if HAL_MCU_LITTLE_ENDIAN()
    170          #define UINT32_NDX0   0
    171          #define UINT32_NDX1   1
    172          #define UINT32_NDX2   2
    173          #define UINT32_NDX3   3
    174          #else
    175          #define UINT32_NDX0   3
    176          #define UINT32_NDX1   2
    177          #define UINT32_NDX2   1
    178          #define UINT32_NDX3   0
    179          #endif
    180          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    181          static uint32 maxSleepLoopTime =  HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
   \                     maxSleepLoopTime:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for maxSleepLoopTime>`
   \   000004                REQUIRE __INIT_XDATA_I
    182          
    183          /* ------------------------------------------------------------------------------------------------
    184           *                                        Global Variables
    185           * ------------------------------------------------------------------------------------------------
    186           */
    187          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    188          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    189          
    190          /* ------------------------------------------------------------------------------------------------
    191           *                                        Local Variables
    192           * ------------------------------------------------------------------------------------------------
    193           */
    194          
    195          /* HAL power management mode is set according to the power management state.
    196           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    198          
    199          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    200          static bool halSleepInt = FALSE;
    201          #endif
    202          
    203          /* ------------------------------------------------------------------------------------------------
    204           *                                      Function Prototypes
    205           * ------------------------------------------------------------------------------------------------
    206           */
    207          
    208          void halSleepSetTimer(uint32 timeout);
    209          
    210          /**************************************************************************************************
    211           * @fn          halSleep
    212           *
    213           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    214           *              The following code may cause excessive power consumption if not aligned. See linker
    215           *              file ".xcl" for actual placement.
    216           *
    217           * input parameters
    218           *
    219           * @param       None.
    220           *
    221           * output parameters
    222           *
    223           * None.
    224           *
    225           * @return      None.
    226           **************************************************************************************************
    227           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    228          void halSetSleepMode(void)
   \                     halSetSleepMode:
    229          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    230            PCON = halSleepPconValue;
   \   000000   85..87       MOV     0x87,halSleepPconValue
    231            HAL_DISABLE_INTERRUPTS();
   \   000003   C2AF         CLR     0xa8.7
    232          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE PCON
   \   000008                REQUIRE _A_IEN0
    233          
    234          /**************************************************************************************************
    235           * @fn          halSetMaxSleepLoopTime
    236           *
    237           * @brief       This function is to used to setup the maximum sleep loop time. This sleep loop time 
    238           *              should be lesser than T2 rollover so that a maximum of only one rollover occurs 
    239           *              when cc2530 is in sleep. This function should be called whenever rolloverTime is 
    240           *              changed using the function macBackoffTimerSetRollover(macTimerRollover);
    241           *
    242           * input parameters
    243           *
    244           * @param       rolloverTime.
    245           *
    246           * output parameters
    247           *
    248           * None.
    249           *
    250           * @return      None.
    251           **************************************************************************************************
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          void halSetMaxSleepLoopTime(uint32 rolloverTime)
   \                     halSetMaxSleepLoopTime:
    254          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    255            if( rolloverTime > HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME) )
    256            {
    257              maxSleepLoopTime = HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
    258            }
    259            maxSleepLoopTime = (rolloverTime - TICKS_SUBTRACTED);
   \   00000D   90....       MOV     DPTR,#__Constant_fffffffe
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?L_ADD_X
   \   000015   90....       MOV     DPTR,#maxSleepLoopTime
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?L_MOV_TO_X
    260          }
   \   00001D   7F04         MOV     R7,#0x4
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
    261          
    262          /**************************************************************************************************
    263           * @fn          halSleep
    264           *
    265           * @brief       This function is called from the OSAL task loop using and existing OSAL
    266           *              interface.  It sets the low power mode of the MAC and the CC2530.
    267           *
    268           * input parameters
    269           *
    270           * @param       osal_timeout - Next OSAL timer timeout.
    271           *
    272           * output parameters
    273           *
    274           * None.
    275           *
    276           * @return      None.
    277           **************************************************************************************************
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          void halSleep( uint16 osal_timeout )
   \                     halSleep:
    280          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    281            uint32        timeout;
    282            uint32        macTimeout = 0;
    283          
    284            /* get next OSAL timer expiration converted to 320 usec units */
    285            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   E4           CLR     A
   \   00000A   F5..         MOV     ?V0 + 2,A
   \   00000C   F5..         MOV     ?V0 + 3,A
   \   00000E   90....       MOV     DPTR,#__Constant_64
   \   000011   78..         MOV     R0,#?V0 + 4
   \   000013   12....       LCALL   ?L_MOV_X
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   79..         MOV     R1,#?V0 + 4
   \   00001A   12....       LCALL   ?L_MUL
   \   00001D   90....       MOV     DPTR,#__Constant_1f
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?L_ADD_X
   \   000025   7405         MOV     A,#0x5
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?UL_SHR
    286            if (timeout == 0)
   \   00002C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002F   7019         JNZ     ??halSleep_0
    287            {
    288              timeout = MAC_PwrNextTimeout();
   \   000031                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000031   12....       LCALL   ??MAC_PwrNextTimeout?relay
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   8C..         MOV     ?V0 + 2,R4
   \   00003A   8D..         MOV     ?V0 + 3,R5
    289            }
    290            else
    291            {
    292              /* get next MAC timer expiration */
    293              macTimeout = MAC_PwrNextTimeout();
    294          
    295              /* get lesser of two timeouts */
    296              if ((macTimeout != 0) && (macTimeout < timeout))
    297              {
    298                timeout = macTimeout;
    299              }
    300            }
    301          
    302            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    303             * the device is a stimulated device.
    304             */
    305            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \   00003C   EA           MOV     A,R2
   \   00003D   12....       LCALL   ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000040   702D         JNZ     ??halSleep_1
   \   000042   90....       MOV     DPTR,#halPwrMgtMode
   \   000045   7403         MOV     A,#0x3
   \   000047   F0           MOVX    @DPTR,A
   \   000048   803D         SJMP    ??halSleep_2
   \                     ??halSleep_0:
   \   00004A                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   00004A   12....       LCALL   ??MAC_PwrNextTimeout?relay
   \   00004D   8A..         MOV     ?V0 + 4,R2
   \   00004F   8B..         MOV     ?V0 + 5,R3
   \   000051   8C..         MOV     ?V0 + 6,R4
   \   000053   8D..         MOV     ?V0 + 7,R5
   \   000055   EA           MOV     A,R2
   \   000056   45..         ORL     A,?V0 + 5
   \   000058   45..         ORL     A,?V0 + 6
   \   00005A   45..         ORL     A,?V0 + 7
   \   00005C   6011         JZ      ??halSleep_1
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   79..         MOV     R1,#?V0 + 4
   \   000062   12....       LCALL   ?UL_GT
   \   000065   5008         JNC     ??halSleep_1
   \   000067   8A..         MOV     ?V0 + 0,R2
   \   000069   8B..         MOV     ?V0 + 1,R3
   \   00006B   8C..         MOV     ?V0 + 2,R4
   \   00006D   8D..         MOV     ?V0 + 3,R5
   \                     ??halSleep_1:
   \   00006F   90....       MOV     DPTR,#halPwrMgtMode
   \   000072   7402         MOV     A,#0x2
   \   000074   F0           MOVX    @DPTR,A
    306          
    307            /* DEEP sleep can only be entered when zgPollRate == 0.
    308             * This is to eliminate any possibility of entering PM3 between
    309             * two network timers.
    310             */
    311          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    312            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    313                (timeout == 0 && zgPollRate == 0))
    314          #else
    315            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    316                (timeout == 0))
   \   000075   90....       MOV     DPTR,#__Constant_2d
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?UL_GE_X
   \   00007D   4008         JC      ??halSleep_2
   \   00007F   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??halSleep_3 & 0xFFFF
    317          #endif
    318            {
    319              halIntState_t ien0, ien1, ien2;
    320          
    321              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_2:
   \   000087   A2AF         MOV     C,0xa8.7
   \   000089   4003         JC      ??halSleep_4
   \   00008B                ; Setup parameters for call to function halAssertHandler
   \   00008B   12....       LCALL   ??halAssertHandler?relay
    322              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_4:
   \   00008E   C2AF         CLR     0xa8.7
    323          
    324              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    325              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   000090   E5..         MOV     A,halSleepPconValue
   \   000092   7003         JNZ     $+5
   \   000094   02....       LJMP    ??halSleep_5 & 0xFFFF
   \   000097                ; Setup parameters for call to function MAC_PwrOffReq
   \   000097   7902         MOV     R1,#0x2
   \   000099   12....       LCALL   ??MAC_PwrOffReq?relay
   \   00009C   E9           MOV     A,R1
   \   00009D   707B         JNZ     ??halSleep_5
    326              {
    327                /* The PCON value is not zero. There is no interrupt overriding the 
    328                 * sleep decision. Also, the radio granted the sleep request.
    329                 */
    330          
    331          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    332                /* get peripherals ready for sleep */
    333                HalKeyEnterSleep();
   \   00009F                ; Setup parameters for call to function HalKeyEnterSleep
   \   00009F   12....       LCALL   ??HalKeyEnterSleep?relay
    334          #endif
    335          
    336          #ifdef HAL_SLEEP_DEBUG_LED
    337                HAL_TURN_OFF_LED3();
    338          #else
    339                /* use this to turn LEDs off during sleep */
    340                ///HalLedEnterSleep();
    341          #endif
    342          
    343                if(timeout > maxSleepLoopTime)
   \   0000A2   90....       MOV     DPTR,#maxSleepLoopTime
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?UL_GT_X
   \   0000AA   5008         JNC     ??halSleep_6
    344                {
    345                  timeout = maxSleepLoopTime;
   \   0000AC   90....       MOV     DPTR,#maxSleepLoopTime
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?L_MOV_X
    346                }  
    347          
    348                /* enable sleep timer interrupt */
    349                if (timeout != 0)
   \                     ??halSleep_6:
   \   0000B4   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B7   6021         JZ      ??halSleep_7
    350                {
    351                  if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   0000B9   90....       MOV     DPTR,#__Constant_185197
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?UL_GE_X
   \   0000C1   5008         JNC     ??halSleep_8
    352                  {
    353                    timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
    354                    halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   0000C3                ; Setup parameters for call to function halSleepSetTimer
   \   0000C3   90....       MOV     DPTR,#__Constant_185196
   \   0000C6   12....       LCALL   ?XLOAD_R2345
   \   0000C9   8008         SJMP    ??halSleep_9
    355                  }
    356                  else
    357                  {
    358                    /* set sleep timer */
    359                    halSleepSetTimer(timeout);
   \                     ??halSleep_8:
   \   0000CB                ; Setup parameters for call to function halSleepSetTimer
   \   0000CB   AA..         MOV     R2,?V0 + 0
   \   0000CD   AB..         MOV     R3,?V0 + 1
   \   0000CF   AC..         MOV     R4,?V0 + 2
   \   0000D1   AD..         MOV     R5,?V0 + 3
   \                     ??halSleep_9:
   \   0000D3   12....       LCALL   ??halSleepSetTimer?relay
    360                  }
    361          
    362                  /* set up sleep timer interrupt */
    363                  HAL_SLEEP_TIMER_CLEAR_INT();
   \   0000D6   C2C7         CLR     0xc0.7
    364                  HAL_SLEEP_TIMER_ENABLE_INT();
   \   0000D8   D2AD         SETB    0xa8.5
    365                }
    366          
    367          #ifdef HAL_SLEEP_DEBUG_LED
    368                if (halPwrMgtMode == CC2530_PM1)
    369                {
    370                  HAL_TURN_ON_LED1();
    371                }
    372                else
    373                {
    374                  HAL_TURN_OFF_LED1();
    375                }
    376          #endif
    377          
    378                /* Prep CC2530 power mode */
    379                HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_7:
   \   0000DA   53BEFC       ANL     0xbe,#0xfc
   \   0000DD   90....       MOV     DPTR,#halPwrMgtMode
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   42BE         ORL     0xbe,A
   \                     ??halSleep_10:
   \   0000E3   E5AD         MOV     A,0xad
   \   0000E5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E7   50FA         JNC     ??halSleep_10
   \   0000E9   75..01       MOV     halSleepPconValue,#0x1
    380          
    381                /* save interrupt enable registers and disable all interrupts */
    382                HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   0000EC   E5A8         MOV     A,0xa8
   \   0000EE   FE           MOV     R6,A
   \   0000EF   E5B8         MOV     A,0xb8
   \   0000F1   FF           MOV     R7,A
   \   0000F2   E59A         MOV     A,0x9a
   \   0000F4   F5..         MOV     ?V0 + 0,A
   \   0000F6   53A820       ANL     0xa8,#0x20
   \   0000F9   53B820       ANL     0xb8,#0x20
   \   0000FC   539A12       ANL     0x9a,#0x12
    383                HAL_ENABLE_INTERRUPTS();
   \   0000FF   D2AF         SETB    0xa8.7
    384          
    385                /* set CC2530 power mode, interrupt is disabled after this function
    386                 * Note that an ISR (that could wake up from power mode) which runs
    387                 * between the previous instruction enabling interrupts and before
    388                 * power mode is set would switch the halSleepPconValue so that
    389                 * power mode shall not be entered in such a case. 
    390                 */
    391                HAL_SLEEP_SET_POWER_MODE();
   \   000101                ; Setup parameters for call to function halSetSleepMode
   \   000101   12....       LCALL   ??halSetSleepMode?relay
    392          
    393                /* the interrupt is disabled - see halSetSleepMode() */
    394          
    395                /* restore interrupt enable registers */
    396                HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   000104   8EA8         MOV     0xa8,R6
   \   000106   8FB8         MOV     0xb8,R7
   \   000108   85..9A       MOV     0x9a,?V0 + 0
    397          
    398                /* disable sleep timer interrupt */
    399                HAL_SLEEP_TIMER_DISABLE_INT();
   \   00010B   C2AD         CLR     0xa8.5
    400          
    401          #ifdef HAL_SLEEP_DEBUG_LED
    402                HAL_TURN_ON_LED3();
    403          #else
    404                /* use this to turn LEDs back on after sleep */
    405                //HalLedExitSleep();
    406          #endif
    407          
    408          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    409                /* handle peripherals */
    410                (void)HalKeyExitSleep();
   \   00010D                ; Setup parameters for call to function HalKeyExitSleep
   \   00010D   12....       LCALL   ??HalKeyExitSleep?relay
    411          #endif
    412          
    413                /* power on the MAC; blocks until completion */
    414                MAC_PwrOnReq();
   \   000110                ; Setup parameters for call to function MAC_PwrOnReq
   \   000110   12....       LCALL   ??MAC_PwrOnReq?relay
    415          
    416                HAL_ENABLE_INTERRUPTS();
   \   000113   D2AF         SETB    0xa8.7
    417          
    418                /* For CC2530, T2 interrupt wonít be generated when the current count is greater than
    419                 * the comparator. The interrupt is only generated when the current count is equal to
    420                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    421                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    422                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    423                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    424                 * drives the chip in sleep and SYNC start is used.
    425                 */
    426                macMcuTimer2OverflowWorkaround();
   \   000115                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   000115   12....       LCALL   ??macMcuTimer2OverflowWorkaround?relay
   \   000118   8002         SJMP    ??halSleep_3
    427              }
    428              else
    429              {
    430                /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on
    431                 * the interrupt, exit normally, and the next sleep will be allowed.
    432                 */
    433                HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_5:
   \   00011A   D2AF         SETB    0xa8.7
    434              }
    435            }
    436          }
   \                     ??halSleep_3:
   \   00011C                REQUIRE ?Subroutine0
   \   00011C                REQUIRE _A_IEN0
   \   00011C                REQUIRE _A_IRCON
   \   00011C                REQUIRE SLEEPCMD
   \   00011C                REQUIRE STLOAD
   \   00011C                REQUIRE _A_IEN1
   \   00011C                REQUIRE IEN2
   \   00011C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002                REQUIRE ??Subroutine2_0
   \   000002                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   45..         ORL     A,?V0 + 1
   \   000002   45..         ORL     A,?V0 + 2
   \   000004   45..         ORL     A,?V0 + 3
   \   000006   22           RET
    437          
    438          /**************************************************************************************************
    439           * @fn          halSleepSetTimer
    440           *
    441           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    442           *              stores the value of the sleep timer; this value is used later to update OSAL
    443           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    444           *              period units and the compare value is set to the timeout.
    445           *
    446           * input parameters
    447           *
    448           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    449           *                        this value.
    450           *
    451           * output parameters
    452           *
    453           * None.
    454           *
    455           * @return      None.
    456           **************************************************************************************************
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    459          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
    460            uint32 ticks;
    461          
    462            /* read the sleep timer; ST0 must be read first */
    463            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   000012   E595         MOV     A,0x95
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   F0           MOVX    @DPTR,A
    464            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   00001B   E596         MOV     A,0x96
   \   00001D   C0E0         PUSH    A
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    465            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000027   E597         MOV     A,0x97
   \   000029   C0E0         PUSH    A
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
    466            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   000033   7403         MOV     A,#0x3
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    467          
    468            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    469             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    470             */
    471            ticks += (timeout * 671) / 64;
    472          
    473            /* subtract the processing time spent in function halSleep() */
    474            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   00003A   90....       MOV     DPTR,#__Constant_29f
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?L_MOV_X
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   79..         MOV     R1,#?V0 + 4
   \   000046   12....       LCALL   ?L_MUL
   \   000049   7406         MOV     A,#0x6
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?UL_SHR
   \   000050   90....       MOV     DPTR,#__Constant_ffffffe9
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?L_ADD_X
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?L_ADD_TO_X
    475          
    476            /* set sleep timer compare; ST0 must be written last */
    477            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F597         MOV     0x97,A
    478            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00006B   7401         MOV     A,#0x1
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F596         MOV     0x96,A
    479            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F595         MOV     0x95,A
    480          }
   \   00007C   7404         MOV     A,#0x4
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000084                REQUIRE ST0
   \   000084                REQUIRE ST1
   \   000084                REQUIRE ST2
    481          
    482          /**************************************************************************************************
    483           * @fn          TimerElapsed
    484           *
    485           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    486           *              Deprecated for CC2530 and CC2430 SoC.
    487           *
    488           * input parameters
    489           *
    490           * @param       None.
    491           *
    492           * output parameters
    493           *
    494           * None.
    495           *
    496           * @return      Number of timer ticks elapsed during sleep.
    497           **************************************************************************************************
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    500          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    501            /* Stubs */
    502            return (0);
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
   \   000008   02....       LJMP    ?BRET
    503          }
    504          
    505          /**************************************************************************************************
    506           * @fn          halRestoreSleepLevel
    507           *
    508           * @brief       Restore the deepest timer sleep level.
    509           *
    510           * input parameters
    511           *
    512           * @param       None
    513           *
    514           * output parameters
    515           *
    516           *              None.
    517           *
    518           * @return      None.
    519           **************************************************************************************************
    520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    522          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    523            /* Stubs */
    524          }
   \   000000   02....       LJMP    ?BRET
    525          
    526          /**************************************************************************************************
    527           * @fn          halSleepTimerIsr
    528           *
    529           * @brief       Sleep timer ISR.
    530           *
    531           * input parameters
    532           *
    533           * None.
    534           *
    535           * output parameters
    536           *
    537           * None.
    538           *
    539           * @return      None.
    540           **************************************************************************************************
    541           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    542          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    543          {
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007                ; Saved register size: 3
   \   000007                ; Auto size: 0
    544            HAL_ENTER_ISR();
   \   000007   E5A8         MOV     A,0xa8
   \   000009   D2AF         SETB    0xa8.7
    545            HAL_SLEEP_TIMER_CLEAR_INT();
   \   00000B   C2C7         CLR     0xc0.7
    546          
    547          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    548            halSleepInt = TRUE;
    549          #endif
    550            
    551            CLEAR_SLEEP_MODE();
    552            HAL_EXIT_ISR();
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   92AF         MOV     0xa8.7,C
    553          }
   \   000011   D0E0         POP     A
   \   000013   F8           MOV     R0,A
   \   000014   D0D0         POP     PSW
   \   000016   D0E0         POP     A
   \   000018   32           RETI
   \   000019                REQUIRE _A_IEN0
   \   000019                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for maxSleepLoopTime>`:
   \   000000   96511800     DD 1593750

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffffe:
   \   000000   FEFFFFFF     DD 4294967294

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2d:
   \   000000   2D000000     DD 45

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSetSleepMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSetMaxSleepLoopTime?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetMaxSleepLoopTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSleepSetTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TimerElapsed?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halRestoreSleepLevel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    554          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     TimerElapsed                       0      0      0
     halRestoreSleepLevel               0      0      0
     halSetMaxSleepLoopTime             0      0     12
     halSetSleepMode                    0      0     16
     halSleep                           0      0     16
       -> MAC_PwrNextTimeout            0      0     32
       -> MAC_PwrNextTimeout            0      0     32
       -> halAssertHandler              0      0     32
       -> MAC_PwrOffReq                 0      0     32
       -> HalKeyEnterSleep              0      0     32
       -> halSleepSetTimer              0      0     32
       -> halSleepSetTimer              0      0     32
       -> halSetSleepMode               0      0     32
       -> HalKeyExitSleep               0      0     32
       -> MAC_PwrOnReq                  0      0     32
       -> macMcuTimer2OverflowWorkaround
                                        0      0     32
     halSleepSetTimer                   1      0     36
     halSleepTimerIsr                   3      0      0


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     PCON                                    1
     ST0                                     1
     ST1                                     1
     ST2                                     1
     IEN2                                    1
     _A_IEN0                                 1
     STLOAD                                  1
     _A_IEN1                                 1
     SLEEPCMD                                1
     _A_IRCON                                1
     maxSleepLoopTime                        4
     halSleepPconValue                       1
     halPwrMgtMode                           1
     halSetSleepMode                         8
     halSetMaxSleepLoopTime                 34
     halSleep                              284
     ?Subroutine0                            5
     ?Subroutine1                            2
     ??Subroutine2_0                         7
     halSleepSetTimer                      132
     TimerElapsed                           11
     halRestoreSleepLevel                    3
     halSleepTimerIsr                       25
     ??halSleepTimerIsr??INTVEC 43           3
     ?<Initializer for maxSleepLoopTime>     4
     ?<Initializer for halSleepPconValue>    1
     __Constant_fffffffe                     4
     __Constant_64                           4
     __Constant_1f                           4
     __Constant_2d                           4
     __Constant_185197                       4
     __Constant_185196                       4
     __Constant_29f                          4
     __Constant_ffffffe9                     4
     ??halSetSleepMode?relay                 6
     ??halSetMaxSleepLoopTime?relay          6
     ??halSleep?relay                        6
     ??halSleepSetTimer?relay                6
     ??TimerElapsed?relay                    6
     ??halRestoreSleepLevel?relay            6

 
 478 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  25 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   8 bytes in segment SLEEP_CODE
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
  32 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 552 bytes of CODE  memory (+  3 bytes shared)
   0 bytes of CONST memory (+ 32 bytes shared)
   1 byte  of DATA  memory (+ 10 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
