###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         20/Apr/2015  19:51:20 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\Source\EnddeviceAF.c                       #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde #
#                          v.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"        #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\Sour #
#                          ce\EnddeviceAF.c" -D NWK_AUTO_POLL -D              #
#                          NV_RESTORE=1 -D xZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\" -lA            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\"                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\" -e              #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\" -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\EndDevice Project for                 #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\Source\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\EndDevice Project for                     #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\ZMain\TI2530DB\" -I                  #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\hal\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\hal\target\CC2530EB\" -I                         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\high_level\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice Project for                   #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDe #
#                          vice Project for editing\Projects\zstack\MyEnddevi #
#                          ce\EndDevice\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\single_chip\" -I                 #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mt\"    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\..\..\Components\osal\ #
#                          include\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\saddr\" -I                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\af\" -I "C:\Users\William\Desktop\±œ“µ… #
#                          Ëº∆\SRC\EndDevice Project for                      #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\nwk\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          api\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En #
#                          dDevice Project for editing\Projects\zstack\MyEndd #
#                          evice\EndDevice\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sec\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆ #
#                          \SRC\EndDevice Project for                         #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sys\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End #
#                          Device Project for editing\Projects\zstack\MyEndde #
#                          vice\EndDevice\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\f8w\" -Ohz                                  #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\EnddeviceAF.lst  #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\EnddeviceAF.r51   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice Project for editing\Projects\zstack\MyEnddevice\EndDevice\Source\EnddeviceAF.c
      1          #include "EnddeviceVariable.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
      2          #include "EnddeviceAF.h"
      3          
      4          
      5          
      6          /*********************************************************************
      7           * @fn      EnddeviceApp_HandleAfIncomingMessage
      8           *
      9           * @brief   Data message processor callback.  This function processes
     10           *          any incoming data - probably from other devices.  So, based
     11           *          on cluster ID, perform the intended action.
     12           *
     13           * @param   none
     14           *
     15           * @return  none
     16           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     17          void EnddeviceApp_HandleAfIncomingMessage( afIncomingMSGPacket_t *pkt )
   \                     EnddeviceApp_HandleAfIncomingMessage:
     18          {  
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     19            uint8 *str = pkt->cmd.Data;
   \   000005   EA           MOV     A,R2
   \   000006   2422         ADD     A,#0x22
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
     20            uint8 len = str[0];
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FC           MOV     R4,A
     21            uint8 id = str[1];
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FD           MOV     R5,A
     22            uint8 command = str[2];
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
     23            
     24           /*****************************for debug **************************/
     25             //  uint8  n = command /16;
     26             //  uint8  m = command % 16;
     27             // HalLcdWriteChar5x8(n,0,50,TRUE);
     28              // HalLcdWriteChar5x8(m,0,55,TRUE);
     29          /*****************************for debug **************************/
     30             
     31           
     32            // the PANID is changed ,reset the system regardless of id
     33            if((command == CMD_SET_PANID))// &&  //(pkt->clusterId == COORDINATOR_BROADCAST_CLUSTERID)) 
   \   000025   7410         MOV     A,#0x10
   \   000027   6E           XRL     A,R6
   \   000028   7025         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
     34            {
     35               if(len == 1)
   \   00002A   7401         MOV     A,#0x1
   \   00002C   6C           XRL     A,R4
   \   00002D   7020         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
     36               {
     37                  _NIB.nwkPanId = str[3];
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   90....       MOV     DPTR,#_NIB + 33
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
     38          	    NLME_UpdateNV(0x01);
   \   00003E                ; Setup parameters for call to function NLME_UpdateNV
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??NLME_UpdateNV?relay
     39          	    SystemReset();
   \   000043   C2AF         CLR     0xa8.7
   \   000045   C2AF         CLR     0xa8.7
   \   000047   75C9AB       MOV     0xc9,#-0x55
   \   00004A   75C95B       MOV     0xc9,#0x5b
   \                     ??EnddeviceApp_HandleAfIncomingMessage_1:
   \   00004D   80FE         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_1
     40               }     
     41            }
     42          
     43            if(id == MyDeviceId)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_0:
   \   00004F   90....       MOV     DPTR,#MyDeviceId
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6D           XRL     A,R5
   \   000054   6003         JZ      $+5
   \   000056   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     44            {
     45              //HalLcdWriteDeviceID(pkt->clusterId,TRUE);// for test
     46              switch (pkt->clusterId)
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6402         XRL     A,#0x2
   \   000064   7002         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_3
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \                     ??EnddeviceApp_HandleAfIncomingMessage_3:
   \   000068   6003         JZ      $+5
   \   00006A   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     47              {
     48              case COORDINATOR_COMMAND_CLUSTERID:
     49               {
     50                 
     51                switch(command)
   \   00006D   EE           MOV     A,R6
   \   00006E   14           DEC     A
   \   00006F   6036         JZ      ??EnddeviceApp_HandleAfIncomingMessage_4
   \   000071   14           DEC     A
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_5 & 0xFFFF
   \   000077   24FC         ADD     A,#-0x4
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_6 & 0xFFFF
   \   00007E   24FA         ADD     A,#-0x6
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_7 & 0xFFFF
   \   000085   14           DEC     A
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_8 & 0xFFFF
   \   00008B   14           DEC     A
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_9 & 0xFFFF
   \   000091   14           DEC     A
   \   000092   7003         JNZ     $+5
   \   000094   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_10 & 0xFFFF
   \   000097   2411         ADD     A,#0x11
   \   000099   7003         JNZ     $+5
   \   00009B   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_11 & 0xFFFF
   \   00009E   14           DEC     A
   \   00009F   7003         JNZ     $+5
   \   0000A1   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_12 & 0xFFFF
   \   0000A4   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     52                {
     53                  case CMD_SET_ROOM_TEMPER:
     54                       if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_4:
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   6C           XRL     A,R4
   \   0000AA   6003         JZ      $+5
   \   0000AC   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     55                       {
     56                        
     57                        // if(POWER)// only when powered on,than we can set the temperature
     58                        // {
     59                           SetRM_Temperature = str[3];
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   90....       MOV     DPTR,#SetRM_Temperature
   \   0000BA   12....       LCALL   ?Subroutine1 & 0xFFFF
     60                           MsgBuf[0] = 1;
     61                           MsgBuf[1] = MyDeviceId;
     62                           MsgBuf[2] = CMD_SET_ROOM_TEMPER;
   \                     ??CrossCallReturnLabel_8:
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   F0           MOVX    @DPTR,A
     63                           MsgBuf[3] = SetRM_Temperature;
   \   0000C0   90....       MOV     DPTR,#SetRM_Temperature
   \   0000C3   12....       LCALL   ?Subroutine3 & 0xFFFF
     64                           
     65                           if(osal_nv_item_init(SET_RM_TEMP_NV,1,NULL) == SUCCESS)
   \                     ??CrossCallReturnLabel_3:
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7C01         MOV     R4,#0x1
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   7A02         MOV     R2,#0x2
   \   0000CF   7B04         MOV     R3,#0x4
   \   0000D1   12....       LCALL   ??osal_nv_item_init?relay
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV     A,R1
   \   0000DA   7041         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_13
     66                           {
     67                               osal_nv_write(SET_RM_TEMP_NV,0,1,&SetRM_Temperature);// load the item to the NV
   \   0000DC                ; Setup parameters for call to function osal_nv_write
   \   0000DC   75....       MOV     ?V0 + 0,#SetRM_Temperature & 0xff
   \   0000DF   75....       MOV     ?V0 + 1,#(SetRM_Temperature >> 8) & 0xff
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   75..01       MOV     ?V0 + 0,#0x1
   \   0000EA   75..00       MOV     ?V0 + 1,#0x0
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   7C00         MOV     R4,#0x0
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A02         MOV     R2,#0x2
   \   0000F8   7B04         MOV     R3,#0x4
   \   0000FA   12....       LCALL   ??osal_nv_write?relay
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
     68                               EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess send 
   \   000102                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   000102   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   000105   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   7C04         MOV     R4,#0x4
   \   00010F   7D00         MOV     R5,#0x0
   \   000111   7A01         MOV     R2,#0x1
   \   000113   7B00         MOV     R3,#0x0
   \   000115   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   000118   7402         MOV     A,#0x2
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
     69                               //message
     70                           }
     71                           if(Real_Tem_Mod && POWER)//  room  temperature mode and Power on ,
   \                     ??EnddeviceApp_HandleAfIncomingMessage_13:
   \   00011D   90....       MOV     DPTR,#Real_Tem_Mod
   \   000120   E0           MOVX    A,@DPTR
   \   000121   7003         JNZ     $+5
   \   000123   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
   \   000126   90....       MOV     DPTR,#POWER
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   7003         JNZ     $+5
   \   00012C   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     72                            //  we need to diplay the temprerature immediately in LCD
     73                           {
     74                             HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
   \   00012F                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   00012F   7A01         MOV     R2,#0x1
   \   000131   90....       MOV     DPTR,#SetRM_Temperature
     75                           }
     76                   
     77                       }
   \                     ??EnddeviceApp_HandleAfIncomingMessage_14:
   \   000134   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000137   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     78                    break;
     79                  case CMD_SET_FLOOR_TEMPER:// only when powered on,than we can set the temperature
     80                       if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_5:
   \   00013A   7401         MOV     A,#0x1
   \   00013C   6C           XRL     A,R4
   \   00013D   6003         JZ      $+5
   \   00013F   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     81                       {
     82                          //if(POWER)
     83                       //   {
     84                            SetFL_Temperature = str[3];
   \   000142   8882         MOV     DPL,R0
   \   000144   8983         MOV     DPH,R1
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   90....       MOV     DPTR,#SetFL_Temperature
   \   00014D   12....       LCALL   ?Subroutine1 & 0xFFFF
     85                            MsgBuf[0] = 1;
     86                            MsgBuf[1] = MyDeviceId;
     87                            MsgBuf[2] = CMD_SET_FLOOR_TEMPER;
   \                     ??CrossCallReturnLabel_9:
   \   000150   7402         MOV     A,#0x2
   \   000152   F0           MOVX    @DPTR,A
     88                            MsgBuf[3] = SetFL_Temperature;
   \   000153   90....       MOV     DPTR,#SetFL_Temperature
   \   000156   12....       LCALL   ?Subroutine3 & 0xFFFF
     89                           if(osal_nv_item_init(SET_FL_TEMP_NV,1,NULL) == SUCCESS)
   \                     ??CrossCallReturnLabel_4:
   \   000159   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015C   7C01         MOV     R4,#0x1
   \   00015E   7D00         MOV     R5,#0x0
   \   000160   7A03         MOV     R2,#0x3
   \   000162   7B04         MOV     R3,#0x4
   \   000164   12....       LCALL   ??osal_nv_item_init?relay
   \   000167   7402         MOV     A,#0x2
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   E9           MOV     A,R1
   \   00016D   7041         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_15
     90                           {
     91                               osal_nv_write(SET_FL_TEMP_NV,0,1,&SetFL_Temperature);// load the item to the NV
   \   00016F                ; Setup parameters for call to function osal_nv_write
   \   00016F   75....       MOV     ?V0 + 0,#SetFL_Temperature & 0xff
   \   000172   75....       MOV     ?V0 + 1,#(SetFL_Temperature >> 8) & 0xff
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   75..01       MOV     ?V0 + 0,#0x1
   \   00017D   75..00       MOV     ?V0 + 1,#0x0
   \   000180   78..         MOV     R0,#?V0 + 0
   \   000182   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000185   7C00         MOV     R4,#0x0
   \   000187   7D00         MOV     R5,#0x0
   \   000189   7A03         MOV     R2,#0x3
   \   00018B   7B04         MOV     R3,#0x4
   \   00018D   12....       LCALL   ??osal_nv_write?relay
   \   000190   7404         MOV     A,#0x4
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
     92                               EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess and
   \   000195                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   000195   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   000198   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   00019B   78..         MOV     R0,#?V0 + 0
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   7C04         MOV     R4,#0x4
   \   0001A2   7D00         MOV     R5,#0x0
   \   0001A4   7A01         MOV     R2,#0x1
   \   0001A6   7B00         MOV     R3,#0x0
   \   0001A8   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   0001AB   7402         MOV     A,#0x2
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
     93                                //send  message   
     94                           }
     95                            if(!Real_Tem_Mod && POWER)//  floor  temperature mode
   \                     ??EnddeviceApp_HandleAfIncomingMessage_15:
   \   0001B0   90....       MOV     DPTR,#Real_Tem_Mod
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   6003         JZ      $+5
   \   0001B6   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
   \   0001B9   90....       MOV     DPTR,#POWER
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   7003         JNZ     $+5
   \   0001BF   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
     96                            {
     97                             HalLcdWriteSetTemperature(SetFL_Temperature,TRUE);
   \   0001C2                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   0001C2   7A01         MOV     R2,#0x1
   \   0001C4   90....       MOV     DPTR,#SetFL_Temperature
   \   0001C7   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_14 & 0xFFFF
     98                            }
     99                         // }
    100                         // else
    101                         // {
    102                         //   ;
    103                         // }
    104                       }
    105                    break;
    106                  case CMD_ROOM_REAL_TEMPER:
    107                    break;
    108                  case CMD_FLOOR_REAL_TEMPER:
    109                    break; 
    110                  case CMD_RELAY_STATE:
    111                    break;
    112                  case CMD_SET_RELAY_STATE:
    113                        if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_6:
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   6C           XRL     A,R4
   \   0001CD   6003         JZ      $+5
   \   0001CF   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    114                        {
    115                          if(POWER && (!End_Mod))// only when powered on and the manual mod 
   \   0001D2   90....       MOV     DPTR,#POWER
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   7003         JNZ     $+5
   \   0001D8   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
   \   0001DB   90....       MOV     DPTR,#End_Mod
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   6003         JZ      $+5
   \   0001E1   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    116                            //than we can set the Relay   
    117                          {
    118                            REL_CTL = str[3] & 0x01;
   \   0001E4   8882         MOV     DPL,R0
   \   0001E6   8983         MOV     DPH,R1
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001EE   9292         MOV     0x90.2,C
   \   0001F0   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    119                          }
    120                        }
    121                    break;
    122                  case CMD_SET_SLEEP_MODE:
    123                    break;
    124                  case CMD_SET_START_CLOCK:
    125                    break; 
    126                  case CMD_SET_CLOSE_CLOCK:
    127                    break;
    128                  case CMD_SET_NEW_DEVICEID:
    129                    if(len == 1)
    130                    {
    131                      if(!POWER)// only when powered off,that we can change the ID
    132                      {
    133                        //MyDeviceId = debugnum = str[3];
    134                        //if(osal_nv_item_init(MY_DEVICEID_NV,1,NULL) == SUCCESS)
    135                        //{
    136                         //  osal_nv_write(MY_DEVICEID_NV,0,1,&MyDeviceId);
    137                        //}
    138                      }
    139                    }
    140                    break;
    141                  case CMD_SET_PRIORITY:
    142                    break;
    143                  case CMD_SET_MODE:
    144                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_7:
   \   0001F3   7401         MOV     A,#0x1
   \   0001F5   6C           XRL     A,R4
   \   0001F6   6003         JZ      $+5
   \   0001F8   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    145                    {
    146                      if(POWER)// only when powered on,than we can set the Mode
   \   0001FB   90....       MOV     DPTR,#POWER
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   7003         JNZ     $+5
   \   000201   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    147                      {
    148                        End_Mod = str[3];
   \   000204   8882         MOV     DPL,R0
   \   000206   8983         MOV     DPH,R1
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   90....       MOV     DPTR,#End_Mod
   \   00020F   F0           MOVX    @DPTR,A
    149                        REL_CTL = 0;
   \   000210   C292         CLR     0x90.2
    150                        HalLcdWriteEndMod(End_Mod);// update the mode in LCD
   \   000212                ; Setup parameters for call to function HalLcdWriteEndMod
   \   000212   F9           MOV     R1,A
   \   000213   12....       LCALL   ??HalLcdWriteEndMod?relay
    151                        
    152                        // send mode to the coordinator
    153                        MsgBuf[0] = 1;
   \   000216   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    154          	          MsgBuf[1] = MyDeviceId;
    155          	          MsgBuf[2] = CMD_SET_MODE;
   \                     ??CrossCallReturnLabel_10:
   \   000219   740C         MOV     A,#0xc
   \   00021B   F0           MOVX    @DPTR,A
    156          	          MsgBuf[3] = End_Mod;
   \   00021C   90....       MOV     DPTR,#End_Mod
   \   00021F   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_16 & 0xFFFF
    157          	          EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
    158                      }
    159                    }
    160                    break; 
    161                  case CMD_SEND_TOKEN:
    162                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_8:
   \   000222   7401         MOV     A,#0x1
   \   000224   6C           XRL     A,R4
   \   000225   6003         JZ      $+5
   \   000227   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    163                    TOKEN = TRUE;
   \   00022A   90....       MOV     DPTR,#TOKEN
   \                     ??EnddeviceApp_HandleAfIncomingMessage_17:
   \   00022D   7401         MOV     A,#0x1
   \                     ??EnddeviceApp_HandleAfIncomingMessage_18:
   \   00022F   F0           MOVX    @DPTR,A
   \   000230   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    164                    break;
    165                  case CMD_TAKEN_TOKEN:
    166                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_9:
   \   000233   7401         MOV     A,#0x1
   \   000235   6C           XRL     A,R4
   \   000236   6003         JZ      $+5
   \   000238   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    167                    TOKEN = FALSE;
   \   00023B   90....       MOV     DPTR,#TOKEN
   \   00023E   E4           CLR     A
   \   00023F   80EE         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_18
    168                    break;
    169                  case CMD_GET_RSSI:
    170                    if(len == 0)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_10:
   \   000241   EC           MOV     A,R4
   \   000242   6003         JZ      $+5
   \   000244   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    171                      rssi = pkt->rssi;
   \   000247   EA           MOV     A,R2
   \   000248   2418         ADD     A,#0x18
   \   00024A   F582         MOV     DPL,A
   \   00024C   EB           MOV     A,R3
   \   00024D   3400         ADDC    A,#0x0
   \   00024F   F583         MOV     DPH,A
   \   000251   E0           MOVX    A,@DPTR
   \   000252   90....       MOV     DPTR,#rssi
   \   000255   80D8         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_18
    172                    break;
    173                  case CMD_ACK:
    174                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_11:
   \   000257   7401         MOV     A,#0x1
   \   000259   6C           XRL     A,R4
   \   00025A   6003         JZ      $+5
   \   00025C   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
    175                    End_Ack = TRUE;
   \   00025F   90....       MOV     DPTR,#End_Ack
   \   000262   80C9         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_17
    176                    break;
    177                  case CMD_START_OR_SHUTDOWN:
    178                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_12:
   \   000264   7401         MOV     A,#0x1
   \   000266   6C           XRL     A,R4
   \   000267   707C         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_2
    179                    {
    180                      POWER = str[3] & 0x01;
   \   000269   8882         MOV     DPL,R0
   \   00026B   8983         MOV     DPH,R1
   \   00026D   A3           INC     DPTR
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   E0           MOVX    A,@DPTR
   \   000271   A2E0         MOV     C,0xE0 /* A   */.0
   \   000273   E4           CLR     A
   \   000274   33           RLC     A
   \   000275   90....       MOV     DPTR,#POWER
   \   000278   F0           MOVX    @DPTR,A
    181                        if(POWER) // power on
   \   000279   A2E0         MOV     C,0xE0 /* A   */.0
   \   00027B   C292         CLR     0x90.2
   \   00027D   90....       MOV     DPTR,#Real_Tem_Mod
   \   000280   7401         MOV     A,#0x1
   \   000282   F0           MOVX    @DPTR,A
   \   000283   7900         MOV     R1,#0x0
   \   000285   5019         JNC     ??EnddeviceApp_HandleAfIncomingMessage_19
    182                        {
    183                          REL_CTL = 0;
   \   000287   12....       LCALL   ??HalLcdWritePower?relay
    184                          Real_Tem_Mod = TRUE;
    185                          
    186                          HalLcdWritePower(FALSE);  // clear the power picture for the ST
    187                           
    188                          HalLcd_HW_WriteST(TRUE);
   \   00028A                ; Setup parameters for call to function HalLcd_HW_WriteST
   \   00028A   7901         MOV     R1,#0x1
   \   00028C   12....       LCALL   ??HalLcd_HW_WriteST?relay
    189                          HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
   \   00028F                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   00028F   7A01         MOV     R2,#0x1
   \   000291   12....       LCALL   ?Subroutine4 & 0xFFFF
    190                          HalLcd_HW_WriteSTU(TRUE); 
   \                     ??CrossCallReturnLabel_5:
   \   000294                ; Setup parameters for call to function HalLcd_HW_WriteSTU
   \   000294   7901         MOV     R1,#0x1
   \   000296   12....       LCALL   ??HalLcd_HW_WriteSTU?relay
    191                 
    192                          HalLcdWriteEndMod(End_Mod);
   \   000299                ; Setup parameters for call to function HalLcdWriteEndMod
   \   000299   90....       MOV     DPTR,#End_Mod
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   F9           MOV     R1,A
   \   00029E   8014         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_20
    193                          HalLcdWriteRealTempeMod(TRUE);
    194                        }
    195                        else//power off
    196                        {
    197                          REL_CTL = 0;
   \                     ??EnddeviceApp_HandleAfIncomingMessage_19:
   \   0002A0   12....       LCALL   ??HalLcd_HW_WriteST?relay
    198                          Real_Tem_Mod = TRUE;
    199                          HalLcd_HW_WriteST(FALSE);
    200                          HalLcdWriteSetTemperature(SetRM_Temperature,FALSE);
   \   0002A3                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   0002A3   7A00         MOV     R2,#0x0
   \   0002A5   12....       LCALL   ?Subroutine4 & 0xFFFF
    201                          HalLcd_HW_WriteSTU(FALSE);// clear the ST for the power picture
   \                     ??CrossCallReturnLabel_6:
   \   0002A8                ; Setup parameters for call to function HalLcd_HW_WriteSTU
   \   0002A8   7900         MOV     R1,#0x0
   \   0002AA   12....       LCALL   ??HalLcd_HW_WriteSTU?relay
    202                          
    203                          HalLcdWritePower(TRUE);  // write the power picture
   \   0002AD                ; Setup parameters for call to function HalLcdWritePower
   \   0002AD   7901         MOV     R1,#0x1
   \   0002AF   12....       LCALL   ??HalLcdWritePower?relay
    204                          
    205                          HalLcdWriteEndMod(FALSE);	
   \   0002B2                ; Setup parameters for call to function HalLcdWriteEndMod
   \   0002B2   7900         MOV     R1,#0x0
   \                     ??EnddeviceApp_HandleAfIncomingMessage_20:
   \   0002B4   12....       LCALL   ??HalLcdWriteEndMod?relay
    206                          HalLcdWriteRealTempeMod(TRUE);
   \   0002B7                ; Setup parameters for call to function HalLcdWriteRealTempeMod
   \   0002B7   7901         MOV     R1,#0x1
   \   0002B9   12....       LCALL   ??HalLcdWriteRealTempeMod?relay
    207                       }
    208                       // send the power state to the coordinator
    209                      MsgBuf[0] = 1;
   \   0002BC   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    210                      MsgBuf[1] = MyDeviceId;
    211                      MsgBuf[2] = CMD_START_OR_SHUTDOWN;
   \                     ??CrossCallReturnLabel_11:
   \   0002BF   74FF         MOV     A,#-0x1
   \   0002C1   F0           MOVX    @DPTR,A
    212                      MsgBuf[3] = POWER;
   \   0002C2   90....       MOV     DPTR,#POWER
   \                     ??EnddeviceApp_HandleAfIncomingMessage_16:
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   90....       MOV     DPTR,#MsgBuf + 3
   \   0002C9   F0           MOVX    @DPTR,A
    213                      EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
   \   0002CA                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   0002CA   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   0002CD   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   0002D0   78..         MOV     R0,#?V0 + 0
   \   0002D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D5   7C04         MOV     R4,#0x4
   \   0002D7   7D00         MOV     R5,#0x0
   \   0002D9   7A01         MOV     R2,#0x1
   \   0002DB   7B00         MOV     R3,#0x0
   \   0002DD   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   0002E0   7402         MOV     A,#0x2
   \   0002E2   12....       LCALL   ?DEALLOC_XSTACK8
    214                   
    215                   }
    216                    break;
    217                  default:
    218          	  break;
    219                 }
    220                 break;
    221               }
    222             default :
    223                break;
    224             }  
    225            }
    226            else // the message is not mine
    227            {
    228               ; 
    229            }
    230          }
   \                     ??EnddeviceApp_HandleAfIncomingMessage_2:
   \   0002E5   7F02         MOV     R7,#0x2
   \   0002E7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0002EA                REQUIRE _A_IEN0
   \   0002EA                REQUIRE WDCTL
   \   0002EA                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#SetRM_Temperature
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??HalLcdWriteSetTemperature?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   90....       MOV     DPTR,#MsgBuf + 3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   90....       MOV     DPTR,#MsgBuf
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#MyDeviceId
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   90....       MOV     DPTR,#MsgBuf + 1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET
    231          
    232          
    233          
    234          /*********************************************************************
    235           * @fn      EnddeviceApp_SendP2PMessage
    236           *
    237           * @brief   Send the PointToPoint message.
    238           *
    239           * @param   ClusterID,the clusterID of the message,
    240                      len,the length of the message,
    241                      str,the pointer of the message.
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void EnddeviceApp_SendP2PMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendP2PMessage:
    246          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    247            
    248            if(AF_DataRequest(&EnddeviceApp_P2PDstAddr,&EnddeviceApp_epDesc,
    249                              ClusterID,
    250                              len,
    251                              str,
    252                              &EnddeviceApp_TransID,
    253                              AF_DISCV_ROUTE,
    254                              AF_DEFAULT_RADIUS ) == afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_P2PDstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_P2PDstAddr >> 8) & 0xff
   \   00003C                REQUIRE ?Subroutine0
   \   00003C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
    255            {
    256              
    257            }
    258            else
    259            {
    260              
    261              
    262            } 
    263          }
   \   000008   7F04         MOV     R7,#0x4
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007   75..1E       MOV     ?V0 + 2,#0x1e
   \   00000A   78..         MOV     R0,#?V0 + 2
   \   00000C   22           RET
    264          
    265          
    266          /*********************************************************************
    267           * @fn      EnddeviceApp_SendGroupMessage
    268           *
    269           * @brief   Send the Group message .
    270           *
    271           * @param   ClusterID,the clusterID of the message,
    272                      len,the length of the message,
    273                      str,the pointer of the message.
    274           *
    275           * @return  none
    276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          void EnddeviceApp_SendGroupMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendGroupMessage:
    278          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    279            if ( AF_DataRequest( &EnddeviceApp_Group_DstAddr, &EnddeviceApp_epDesc,
    280                                 ClusterID,
    281                                 len,
    282                                 str,
    283                                 &EnddeviceApp_TransID,
    284                                 AF_DISCV_ROUTE,
    285                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_Group_DstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_Group_DstAddr >> 8) & 0xff
   \   00003C   80..         SJMP    ?Subroutine0
    286            {
    287            }
    288            else
    289            {
    290              // Error occurred in request to send.
    291            }
    292          }
    293          
    294          
    295          /*********************************************************************
    296           * @fn      EnddeviceApp_SendBroadcastMessage
    297           *
    298           * @brief   Send the Broadcast message.
    299           *
    300          * @param   ClusterID,the clusterID of the message,
    301                     len,the length of the message,
    302                     str,the pointer of the message.
    303           *
    304           * @return  none
    305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          void EnddeviceApp_SendBroadcastMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendBroadcastMessage:
    307          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    308            if ( AF_DataRequest( &EnddeviceApp_Broadcast_DstAddr, &EnddeviceApp_epDesc,
    309                                 ClusterID,
    310                                 len,
    311                                 str,//(uint8*)&EnddeviceAppPeriodicCounter,
    312                                 &EnddeviceApp_TransID,
    313                                 AF_DISCV_ROUTE,
    314                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_Broadcast_DstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_Broadcast_DstAddr >> 8) & 0xff
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_HandleAfIncomingMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_HandleAfIncomingMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendP2PMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendP2PMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendGroupMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendGroupMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendBroadcastMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendBroadcastMessage
    315            {
    316            }
    317            else
    318            {
    319              // Error occurred in request to send.
    320            }
    321          }
    322          
    323          
    324          
    325          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     EnddeviceApp_HandleAfIncomingMessage
                                        0      0     14
       -> NLME_UpdateNV                 0      0     20
       -> osal_nv_item_init             0      0     24
       -> osal_nv_write                 0      0     28
       -> EnddeviceApp_SendP2PMessage
                                        0      0     24
       -> HalLcdWriteSetTemperature     0      0     20
       -> osal_nv_item_init             0      0     24
       -> osal_nv_write                 0      0     28
       -> EnddeviceApp_SendP2PMessage
                                        0      0     24
       -> HalLcdWriteSetTemperature     0      0     20
       -> HalLcdWriteEndMod             0      0     20
       -> EnddeviceApp_SendP2PMessage
                                        0      0     24
       -> HalLcdWritePower              0      0     20
       -> HalLcd_HW_WriteST             0      0     20
       -> HalLcdWriteSetTemperature     0      0     20
       -> HalLcd_HW_WriteSTU            0      0     20
       -> HalLcdWriteEndMod             0      0     20
       -> HalLcdWriteRealTempeMod       0      0     20
       -> HalLcd_HW_WriteST             0      0     20
       -> HalLcdWriteSetTemperature     0      0     20
       -> HalLcd_HW_WriteSTU            0      0     20
       -> HalLcdWritePower              0      0     20
       -> HalLcdWriteEndMod             0      0     20
       -> HalLcdWriteRealTempeMod       0      0     20
       -> EnddeviceApp_SendP2PMessage
                                        0      0     24
     EnddeviceApp_SendBroadcastMessage
                                        0      0     23
       -> AF_DataRequest                0      0     42
     EnddeviceApp_SendGroupMessage      0      0     23
       -> AF_DataRequest                0      0     42
     EnddeviceApp_SendP2PMessage        0      0     33
       -> AF_DataRequest                0      0     42


   Segment part sizes:

     Function/Label                               Bytes
     --------------                               -----
     _A_P1                                           1
     _A_IEN0                                         1
     WDCTL                                           1
     EnddeviceApp_HandleAfIncomingMessage
                                                   746
     ?Subroutine4                                    3
     ??Subroutine5_0                                 6
     ?Subroutine3                                   13
     ?Subroutine1                                    1
     ??Subroutine6_0                                16
     EnddeviceApp_SendP2PMessage                    60
     ?Subroutine0                                   13
     ?Subroutine2                                   13
     EnddeviceApp_SendGroupMessage                  62
     EnddeviceApp_SendBroadcastMessage
                                                    63
     ??EnddeviceApp_HandleAfIncomingMessage?relay    6
     ??EnddeviceApp_SendP2PMessage?relay             6
     ??EnddeviceApp_SendGroupMessage?relay           6
     ??EnddeviceApp_SendBroadcastMessage?relay       6

 
 996 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
 
 1 020 bytes of CODE memory
     0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
