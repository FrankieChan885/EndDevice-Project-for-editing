###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         12/May/2015  17:47:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\Source\EnddeviceAF.c                         #
#    Command line       =  -f C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev #
#                          .cfg (-DCPU32MHZ -DROOT=__near_func                #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\ #
#                          zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\Too #
#                          ls\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\ #
#                          zstack\MyEnddevice\EndDevice\Source\EnddeviceAF.c  #
#                          -D NWK_AUTO_POLL -D NV_RESTORE=1 -D xZTOOL_P1 -D   #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\ -lA               #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\ --diag_suppress   #
#                          Pe001,Pa010 -o C:\Users\William\Desktop\±œ“µ…Ëº∆\S #
#                          RC\EndDevice-Project-for-editing\Projects\zstack\M #
#                          yEnddevice\EndDevice\CC2530DB\EndDeviceEB\Obj\ -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\ -I C:\Users\William\Desktop\±œ“ #
#                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z #
#                          stack\MyEnddevice\EndDevice\CC2530DB\..\Source\    #
#                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\..\..\..\ZMain\TI2530DB\ -I      #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\hal\inclu #
#                          de\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDe #
#                          vice-Project-for-editing\Projects\zstack\MyEnddevi #
#                          ce\EndDevice\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\target\CC2530EB\ -I C:\Users\William\Desktop\±œ“ #
#                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z #
#                          stack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mac\high_ #
#                          level\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En #
#                          dDevice-Project-for-editing\Projects\zstack\MyEndd #
#                          evice\EndDevice\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mac\low_l #
#                          evel\srf04\single_chip\ -I                         #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mt\ -I    #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\osal\incl #
#                          ude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndD #
#                          evice-Project-for-editing\Projects\zstack\MyEnddev #
#                          ice\EndDevice\CC2530DB\..\..\..\..\..\Components\s #
#                          ervices\saddr\ -I C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\EndDevice-Project-for-editing\Projects\zstac #
#                          k\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                        #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\stack\af\ #
#                           -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e-Project-for-editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\..\..\Components\stack #
#                          \nwk\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End #
#                          Device-Project-for-editing\Projects\zstack\MyEndde #
#                          vice\EndDevice\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\S #
#                          RC\EndDevice-Project-for-editing\Projects\zstack\M #
#                          yEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sec\ -I C:\Users\William\Desktop\±œ“µ… #
#                          Ëº∆\SRC\EndDevice-Project-for-editing\Projects\zst #
#                          ack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sys\ -I                           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\stack\zdo #
#                          \ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevi #
#                          ce-Project-for-editing\Projects\zstack\MyEnddevice #
#                          \EndDevice\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevi #
#                          ce-Project-for-editing\Projects\zstack\MyEnddevice #
#                          \EndDevice\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \f8w\ -Ohz                                         #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\EnddeviceAF.lst    #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\Obj\EnddeviceAF.r51     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\zstack\MyEnddevice\EndDevice\Source\EnddeviceAF.c
      1          #include "EnddeviceVariable.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
      2          #include "EnddeviceAF.h"
      3          
      4          
      5          
      6          /*********************************************************************
      7           * @fn      EnddeviceApp_HandleAfIncomingMessage
      8           *
      9           * @brief   Data message processor callback.  This function processes
     10           *          any incoming data - probably from other devices.  So, based
     11           *          on cluster ID, perform the intended action.
     12           *
     13           * @param   none
     14           *
     15           * @return  none
     16           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     17          void EnddeviceApp_HandleAfIncomingMessage( afIncomingMSGPacket_t *pkt )
   \                     EnddeviceApp_HandleAfIncomingMessage:
     18          {  
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     19            uint8 *str = pkt->cmd.Data;
   \   000009   EA           MOV     A,R2
   \   00000A   2422         ADD     A,#0x22
   \   00000C   F582         MOV     DPL,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FE           MOV     R6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
     20            uint8 len = str[FRAME_LEN];
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 2,A
     21            uint8 id = str[FRAME_ROOMID];
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 3,A
     22            uint8 command = str[FRAME_CMD];
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 4,A
     23            
     24           /*****************************for debug **************************/
     25             //  uint8  n = command /16;
     26             //  uint8  m = command % 16;
     27             // HalLcdWriteChar5x8(n,0,50,TRUE);
     28              // HalLcdWriteChar5x8(m,0,55,TRUE);
     29          /*****************************for debug **************************/
     30             
     31           
     32            // the PANID is changed ,reset the system regardless of id
     33            if((command == CMD_SET_PANID))// &&  //(pkt->clusterId == COORDINATOR_BROADCAST_CLUSTERID)) 
   \   00002C   7410         MOV     A,#0x10
   \   00002E   65..         XRL     A,?V0 + 4
   \   000030   702A         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
     34            {
     35               if(len == 1)
   \   000032   7401         MOV     A,#0x1
   \   000034   65..         XRL     A,?V0 + 2
   \   000036   7024         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
     36               {
     37                  _NIB.nwkPanId = str[FRAME_PARAH];
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   90....       MOV     DPTR,#_NIB + 33
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
     38          	    NLME_UpdateNV(0x01); 
   \   000047                ; Setup parameters for call to function NLME_UpdateNV
   \   000047   7901         MOV     R1,#0x1
   \   000049   12....       LCALL   ??NLME_UpdateNV?relay
     39          	    osal_start_timerEx(EnddeviceApp_TaskID,
     40                               EnddeviceApp_RESET_MSG_EVT ,
     41                              4000);   
   \   00004C                ; Setup parameters for call to function osal_start_timerEx
   \   00004C   7CA0         MOV     R4,#-0x60
   \   00004E   7D0F         MOV     R5,#0xf
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#EnddeviceApp_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_start_timerEx?relay
     42               }     
     43            }
     44            
     45            
     46            if(id == MyDeviceId)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_0:
   \   00005C   90....       MOV     DPTR,#MyDeviceId
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   65..         XRL     A,?V0 + 3
   \   000062   6003         JZ      $+5
   \   000064   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     47            {
     48              //HalLcdWriteDeviceID(pkt->clusterId,TRUE);// for test
     49              switch (pkt->clusterId)
   \   000067   85..82       MOV     DPL,?V0 + 0
   \   00006A   85..83       MOV     DPH,?V0 + 1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6402         XRL     A,#0x2
   \   000074   7002         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_2
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \                     ??EnddeviceApp_HandleAfIncomingMessage_2:
   \   000078   6003         JZ      $+5
   \   00007A   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     50              {
     51              case COORDINATOR_COMMAND_CLUSTERID:
     52               {
     53                 
     54                switch(command)
   \   00007D   E5..         MOV     A,?V0 + 4
   \   00007F   14           DEC     A
   \   000080   6036         JZ      ??EnddeviceApp_HandleAfIncomingMessage_3
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_4 & 0xFFFF
   \   000088   24FC         ADD     A,#-0x4
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_5 & 0xFFFF
   \   00008F   24FA         ADD     A,#-0x6
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_6 & 0xFFFF
   \   000096   14           DEC     A
   \   000097   7003         JNZ     $+5
   \   000099   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_7 & 0xFFFF
   \   00009C   14           DEC     A
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_8 & 0xFFFF
   \   0000A2   14           DEC     A
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_9 & 0xFFFF
   \   0000A8   2411         ADD     A,#0x11
   \   0000AA   7003         JNZ     $+5
   \   0000AC   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_10 & 0xFFFF
   \   0000AF   14           DEC     A
   \   0000B0   7003         JNZ     $+5
   \   0000B2   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_11 & 0xFFFF
   \   0000B5   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     55                {
     56                  case CMD_SET_ROOM_TEMPER:
     57                       if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_3:
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   65..         XRL     A,?V0 + 2
   \   0000BC   6003         JZ      $+5
   \   0000BE   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     58                       {
     59                        
     60                        // if(POWER)// only when powered on,than we can set the temperature
     61                        // {
     62                           SetRM_Temperature = str[FRAME_PARAH];
   \   0000C1   8E82         MOV     DPL,R6
   \   0000C3   8F83         MOV     DPH,R7
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   90....       MOV     DPTR,#SetRM_Temperature
   \   0000CC   12....       LCALL   ?Subroutine1 & 0xFFFF
     63                           MsgBuf[FRAME_LEN] = 1;
     64                           MsgBuf[FRAME_ROOMID] = MyDeviceId;
     65                           MsgBuf[FRAME_CMD] = CMD_SET_ROOM_TEMPER;
   \                     ??CrossCallReturnLabel_8:
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
     66                           MsgBuf[FRAME_PARAH] = SetRM_Temperature;
   \   0000D2   90....       MOV     DPTR,#SetRM_Temperature
   \   0000D5   12....       LCALL   ?Subroutine3 & 0xFFFF
     67                           
     68                           if(osal_nv_item_init(SET_RM_TEMP_NV,1,NULL) == SUCCESS)
   \                     ??CrossCallReturnLabel_3:
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   7C01         MOV     R4,#0x1
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7A02         MOV     R2,#0x2
   \   0000E1   7B04         MOV     R3,#0x4
   \   0000E3   12....       LCALL   ??osal_nv_item_init?relay
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   7041         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_12
     69                           {
     70                               osal_nv_write(SET_RM_TEMP_NV,0,1,&SetRM_Temperature);// load the item to the NV
   \   0000EE                ; Setup parameters for call to function osal_nv_write
   \   0000EE   75....       MOV     ?V0 + 0,#SetRM_Temperature & 0xff
   \   0000F1   75....       MOV     ?V0 + 1,#(SetRM_Temperature >> 8) & 0xff
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   75..01       MOV     ?V0 + 0,#0x1
   \   0000FC   75..00       MOV     ?V0 + 1,#0x0
   \   0000FF   78..         MOV     R0,#?V0 + 0
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   7C00         MOV     R4,#0x0
   \   000106   7D00         MOV     R5,#0x0
   \   000108   7A02         MOV     R2,#0x2
   \   00010A   7B04         MOV     R3,#0x4
   \   00010C   12....       LCALL   ??osal_nv_write?relay
   \   00010F   7404         MOV     A,#0x4
   \   000111   12....       LCALL   ?DEALLOC_XSTACK8
     71                               EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess send 
   \   000114                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   000114   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   000117   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   00011A   78..         MOV     R0,#?V0 + 0
   \   00011C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011F   7C04         MOV     R4,#0x4
   \   000121   7D00         MOV     R5,#0x0
   \   000123   7A01         MOV     R2,#0x1
   \   000125   7B00         MOV     R3,#0x0
   \   000127   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
     72                               //message
     73                           }
     74                           if(Real_Tem_Mod && POWER)//  room  temperature mode and Power on ,
   \                     ??EnddeviceApp_HandleAfIncomingMessage_12:
   \   00012F   90....       MOV     DPTR,#Real_Tem_Mod
   \   000132   E0           MOVX    A,@DPTR
   \   000133   7003         JNZ     $+5
   \   000135   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
   \   000138   90....       MOV     DPTR,#POWER
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   7003         JNZ     $+5
   \   00013E   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     75                            //  we need to diplay the temprerature immediately in LCD
     76                           {
     77                             HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
   \   000141                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   000141   7A01         MOV     R2,#0x1
   \   000143   90....       MOV     DPTR,#SetRM_Temperature
     78                           }
     79                   
     80                       }
   \                     ??EnddeviceApp_HandleAfIncomingMessage_13:
   \   000146   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000149   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     81                    break;
     82                  case CMD_SET_FLOOR_TEMPER:// only when powered on,than we can set the temperature
     83                       if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_4:
   \   00014C   7401         MOV     A,#0x1
   \   00014E   65..         XRL     A,?V0 + 2
   \   000150   6003         JZ      $+5
   \   000152   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     84                       {
     85                          //if(POWER)
     86                       //   {
     87                            SetFL_Temperature = str[FRAME_PARAH];
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   90....       MOV     DPTR,#SetFL_Temperature
   \   000160   12....       LCALL   ?Subroutine1 & 0xFFFF
     88                            MsgBuf[FRAME_LEN] = 1;
     89                            MsgBuf[FRAME_ROOMID] = MyDeviceId;
     90                            MsgBuf[FRAME_CMD] = CMD_SET_FLOOR_TEMPER;
   \                     ??CrossCallReturnLabel_9:
   \   000163   7402         MOV     A,#0x2
   \   000165   F0           MOVX    @DPTR,A
     91                            MsgBuf[FRAME_PARAH] = SetFL_Temperature;
   \   000166   90....       MOV     DPTR,#SetFL_Temperature
   \   000169   12....       LCALL   ?Subroutine3 & 0xFFFF
     92                           if(osal_nv_item_init(SET_FL_TEMP_NV,1,NULL) == SUCCESS)
   \                     ??CrossCallReturnLabel_4:
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   7C01         MOV     R4,#0x1
   \   000171   7D00         MOV     R5,#0x0
   \   000173   7A03         MOV     R2,#0x3
   \   000175   7B04         MOV     R3,#0x4
   \   000177   12....       LCALL   ??osal_nv_item_init?relay
   \   00017A   7402         MOV     A,#0x2
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017F   E9           MOV     A,R1
   \   000180   7041         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_14
     93                           {
     94                               osal_nv_write(SET_FL_TEMP_NV,0,1,&SetFL_Temperature);// load the item to the NV
   \   000182                ; Setup parameters for call to function osal_nv_write
   \   000182   75....       MOV     ?V0 + 0,#SetFL_Temperature & 0xff
   \   000185   75....       MOV     ?V0 + 1,#(SetFL_Temperature >> 8) & 0xff
   \   000188   78..         MOV     R0,#?V0 + 0
   \   00018A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018D   75..01       MOV     ?V0 + 0,#0x1
   \   000190   75..00       MOV     ?V0 + 1,#0x0
   \   000193   78..         MOV     R0,#?V0 + 0
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   7C00         MOV     R4,#0x0
   \   00019A   7D00         MOV     R5,#0x0
   \   00019C   7A03         MOV     R2,#0x3
   \   00019E   7B04         MOV     R3,#0x4
   \   0001A0   12....       LCALL   ??osal_nv_write?relay
   \   0001A3   7404         MOV     A,#0x4
   \   0001A5   12....       LCALL   ?DEALLOC_XSTACK8
     95                               EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess and
   \   0001A8                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   0001A8   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   0001AB   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   0001AE   78..         MOV     R0,#?V0 + 0
   \   0001B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B3   7C04         MOV     R4,#0x4
   \   0001B5   7D00         MOV     R5,#0x0
   \   0001B7   7A01         MOV     R2,#0x1
   \   0001B9   7B00         MOV     R3,#0x0
   \   0001BB   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   0001BE   7402         MOV     A,#0x2
   \   0001C0   12....       LCALL   ?DEALLOC_XSTACK8
     96                                //send  message   
     97                           }
     98                            if(!Real_Tem_Mod && POWER)//  floor  temperature mode
   \                     ??EnddeviceApp_HandleAfIncomingMessage_14:
   \   0001C3   90....       MOV     DPTR,#Real_Tem_Mod
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   6003         JZ      $+5
   \   0001C9   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
   \   0001CC   90....       MOV     DPTR,#POWER
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   7003         JNZ     $+5
   \   0001D2   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
     99                            {
    100                             HalLcdWriteSetTemperature(SetFL_Temperature,TRUE);
   \   0001D5                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   0001D5   7A01         MOV     R2,#0x1
   \   0001D7   90....       MOV     DPTR,#SetFL_Temperature
   \   0001DA   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_13 & 0xFFFF
    101                            }
    102                         // }
    103                         // else
    104                         // {
    105                         //   ;
    106                         // }
    107                       }
    108                    break;
    109                  case CMD_ROOM_REAL_TEMPER:
    110                    break;
    111                  case CMD_FLOOR_REAL_TEMPER:
    112                    break; 
    113                  case CMD_RELAY_STATE:
    114                    break;
    115                  case CMD_SET_RELAY_STATE:
    116                        if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_5:
   \   0001DD   7401         MOV     A,#0x1
   \   0001DF   65..         XRL     A,?V0 + 2
   \   0001E1   6003         JZ      $+5
   \   0001E3   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    117                        {
    118                          if(POWER && (!End_Mod))// only when powered on and the manual mod 
   \   0001E6   90....       MOV     DPTR,#POWER
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   7003         JNZ     $+5
   \   0001EC   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
   \   0001EF   90....       MOV     DPTR,#End_Mod
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   6003         JZ      $+5
   \   0001F5   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    119                            //than we can set the Relay   
    120                          {
    121                            REL_CTL = str[FRAME_PARAH] & 0x01;
   \   0001F8   8E82         MOV     DPL,R6
   \   0001FA   8F83         MOV     DPH,R7
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   A2E0         MOV     C,0xE0 /* A   */.0
   \   000202   9292         MOV     0x90.2,C
   \   000204   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    122                          }
    123                        }
    124                    break;
    125                  case CMD_SET_SLEEP_MODE:
    126                    break;
    127                  case CMD_SET_START_CLOCK:
    128                    break; 
    129                  case CMD_SET_CLOSE_CLOCK:
    130                    break;
    131                  case CMD_SET_NEW_DEVICEID:
    132                    if(len == 1)
    133                    {
    134                      if(!POWER)// only when powered off,that we can change the ID
    135                      {
    136                        //MyDeviceId = debugnum = str[3];
    137                        //if(osal_nv_item_init(MY_DEVICEID_NV,1,NULL) == SUCCESS)
    138                        //{
    139                         //  osal_nv_write(MY_DEVICEID_NV,0,1,&MyDeviceId);
    140                        //}
    141                      }
    142                    }
    143                    break;
    144                  case CMD_SET_PRIORITY:
    145                    break;
    146                  case CMD_SET_MODE:
    147                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_6:
   \   000207   7401         MOV     A,#0x1
   \   000209   65..         XRL     A,?V0 + 2
   \   00020B   6003         JZ      $+5
   \   00020D   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    148                    {
    149                      if(POWER)// only when powered on,than we can set the Mode
   \   000210   90....       MOV     DPTR,#POWER
   \   000213   E0           MOVX    A,@DPTR
   \   000214   7003         JNZ     $+5
   \   000216   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    150                      {
    151                        End_Mod = str[FRAME_PARAH];
   \   000219   8E82         MOV     DPL,R6
   \   00021B   8F83         MOV     DPH,R7
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   E0           MOVX    A,@DPTR
   \   000221   90....       MOV     DPTR,#End_Mod
   \   000224   F0           MOVX    @DPTR,A
    152                        REL_CTL = 0;
   \   000225   C292         CLR     0x90.2
    153                        HalLcdWriteEndMod(End_Mod);// update the mode in LCD
   \   000227                ; Setup parameters for call to function HalLcdWriteEndMod
   \   000227   F9           MOV     R1,A
   \   000228   12....       LCALL   ??HalLcdWriteEndMod?relay
    154                        
    155                        // send mode to the coordinator
    156                        MsgBuf[FRAME_LEN] = 1;
   \   00022B   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    157          	          MsgBuf[FRAME_ROOMID] = MyDeviceId;
    158          	          MsgBuf[FRAME_CMD] = CMD_SET_MODE;
   \                     ??CrossCallReturnLabel_10:
   \   00022E   740C         MOV     A,#0xc
   \   000230   F0           MOVX    @DPTR,A
    159          	          MsgBuf[FRAME_PARAH] = End_Mod;
   \   000231   90....       MOV     DPTR,#End_Mod
   \   000234   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_15 & 0xFFFF
    160          	          EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
    161                      }
    162                    }
    163                    break; 
    164                  case CMD_SEND_TOKEN:
    165                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_7:
   \   000237   7401         MOV     A,#0x1
   \   000239   65..         XRL     A,?V0 + 2
   \   00023B   6003         JZ      $+5
   \   00023D   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    166                    TOKEN = TRUE;
   \   000240   90....       MOV     DPTR,#TOKEN
   \                     ??EnddeviceApp_HandleAfIncomingMessage_16:
   \   000243   7401         MOV     A,#0x1
   \                     ??EnddeviceApp_HandleAfIncomingMessage_17:
   \   000245   F0           MOVX    @DPTR,A
   \   000246   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    167                    break;
    168                  case CMD_TAKEN_TOKEN:
    169                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_8:
   \   000249   7401         MOV     A,#0x1
   \   00024B   65..         XRL     A,?V0 + 2
   \   00024D   6003         JZ      $+5
   \   00024F   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    170                    TOKEN = FALSE;
   \   000252   90....       MOV     DPTR,#TOKEN
   \   000255   E4           CLR     A
   \   000256   80ED         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_17
    171                    break;
    172                  case CMD_GET_RSSI:
    173                    if(len == 0)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_9:
   \   000258   E5..         MOV     A,?V0 + 2
   \   00025A   6003         JZ      $+5
   \   00025C   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    174                      rssi = pkt->rssi;
   \   00025F   E5..         MOV     A,?V0 + 0
   \   000261   2418         ADD     A,#0x18
   \   000263   F582         MOV     DPL,A
   \   000265   E5..         MOV     A,?V0 + 1
   \   000267   3400         ADDC    A,#0x0
   \   000269   F583         MOV     DPH,A
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   90....       MOV     DPTR,#rssi
   \   00026F   80D4         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_17
    175                    break;
    176                  case CMD_ACK:
    177                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_10:
   \   000271   7401         MOV     A,#0x1
   \   000273   65..         XRL     A,?V0 + 2
   \   000275   6003         JZ      $+5
   \   000277   02....       LJMP    ??EnddeviceApp_HandleAfIncomingMessage_1 & 0xFFFF
    178                    End_Ack = TRUE;
   \   00027A   90....       MOV     DPTR,#End_Ack
   \   00027D   80C4         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_16
    179                    break;
    180                  case CMD_START_OR_SHUTDOWN:
    181                    if(len == 1)
   \                     ??EnddeviceApp_HandleAfIncomingMessage_11:
   \   00027F   7401         MOV     A,#0x1
   \   000281   65..         XRL     A,?V0 + 2
   \   000283   707C         JNZ     ??EnddeviceApp_HandleAfIncomingMessage_1
    182                    {
    183                      POWER = str[FRAME_PARAH] & 0x01;
   \   000285   8E82         MOV     DPL,R6
   \   000287   8F83         MOV     DPH,R7
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00028F   E4           CLR     A
   \   000290   33           RLC     A
   \   000291   90....       MOV     DPTR,#POWER
   \   000294   F0           MOVX    @DPTR,A
    184                        if(POWER) // power on
   \   000295   A2E0         MOV     C,0xE0 /* A   */.0
   \   000297   C292         CLR     0x90.2
   \   000299   90....       MOV     DPTR,#Real_Tem_Mod
   \   00029C   7401         MOV     A,#0x1
   \   00029E   F0           MOVX    @DPTR,A
   \   00029F   7900         MOV     R1,#0x0
   \   0002A1   5019         JNC     ??EnddeviceApp_HandleAfIncomingMessage_18
    185                        {
    186                          REL_CTL = 0;
   \   0002A3   12....       LCALL   ??HalLcdWritePower?relay
    187                          Real_Tem_Mod = TRUE;
    188                          
    189                          HalLcdWritePower(FALSE);  // clear the power picture for the ST
    190                           
    191                          HalLcd_HW_WriteST(TRUE);
   \   0002A6                ; Setup parameters for call to function HalLcd_HW_WriteST
   \   0002A6   7901         MOV     R1,#0x1
   \   0002A8   12....       LCALL   ??HalLcd_HW_WriteST?relay
    192                          HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
   \   0002AB                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   0002AB   7A01         MOV     R2,#0x1
   \   0002AD   12....       LCALL   ?Subroutine4 & 0xFFFF
    193                          HalLcd_HW_WriteSTU(TRUE); 
   \                     ??CrossCallReturnLabel_5:
   \   0002B0                ; Setup parameters for call to function HalLcd_HW_WriteSTU
   \   0002B0   7901         MOV     R1,#0x1
   \   0002B2   12....       LCALL   ??HalLcd_HW_WriteSTU?relay
    194                 
    195                          HalLcdWriteEndMod(End_Mod);
   \   0002B5                ; Setup parameters for call to function HalLcdWriteEndMod
   \   0002B5   90....       MOV     DPTR,#End_Mod
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   F9           MOV     R1,A
   \   0002BA   8014         SJMP    ??EnddeviceApp_HandleAfIncomingMessage_19
    196                          HalLcdWriteRealTempeMod(TRUE);
    197                        }
    198                        else//power off
    199                        {
    200                          REL_CTL = 0;
   \                     ??EnddeviceApp_HandleAfIncomingMessage_18:
   \   0002BC   12....       LCALL   ??HalLcd_HW_WriteST?relay
    201                          Real_Tem_Mod = TRUE;
    202                          HalLcd_HW_WriteST(FALSE);
    203                          HalLcdWriteSetTemperature(SetRM_Temperature,FALSE);
   \   0002BF                ; Setup parameters for call to function HalLcdWriteSetTemperature
   \   0002BF   7A00         MOV     R2,#0x0
   \   0002C1   12....       LCALL   ?Subroutine4 & 0xFFFF
    204                          HalLcd_HW_WriteSTU(FALSE);// clear the ST for the power picture
   \                     ??CrossCallReturnLabel_6:
   \   0002C4                ; Setup parameters for call to function HalLcd_HW_WriteSTU
   \   0002C4   7900         MOV     R1,#0x0
   \   0002C6   12....       LCALL   ??HalLcd_HW_WriteSTU?relay
    205                          
    206                          HalLcdWritePower(TRUE);  // write the power picture
   \   0002C9                ; Setup parameters for call to function HalLcdWritePower
   \   0002C9   7901         MOV     R1,#0x1
   \   0002CB   12....       LCALL   ??HalLcdWritePower?relay
    207                          
    208                          HalLcdWriteEndMod(FALSE);	
   \   0002CE                ; Setup parameters for call to function HalLcdWriteEndMod
   \   0002CE   7900         MOV     R1,#0x0
   \                     ??EnddeviceApp_HandleAfIncomingMessage_19:
   \   0002D0   12....       LCALL   ??HalLcdWriteEndMod?relay
    209                          HalLcdWriteRealTempeMod(TRUE);
   \   0002D3                ; Setup parameters for call to function HalLcdWriteRealTempeMod
   \   0002D3   7901         MOV     R1,#0x1
   \   0002D5   12....       LCALL   ??HalLcdWriteRealTempeMod?relay
    210                       }
    211                       // send the power state to the coordinator
    212                      MsgBuf[FRAME_LEN] = 1;
   \   0002D8   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    213                      MsgBuf[FRAME_ROOMID] = MyDeviceId;
    214                      MsgBuf[FRAME_CMD] = CMD_START_OR_SHUTDOWN;
   \                     ??CrossCallReturnLabel_11:
   \   0002DB   74FF         MOV     A,#-0x1
   \   0002DD   F0           MOVX    @DPTR,A
    215                      MsgBuf[FRAME_PARAH] = POWER;
   \   0002DE   90....       MOV     DPTR,#POWER
   \                     ??EnddeviceApp_HandleAfIncomingMessage_15:
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   90....       MOV     DPTR,#MsgBuf + 3
   \   0002E5   F0           MOVX    @DPTR,A
    216                      EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
   \   0002E6                ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
   \   0002E6   75....       MOV     ?V0 + 0,#MsgBuf & 0xff
   \   0002E9   75....       MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
   \   0002EC   78..         MOV     R0,#?V0 + 0
   \   0002EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F1   7C04         MOV     R4,#0x4
   \   0002F3   7D00         MOV     R5,#0x0
   \   0002F5   7A01         MOV     R2,#0x1
   \   0002F7   7B00         MOV     R3,#0x0
   \   0002F9   12....       LCALL   ??EnddeviceApp_SendP2PMessage?relay
   \   0002FC   7402         MOV     A,#0x2
   \   0002FE   12....       LCALL   ?DEALLOC_XSTACK8
    217                   
    218                   }
    219                    break;
    220                  default:
    221          	  break;
    222                 }
    223                 break;
    224               }
    225             default :
    226                break;
    227             }  
    228            }
    229            else // the message is not mine
    230            {
    231               ; 
    232            }
    233          }
   \                     ??EnddeviceApp_HandleAfIncomingMessage_1:
   \   000301   7F05         MOV     R7,#0x5
   \   000303   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000306                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#SetRM_Temperature
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??HalLcdWriteSetTemperature?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   90....       MOV     DPTR,#MsgBuf + 3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   90....       MOV     DPTR,#MsgBuf
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#MyDeviceId
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   90....       MOV     DPTR,#MsgBuf + 1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET
    234          
    235          
    236          
    237          /*********************************************************************
    238           * @fn      EnddeviceApp_SendP2PMessage
    239           *
    240           * @brief   Send the PointToPoint message.
    241           *
    242           * @param   ClusterID,the clusterID of the message,
    243                      len,the length of the message,
    244                      str,the pointer of the message.
    245           *
    246           * @return  none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          void EnddeviceApp_SendP2PMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendP2PMessage:
    249          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    250            
    251            if(AF_DataRequest(&EnddeviceApp_P2PDstAddr,&EnddeviceApp_epDesc,
    252                              ClusterID,
    253                              len,
    254                              str,
    255                              &EnddeviceApp_TransID,
    256                              AF_DISCV_ROUTE,
    257                              AF_DEFAULT_RADIUS ) == afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_P2PDstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_P2PDstAddr >> 8) & 0xff
   \   00003C                REQUIRE ?Subroutine0
   \   00003C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
    258            {
    259              
    260            }
    261            else
    262            {
    263              
    264              
    265            } 
    266          }
   \   000008   7F04         MOV     R7,#0x4
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007                ; Setup parameters for call to function AF_DataRequest
   \   000007   75..1E       MOV     ?V0 + 2,#0x1e
   \   00000A   78..         MOV     R0,#?V0 + 2
   \   00000C   22           RET
    267          
    268          
    269          /*********************************************************************
    270           * @fn      EnddeviceApp_SendGroupMessage
    271           *
    272           * @brief   Send the Group message .
    273           *
    274           * @param   ClusterID,the clusterID of the message,
    275                      len,the length of the message,
    276                      str,the pointer of the message.
    277           *
    278           * @return  none
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          void EnddeviceApp_SendGroupMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendGroupMessage:
    281          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    282            if ( AF_DataRequest( &EnddeviceApp_Group_DstAddr, &EnddeviceApp_epDesc,
    283                                 ClusterID,
    284                                 len,
    285                                 str,
    286                                 &EnddeviceApp_TransID,
    287                                 AF_DISCV_ROUTE,
    288                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_Group_DstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_Group_DstAddr >> 8) & 0xff
   \   00003C   80..         SJMP    ?Subroutine0
    289            {
    290            }
    291            else
    292            {
    293              // Error occurred in request to send.
    294            }
    295          }
    296          
    297          
    298          /*********************************************************************
    299           * @fn      EnddeviceApp_SendBroadcastMessage
    300           *
    301           * @brief   Send the Broadcast message.
    302           *
    303          * @param   ClusterID,the clusterID of the message,
    304                     len,the length of the message,
    305                     str,the pointer of the message.
    306           *
    307           * @return  none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void EnddeviceApp_SendBroadcastMessage(uint16 ClusterID,uint16 len,uint8 * str)
   \                     EnddeviceApp_SendBroadcastMessage:
    310          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    311            if ( AF_DataRequest( &EnddeviceApp_Broadcast_DstAddr, &EnddeviceApp_epDesc,
    312                                 ClusterID,
    313                                 len,
    314                                 str,//(uint8*)&EnddeviceAppPeriodicCounter,
    315                                 &EnddeviceApp_TransID,
    316                                 AF_DISCV_ROUTE,
    317                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   8C..         MOV     ?V0 + 0,R4
   \   000022   8D..         MOV     ?V0 + 1,R5
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7920         MOV     R1,#0x20
   \   000034   7C..         MOV     R4,#EnddeviceApp_epDesc & 0xff
   \   000036   7D..         MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
   \   000038   7A..         MOV     R2,#EnddeviceApp_Broadcast_DstAddr & 0xff
   \   00003A   7B..         MOV     R3,#(EnddeviceApp_Broadcast_DstAddr >> 8) & 0xff
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_HandleAfIncomingMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_HandleAfIncomingMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendP2PMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendP2PMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendGroupMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendGroupMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EnddeviceApp_SendBroadcastMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EnddeviceApp_SendBroadcastMessage
    318            {
    319            }
    320            else
    321            {
    322              // Error occurred in request to send.
    323            }
    324          }
    325          
    326          
    327          
    328          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     EnddeviceApp_HandleAfIncomingMessage
                                        0      0     17
       -> NLME_UpdateNV                 0      0     26
       -> osal_start_timerEx            0      0     26
       -> osal_nv_item_init             0      0     30
       -> osal_nv_write                 0      0     34
       -> EnddeviceApp_SendP2PMessage
                                        0      0     30
       -> HalLcdWriteSetTemperature     0      0     26
       -> osal_nv_item_init             0      0     30
       -> osal_nv_write                 0      0     34
       -> EnddeviceApp_SendP2PMessage
                                        0      0     30
       -> HalLcdWriteSetTemperature     0      0     26
       -> HalLcdWriteEndMod             0      0     26
       -> EnddeviceApp_SendP2PMessage
                                        0      0     30
       -> HalLcdWritePower              0      0     26
       -> HalLcd_HW_WriteST             0      0     26
       -> HalLcdWriteSetTemperature     0      0     26
       -> HalLcd_HW_WriteSTU            0      0     26
       -> HalLcdWriteEndMod             0      0     26
       -> HalLcdWriteRealTempeMod       0      0     26
       -> HalLcd_HW_WriteST             0      0     26
       -> HalLcdWriteSetTemperature     0      0     26
       -> HalLcd_HW_WriteSTU            0      0     26
       -> HalLcdWritePower              0      0     26
       -> HalLcdWriteEndMod             0      0     26
       -> HalLcdWriteRealTempeMod       0      0     26
       -> EnddeviceApp_SendP2PMessage
                                        0      0     30
     EnddeviceApp_SendBroadcastMessage
                                        0      0     23
       -> AF_DataRequest                0      0     42
     EnddeviceApp_SendGroupMessage      0      0     23
       -> AF_DataRequest                0      0     42
     EnddeviceApp_SendP2PMessage        0      0     36
       -> AF_DataRequest                0      0     42


   Segment part sizes:

     Function/Label                               Bytes
     --------------                               -----
     _A_P1                                           1
     EnddeviceApp_HandleAfIncomingMessage
                                                   774
     ?Subroutine4                                    3
     ??Subroutine5_0                                 6
     ?Subroutine3                                   13
     ?Subroutine1                                    1
     ??Subroutine6_0                                16
     EnddeviceApp_SendP2PMessage                    60
     ?Subroutine0                                   13
     ?Subroutine2                                   13
     EnddeviceApp_SendGroupMessage                  62
     EnddeviceApp_SendBroadcastMessage
                                                    63
     ??EnddeviceApp_HandleAfIncomingMessage?relay    6
     ??EnddeviceApp_SendP2PMessage?relay             6
     ??EnddeviceApp_SendGroupMessage?relay           6
     ??EnddeviceApp_SendBroadcastMessage?relay       6

 
 1 024 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
 
 1 048 bytes of CODE memory
     0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
