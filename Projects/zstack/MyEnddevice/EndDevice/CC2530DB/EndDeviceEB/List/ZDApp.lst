###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         20/Apr/2015  19:31:54 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Components\stack\zdo\ZDApp.c   #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde #
#                          v.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"        #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\EndDevice Project for                  #
#                          editing\Components\stack\zdo\ZDApp.c" -D           #
#                          NWK_AUTO_POLL -D NV_RESTORE=1 -D xZTOOL_P1 -D      #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\" -lA            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\"                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\" -e              #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\" -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\EndDevice Project for                 #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\Source\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\EndDevice Project for                     #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\ZMain\TI2530DB\" -I                  #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\hal\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\hal\target\CC2530EB\" -I                         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\inc #
#                          lude\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\high_level\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice Project for                   #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDe #
#                          vice Project for editing\Projects\zstack\MyEnddevi #
#                          ce\EndDevice\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\single_chip\" -I                 #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\mt\"    #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e Project for editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\..\..\Components\osal\ #
#                          include\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\saddr\" -I                           #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\service #
#                          s\sdata\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\EndDevice Project for editing\Projects\zstack\My #
#                          Enddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\af\" -I "C:\Users\William\Desktop\±œ“µ… #
#                          Ëº∆\SRC\EndDevice Project for                      #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\nwk\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          api\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En #
#                          dDevice Project for editing\Projects\zstack\MyEndd #
#                          evice\EndDevice\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sec\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆ #
#                          \SRC\EndDevice Project for                         #
#                          editing\Projects\zstack\MyEnddevice\EndDevice\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sys\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice   #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\z #
#                          do\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End #
#                          Device Project for editing\Projects\zstack\MyEndde #
#                          vice\EndDevice\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E #
#                          ndDevice Project for editing\Projects\zstack\MyEnd #
#                          device\EndDevice\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\f8w\" -Ohz                                  #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\List\ZDApp.lst        #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice    #
#                          Project for editing\Projects\zstack\MyEnddevice\En #
#                          dDevice\CC2530DB\EndDeviceEB\Obj\ZDApp.r51         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice Project for editing\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
      4            Revision:       $Revision: 29348 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_lcd.h"
     71          #include "hal_key.h"
     72          
     73          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     74            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     75          #endif
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          
     81          #if !defined( NWK_START_DELAY )
     82            #define NWK_START_DELAY             100   // in milliseconds
     83          #endif
     84          
     85          #if !defined( LEAVE_RESET_DELAY )
     86            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     87          #endif
     88          
     89          // Init ZDO, but hold and wait for application to start the joining or
     90          // forming network
     91          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     92          
     93          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     94            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     95          #endif
     96          
     97          #if !defined( BEACON_REQUEST_DELAY )
     98            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     99          #endif
    100          
    101          #if !defined( BEACON_REQ_DELAY_MASK )
    102            #define BEACON_REQ_DELAY_MASK       0x007F
    103          #endif
    104          
    105          #define MAX_RESUME_RETRY            3
    106          
    107          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    108          
    109          // Beacon Order Settings (see NLMEDE.h)
    110          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    111          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    112          
    113          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    114            // The number of times the frame counter can change before
    115            // saving to NV
    116            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    117          #endif
    118          
    119          // Leave control bits
    120          #define ZDAPP_LEAVE_CTRL_INIT 0
    121          #define ZDAPP_LEAVE_CTRL_SET  1
    122          #define ZDAPP_LEAVE_CTRL_RA   2
    123          
    124          // Address Manager Stub Implementation
    125          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    126          
    127          
    128          #if !defined ZDO_NV_SAVE_RFDs
    129          #define ZDO_NV_SAVE_RFDs  TRUE
    130          #endif
    131          
    132          // Delay time before updating NWK NV data to force fewer writes during high activity.
    133          #if ZDO_NV_SAVE_RFDs
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    135          #else
    136          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    137          #endif
    138          
    139          /*********************************************************************
    140           * GLOBAL VARIABLES
    141           */
    142          
    143          #if defined( LCD_SUPPORTED )
    144            uint8 MatchRsps = 0;
    145          #endif
    146          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          
    162          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 14
   \   00000E                REQUIRE __INIT_XDATA_Z
    166          
    167          /*********************************************************************
    168           * EXTERNAL VARIABLES
    169           */
    170          
    171          /*********************************************************************
    172           * EXTERNAL FUNCTIONS
    173           */
    174          
    175          /*********************************************************************
    176           * LOCAL FUNCTIONS
    177           */
    178          
    179          void ZDApp_NetworkStartEvt( void );
    180          void ZDApp_DeviceAuthEvt( void );
    181          void ZDApp_SaveNetworkStateEvt( void );
    182          
    183          uint8 ZDApp_ReadNetworkRestoreState( void );
    184          uint8 ZDApp_RestoreNetworkState( void );
    185          void ZDAppDetermineDeviceType( void );
    186          void ZDApp_InitUserDesc( void );
    187          void ZDAppCheckForHoldKey( void );
    188          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    189          void ZDApp_ProcessNetworkJoin( void );
    190          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    191          uint8 ZDApp_RestoreNwkKey( void );
    192          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    193          
    194          void ZDApp_SecInit( uint8 state );
    195          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    196          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    197          
    198          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    199          
    200          void ZDApp_ResetTimerStart( uint16 delay );
    201          void ZDApp_ResetTimerCancel( void );
    202          void ZDApp_LeaveCtrlInit( void );
    203          void ZDApp_LeaveCtrlSet( uint8 ra );
    204          uint8 ZDApp_LeaveCtrlBypass( void );
    205          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    206          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    207                                  uint8 removeChildren );
    208          void ZDApp_NodeProfileSync( uint8 stackProfile );
    209          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    210          void ZDApp_RegisterCBs( void );
    211          void ZDApp_InitZdoCBFunc(void);
    212          
    213          /*********************************************************************
    214           * LOCAL VARIABLES
    215           */
    216          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221          
    222          #if defined( HOLD_AUTO_START )
    223            devStates_t devState = DEV_HOLD;
    224          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    225            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    226          #endif
    227          
    228          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    229            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    230            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    231                                  // to parent. Set to make the device do an Orphan scan.
    232          #else
    233            // Set the default to coodinator
    234            devStartModes_t devStartMode = MODE_HARD;
    235          #endif
    236          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    238          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    239          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    240          {
    241            ZDO_EP,
    242            &ZDAppTaskID,
    243            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    244            (afNetworkLatencyReq_t)0            // No Network Latency req
    245          };
    246          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    247          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    248          
    249          /*********************************************************************
    250           * @fn      ZDApp_Init
    251           *
    252           * @brief   ZDApp Initialization function.
    253           *
    254           * @param   task_id - ZDApp Task ID
    255           *
    256           * @return  None
    257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    258          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    259          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    260            // Save the task ID
    261            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    262          
    263            // Initialize the ZDO global device short address storage
    264            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    265            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    266            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    267          
    268            // Check for manual "Hold Auto Start"
    269            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    270          
    271            // Initialize ZDO items and setup the device - type of device to create.
    272            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    273          
    274            // Register the endpoint description with the AF
    275            // This task doesn't have a Simple description, but we still need
    276            // to register the endpoint.
    277            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay
    278          
    279          #if defined( ZDO_USERDESC_RESPONSE )
    280            ZDApp_InitUserDesc();
    281          #endif // ZDO_USERDESC_RESPONSE
    282          
    283            // Start the device?
    284            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6006         JZ      ??ZDApp_Init_0
    285            {
    286              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   8004         SJMP    ??ZDApp_Init_1
    287            }
    288            else
    289            {
    290              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000035                ; Setup parameters for call to function ZDOInitDevice
   \   000035   7AFF         MOV     R2,#-0x1
   \   000037   7BFF         MOV     R3,#-0x1
   \                     ??ZDApp_Init_1:
   \   000039   12....       LCALL   ??ZDOInitDevice?relay
    291              // Blink LED to indicate HOLD_START
    292              //HalLedBlink ( HAL_LED_4, 0, 50, 500 );
    293            }
    294          
    295            // Initialize the ZDO callback function pointers zdoCBFunc[]
    296            ZDApp_InitZdoCBFunc();
   \   00003C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00003C   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay
    297          
    298            ZDApp_RegisterCBs();
   \   00003F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00003F   12....       LCALL   ??ZDApp_RegisterCBs?relay
    299          } /* ZDApp_Init() */
   \   000042   02....       LJMP    ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    300          
    301          /*********************************************************************
    302           * @fn          ZDApp_SecInit
    303           *
    304           * @brief       ZDApp initialize security.
    305           *
    306           * @param       state - device initialization state
    307           *
    308           * @return      none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    311          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    312            uint8 zgPreConfigKey[SEC_KEY_LEN];
    313          
    314            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    315            {
    316              // Set the Trust Center bit
    317              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    318            }
    319          
    320            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    321            {
    322              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    323            }
    324          
    325            // Initialize ZigBee Device Security Manager
    326            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   ??ZDSecMgrInit?relay
    327          
    328            if ( ZG_SECURE_ENABLED )
    329            {
    330              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    331              {
    332                nwkFrameCounter = 0;
    333          
    334                if( _NIB.nwkKeyLoaded == FALSE )
    335                {
    336                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    337                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    338                  {
    339                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    340                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    341                      SSP_SwitchNwkKey( 0 );
    342          
    343                      // clear local copy of key
    344                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    345                  }
    346                }
    347              }
    348            }
    349          }
   \   000008   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    350          
    351          /*********************************************************************
    352           * @fn      ZDApp_event_loop()
    353           *
    354           * @brief   Main event loop for Zigbee device objects task. This function
    355           *          should be called at periodic intervals.
    356           *
    357           * @param   task_id - Task ID
    358           * @param   events  - Bitmap of events
    359           *
    360           * @return  none
    361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    362          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    363          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    364            uint8 *msg_ptr;
    365          
    366            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7032         JNZ     ??ZDApp_event_loop_0
    367            {
    368              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    369              {
    370                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    371          
    372                // Release the memory
    373                osal_msg_deallocate( msg_ptr );
    374              }
    375          
    376              // Return unprocessed events
    377              return (events ^ SYS_EVENT_MSG);
    378            }
    379          
    380            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5046         JNC     ??ZDApp_event_loop_1
    381            {
    382              // Initialize apps and start the network
    383              devState = DEV_INIT;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    384              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    385          
    386              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    387                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \                     ??CrossCallReturnLabel_68:
   \   00001A                ; Setup parameters for call to function ZDO_StartDevice
   \   00001A   7C0F         MOV     R4,#0xf
   \   00001C   7B0F         MOV     R3,#0xf
   \   00001E   90....       MOV     DPTR,#devStartMode
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000026   E0           MOVX    A,@DPTR
   \   000027   5407         ANL     A,#0x7
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??ZDO_StartDevice?relay
    388          
    389              // Return unprocessed events
    390              return (events ^ ZDO_NETWORK_INIT);
   \   00002D   EE           MOV     A,R6
   \   00002E   6401         XRL     A,#0x1
   \                     ??ZDApp_event_loop_2:
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_3:
   \   000032   FB           MOV     R3,A
   \   000033   8077         SJMP    ??ZDApp_event_loop_4
    391            }
   \                     ??ZDApp_event_loop_5:
   \   000035                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000035   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV     R2,?V0 + 0
   \   00003A   AB..         MOV     R3,?V0 + 1
   \   00003C   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_0:
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \   00003F   90....       MOV     DPTR,#ZDAppTaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??osal_msg_receive?relay
   \   000047   8A..         MOV     ?V0 + 0,R2
   \   000049   8B..         MOV     ?V0 + 1,R3
   \   00004B   A9..         MOV     R1,?V0 + 1
   \   00004D   EA           MOV     A,R2
   \   00004E   49           ORL     A,R1
   \   00004F   70E4         JNZ     ??ZDApp_event_loop_5
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   6480         XRL     A,#0x80
   \   000056   80DA         SJMP    ??ZDApp_event_loop_3
    392          
    393            if ( ZSTACK_ROUTER_BUILD )
    394            {
    395              if ( events & ZDO_NETWORK_START )
    396              {
    397                ZDApp_NetworkStartEvt();
    398          
    399                // Return unprocessed events
    400                return (events ^ ZDO_NETWORK_START);
    401              }
    402          
    403              if ( events & ZDO_ROUTER_START )
    404              {
    405                if ( nwkStatus == ZSuccess )
    406                {
    407                  if ( devState == DEV_END_DEVICE )
    408                    devState = DEV_ROUTER;
    409          
    410                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    411                }
    412                else
    413                {
    414                  // remain as end device!!
    415                }
    416                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    417          
    418                // Return unprocessed events
    419                return (events ^ ZDO_ROUTER_START);
    420              }
    421            }
    422          
    423            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_1:
   \   000058   5410         ANL     A,#0x10
   \   00005A   6023         JZ      ??ZDApp_event_loop_6
    424            {
    425              ZDO_UpdateNwkStatus( devState );
   \   00005C                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00005C   90....       MOV     DPTR,#devState
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    426          
    427              // At start up, do one MTO route discovery if the device is a concentrator
    428              if ( zgConcentratorEnable == TRUE )
   \   000064   90....       MOV     DPTR,#zgConcentratorEnable
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   700E         JNZ     ??CrossCallReturnLabel_86
    429              {
    430                // Start next event
    431                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00006C                ; Setup parameters for call to function osal_start_timerEx
   \   00006C   7C64         MOV     R4,#0x64
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   7A00         MOV     R2,#0x0
   \   000072   7B08         MOV     R3,#0x8
   \   000074   90....       MOV     DPTR,#NWK_TaskID
   \   000077   12....       LCALL   ??Subroutine51_0 & 0xFFFF
    432              }
    433          
    434              // Return unprocessed events
    435              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_86:
   \   00007A   EE           MOV     A,R6
   \   00007B   6410         XRL     A,#0x10
   \   00007D   80B1         SJMP    ??ZDApp_event_loop_2
    436            }
    437          
    438            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_6:
   \   00007F   EE           MOV     A,R6
   \   000080   5408         ANL     A,#0x8
   \   000082   6006         JZ      ??ZDApp_event_loop_7
    439            {
    440              // User defined logic
    441          
    442              // Return unprocessed events
    443              return (events ^ ZDO_COMMAND_CNF);
   \   000084   EE           MOV     A,R6
   \   000085   6408         XRL     A,#0x8
   \   000087   FA           MOV     R2,A
   \   000088   8022         SJMP    ??ZDApp_event_loop_4
    444            }
    445          
    446            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_7:
   \   00008A   EF           MOV     A,R7
   \   00008B   5402         ANL     A,#0x2
   \   00008D   600A         JZ      ??ZDApp_event_loop_8
    447            {
    448              ZDApp_SaveNetworkStateEvt();
   \   00008F                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00008F   12....       LCALL   ??ZDApp_SaveNetworkStateEvt?relay
    449          
    450              // Return unprocessed events
    451              return (events ^ ZDO_NWK_UPDATE_NV);
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   6402         XRL     A,#0x2
   \   000097   8099         SJMP    ??ZDApp_event_loop_3
    452            }
    453          
    454            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_8:
   \   000099   EE           MOV     A,R6
   \   00009A   5404         ANL     A,#0x4
   \   00009C   600A         JZ      ??ZDApp_event_loop_9
    455            {
    456          #ifdef ZBA_FALLBACK_NWKKEY
    457              if ( devState == DEV_END_DEVICE_UNAUTH )
    458              {
    459                ZDSecMgrFallbackNwkKey();
    460              }
    461              else
    462          #endif
    463              {
    464                // Set the NV startup option to force a "new" join.
    465                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00009E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00009E   7A02         MOV     R2,#0x2
   \   0000A0   79FF         MOV     R1,#-0x1
   \   0000A2   12....       LCALL   ??zgWriteStartupOptions?relay
    466          
    467                // The device has been in the UNAUTH state, so reset
    468                // Note: there will be no return from this call
    469                SystemResetSoft();
   \   0000A5                ; Setup parameters for call to function Onboard_soft_reset
   \   0000A5   12....       LCALL   Onboard_soft_reset & 0xFFFF
    470              }
    471            }
    472          
    473            if ( ZG_SECURE_ENABLED )
    474            {
    475              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    476            }
    477            else
    478            {
    479              // Discard or make more handlers
    480              return 0;
   \                     ??ZDApp_event_loop_9:
   \   0000A8   7A00         MOV     R2,#0x0
   \   0000AA   7B00         MOV     R3,#0x0
    481            }
   \                     ??ZDApp_event_loop_4:
   \   0000AC   80..         SJMP    ??Subroutine42_0
    482          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??osal_set_event?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET
    483          
    484          /*********************************************************************
    485           * @fn      ZDApp_ProcessSecEvent()
    486           *
    487           * @brief   Process incoming security events.
    488           *
    489           * @param   task_id - Task ID
    490           * @param   events  - Bitmap of events
    491           *
    492           * @return  none
    493           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    494          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    495          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    496            (void)task_id;  // Intentionally unreferenced parameter
    497          
    498            if ( ZSTACK_ROUTER_BUILD )
    499            {
    500              if ( events & ZDO_NEW_DEVICE )
    501              {
    502                // process the new device event
    503                if ( ZDSecMgrNewDeviceEvent() == TRUE )
    504                {
    505                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
    506                }
    507          
    508                // Return unprocessed events
    509                return (events ^ ZDO_NEW_DEVICE);
    510              }
    511            }
    512          
    513            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
    514                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    515            {
    516              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    517              {
    518                if ( events & ZDO_SECMGR_EVENT )
    519                {
    520                  ZDSecMgrEvent();
    521          
    522                  // Return unprocessed events
    523                  return (events ^ ZDO_SECMGR_EVENT);
    524                }
    525              }
    526            }
    527          
    528            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600B         JZ      ??ZDApp_ProcessSecEvent_0
    529            {
    530              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    531          
    532              // Return unprocessed events
    533              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV     A,R6
   \   000012   6480         XRL     A,#0x80
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000016   FB           MOV     R3,A
   \   000017   804E         SJMP    ??ZDApp_ProcessSecEvent_2
    534            }
    535          
    536            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000019   EF           MOV     A,R7
   \   00001A   5404         ANL     A,#0x4
   \   00001C   6027         JZ      ??ZDApp_ProcessSecEvent_3
    537            {
    538              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   00001E   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000021   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000024   E8           MOV     A,R0
   \   000025   2401         ADD     A,#0x1
   \   000027   FA           MOV     R2,A
   \   000028   E9           MOV     A,R1
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FB           MOV     R3,A
   \   00002C   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00002F   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000032   C3           CLR     C
   \   000033   E8           MOV     A,R0
   \   000034   94E9         SUBB    A,#-0x17
   \   000036   E9           MOV     A,R1
   \   000037   9403         SUBB    A,#0x3
   \   000039   4003         JC      ??ZDApp_ProcessSecEvent_4
    539              {
    540                ZDApp_SaveNwkKey();
   \   00003B                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00003B   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    541              }
    542          
    543              // Return unprocessed events
    544              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   6404         XRL     A,#0x4
   \   000043   80D1         SJMP    ??ZDApp_ProcessSecEvent_1
    545            }
    546          
    547            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000045   EF           MOV     A,R7
   \   000046   5410         ANL     A,#0x10
   \   000048   600A         JZ      ??ZDApp_ProcessSecEvent_5
    548            {
    549          #if defined (NV_RESTORE)
    550              ZDSecMgrSaveApsLinkKey();
   \   00004A                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   00004A   12....       LCALL   ??ZDSecMgrSaveApsLinkKey?relay
    551          #endif // (NV_RESTORE)
    552          
    553              // Return unprocessed events
    554              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   6410         XRL     A,#0x10
   \   000052   80C2         SJMP    ??ZDApp_ProcessSecEvent_1
    555            }
    556          
    557            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000054   EF           MOV     A,R7
   \   000055   5408         ANL     A,#0x8
   \   000057   600A         JZ      ??ZDApp_ProcessSecEvent_6
    558            {
    559              ZDSecMgrSaveTCLinkKey();
   \   000059                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000059   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay
    560          
    561              // Return unprocessed events
    562              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   6408         XRL     A,#0x8
   \   000061   80B3         SJMP    ??ZDApp_ProcessSecEvent_1
    563            }
    564          
    565            // Discard or make more handlers
    566            return 0;
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000067   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    567          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    568          
    569          /*********************************************************************
    570           * Application Functions
    571           */
    572          
    573          /*********************************************************************
    574           * @fn      ZDOInitDevice
    575           *
    576           * @brief   Start the device in the network.  This function will read
    577           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    578           *   restore the network state of the device.
    579           *
    580           * @param   startDelay - timeDelay to start device (in milliseconds).
    581           *                       There is a jitter added to this delay:
    582           *                       ((NWK_START_DELAY + startDelay)
    583           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    584           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    585           *                       this function will hold the network init. Application
    586           *                       can start the device.
    587           *
    588           * NOTE:    If the application would like to force a "new" join, the
    589           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    590           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    591           *          this function. "new" join means to not restore the network
    592           *          state of the device. Use zgWriteStartupOptions() to set these
    593           *          options.
    594           *
    595           * @return
    596           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    597           *          restored.
    598           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    599           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    600           *          it could mean that there was no network state to restore.
    601           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    602           *          with the rejoin option set to TRUE.  So, the device was not
    603           *          started in the network (one time only).  The next time this
    604           *          function is called it will start.
    605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    607          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
    608            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    609            uint16 extendedDelay = 0;
   \                     ??CrossCallReturnLabel_125:
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    610          
    611            if ( devState == DEV_HOLD )
   \   000011   90....       MOV     DPTR,#devState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7005         JNZ     ??ZDOInitDevice_0
    612            {
    613              // Initialize the RAM items table, in case an NV item has been updated.
    614              zgInitItems( FALSE );
   \   000017                ; Setup parameters for call to function zgInitItems
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??zgInitItems?relay
    615            }
    616          
    617            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001C                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001C   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    618            //devtag.071807.todo - fix this temporary solution
    619            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   E0           MOVX    A,@DPTR
   \   000023   90....       MOV     DPTR,#_NIB + 14
   \   000026   F0           MOVX    @DPTR,A
    620          
    621          #if defined ( NV_RESTORE )
    622            // Get Keypad directly to see if a reset nv is needed.
    623            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    624            // while booting to skip past NV Restore.
    625            if ( HalKeyRead() & HAL_KEY_PWR )
   \   000027                ; Setup parameters for call to function HalKeyRead
   \   000027   12....       LCALL   ??HalKeyRead?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00002D   5074         JNC     ??ZDOInitDevice_1
    626              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00002F   75..01       MOV     ?V0 + 0,#0x1
    627            else
    628            {
    629              // Determine if NV should be restored
    630              networkStateNV = ZDApp_ReadNetworkRestoreState();
    631            }
    632          
    633            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    634            {
    635              networkStateNV = ZDApp_RestoreNetworkState();
    636            }
    637            else
    638            {
    639              // Wipe out the network state in NV
    640              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000032                ; Setup parameters for call to function NLME_InitNV
   \   000032   12....       LCALL   ??NLME_InitNV?relay
    641              NLME_SetDefaultNV();
   \   000035                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000035   12....       LCALL   ??NLME_SetDefaultNV?relay
    642              // clear NWK key values
    643              ZDSecMgrClearNVKeyValues();
   \   000038                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000038   12....       LCALL   ??ZDSecMgrClearNVKeyValues?relay
    644            }
    645          #endif
    646          
    647            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   00003B   7401         MOV     A,#0x1
   \   00003D   65..         XRL     A,?V0 + 0
   \   00003F   7020         JNZ     ??ZDOInitDevice_4
    648            {
    649              ZDAppDetermineDeviceType();
   \   000041                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000041   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    650          
    651              // Only delay if joining network - not restoring network state
    652              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    653                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000044                ; Setup parameters for call to function osal_rand
   \   000044   12....       LCALL   ??osal_rand?relay
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   EA           MOV     A,R2
   \   00004E   547F         ANL     A,#0x7f
   \   000050   F8           MOV     R0,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   28           ADD     A,R0
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   3400         ADDC    A,#0x0
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   2464         ADD     A,#0x64
   \   00005C   FE           MOV     R6,A
   \   00005D   E9           MOV     A,R1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   FF           MOV     R7,A
    654            }
    655          
    656            // Initialize the security for type of device
    657            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000061                ; Setup parameters for call to function ZDSecMgrInit
   \   000061   A9..         MOV     R1,?V0 + 0
   \   000063   12....       LCALL   ??ZDSecMgrInit?relay
    658          
    659            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F4           CPL     A
   \   00006E   7003         JNZ     ??ZDOInitDevice_5
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F4           CPL     A
   \                     ??ZDOInitDevice_5:
   \   000073   6045         JZ      ??ZDOInitDevice_6
    660            {
    661              devState = DEV_INIT;    // Remove the Hold state
   \   000075   90....       MOV     DPTR,#devState
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
    662          
    663              // Initialize leave control logic
    664              ZDApp_LeaveCtrlInit();
   \   00007B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007B   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    665          
    666              // Check leave control reset settings
    667              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   AC82         MOV     R4,DPL
   \   000086   AD83         MOV     R5,DPH
   \   000088   7A..         MOV     R2,#devState & 0xff
   \   00008A   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00008C   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    668          
    669              // Leave may make the hold state come back
    670              if ( devState == DEV_HOLD )
   \   00008F   90....       MOV     DPTR,#devState
   \   000092   E0           MOVX    A,@DPTR
   \   000093   701E         JNZ     ??ZDOInitDevice_7
    671              {
    672                // Set the NV startup option to force a "new" join.
    673                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000095                ; Setup parameters for call to function zgWriteStartupOptions
   \   000095   7A02         MOV     R2,#0x2
   \   000097   79FF         MOV     R1,#-0x1
   \   000099   12....       LCALL   ??zgWriteStartupOptions?relay
    674          
    675                // Notify the applications
    676                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00009C                ; Setup parameters for call to function osal_set_event
   \   00009C   12....       LCALL   ?Subroutine18 & 0xFFFF
    677          
    678                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_59:
   \   00009F   7902         MOV     R1,#0x2
   \   0000A1   8021         SJMP    ??ZDOInitDevice_8
    679              }
   \                     ??ZDOInitDevice_1:
   \   0000A3                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000A3   12....       LCALL   ??ZDApp_ReadNetworkRestoreState?relay
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   7087         JNZ     ??ZDOInitDevice_2
   \   0000AB                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000AB   12....       LCALL   ??ZDApp_RestoreNetworkState?relay
   \   0000AE   E9           MOV     A,R1
   \   0000AF   F5..         MOV     ?V0 + 0,A
   \   0000B1   8088         SJMP    ??ZDOInitDevice_3
    680          
    681              // Trigger the network start
    682              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_7:
   \   0000B3                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FB           MOV     R3,A
   \   0000B7   12....       LCALL   ??ZDApp_NetworkInit?relay
    683            }
    684          
    685            // set broadcast address mask to support broadcast filtering
    686            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   0000BA                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000BA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    687          
    688            return ( networkStateNV );
   \   0000C2   A9..         MOV     R1,?V0 + 0
   \                     ??ZDOInitDevice_8:
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   80..         SJMP    ??Subroutine44_0
    689          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine61_0
   \   000006                ; // Fall through to label ??Subroutine61_0
    690          
    691          /*********************************************************************
    692           * @fn      ZDApp_ReadNetworkRestoreState
    693           *
    694           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    695           *          or not to restore the network state.
    696           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    697           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    698           *
    699           * @param   none
    700           *
    701           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    702           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    703           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    704           *          ZCD_NV_STARTUP_OPTION
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    707          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    708            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    709          
    710            // Look for the New Network State option.
    711            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    712            {
    713              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    714            }
    715          
    716            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    717          }
    718          
    719          /*********************************************************************
    720           * @fn      ZDAppDetermineDeviceType()
    721           *
    722           * @brief   Determines the type of device to start.
    723           *
    724           *          Looks at zgDeviceLogicalType and determines what type of
    725           *          device to start.  The types are:
    726           *            ZG_DEVICETYPE_COORDINATOR
    727           *            ZG_DEVICETYPE_ROUTER
    728           *            ZG_DEVICETYPE_ENDDEVICE
    729           *
    730           * @param   none
    731           *
    732           * @return  none
    733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    734          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    735          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    736            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    737            {
    738              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    739              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    740            }
    741            else
    742            {
    743              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    744                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    745              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    746                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    747          
    748              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    749              // The device shall do rejoin the network. Otherwise, do normal join
    750              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   90....       MOV     DPTR,#devStartMode
   \   00003F   7003         JNZ     ??ZDAppDetermineDeviceType_5
    751              {
    752                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR     A
   \   000042   8002         SJMP    ??ZDAppDetermineDeviceType_1
    753              }
    754              else
    755              {
    756                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    757              }
    758            }
    759          }
   \   000047   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    760          
    761          /*********************************************************************
    762           * @fn      ZDApp_NetworkStartEvt()
    763           *
    764           * @brief   Process the Network Start Event
    765           *
    766           * @param   none
    767           *
    768           * @return  none
    769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    771          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    772            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    773            {
    774              // Successfully started a ZigBee network
    775              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    776              {
    777                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    778              }
    779          
    780              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    781              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802B         SJMP    ??ZDApp_NetworkStartEvt_2
    782            }
    783            else
    784            {
    785              // Try again with a higher energy threshold !!
    786              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   2410         ADD     A,#0x10
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   C3           CLR     C
   \   00002E   65D0         XRL     A,PSW
   \   000030   33           RLC     A
   \   000031   500E         JNC     ??ZDApp_NetworkStartEvt_3
    787              {
    788                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000033                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000033                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000033   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000036   E9           MOV     A,R1
   \   000037   2410         ADD     A,#0x10
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    789                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    790              }
    791              else
    792              {
    793                // Failed to start network. Enter a dormant state (until user intervenes)
    794                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000041   90....       MOV     DPTR,#devState
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    795                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000047                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000047   7A10         MOV     R2,#0x10
    796              }
    797            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000049   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    798          }
   \                     ??CrossCallReturnLabel_63:
   \   00004C   02....       LJMP    ??Subroutine50_0 & 0xFFFF
    799          
    800          /*********************************************************************
    801           * @fn      ZDApp_DeviceAuthEvt()
    802           *
    803           * @brief   Process the Device Authentic Event
    804           *
    805           * @param   none
    806           *
    807           * @return  none
    808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    809          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    810          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    811            // received authentication from trust center
    812            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7022         JNZ     ??ZDApp_DeviceAuthEvt_0
    813            {
    814              // Stop the reset timer so it doesn't reset
    815              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    816          
    817              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine8 & 0xFFFF
    818              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    819          
    820              // Set the Power Manager Device
    821          #if defined ( POWER_SAVING )
    822              osal_pwrmgr_device( PWRMGR_BATTERY );
    823          #endif
    824          
    825              if ( ZSTACK_ROUTER_BUILD )
    826              {
    827                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    828                {
    829                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    830                  NLME_StartRouterRequest( 0, 0, false );
    831                }
    832              }
    833          
    834              // Notify to save info into NV
    835              ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_66:
   \   000012                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000012   12....       LCALL   ??ZDApp_NVUpdate?relay
    836          
    837              // Save off the security
    838              ZDApp_SaveNwkKey();
   \   000015                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000015   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    839          
    840              ZDApp_AnnounceNewAddress();
   \   000018                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000018   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    841          
    842              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   00001B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000021   400E         JC      ??ZDApp_DeviceAuthEvt_1
    843              {
    844                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000023                ; Setup parameters for call to function NLME_SetPollRate
   \   000023   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000026   12....       LCALL   ?Subroutine24 & 0xFFFF
    845              }
    846            }
   \                     ??CrossCallReturnLabel_28:
   \   000029   12....       LCALL   ??NLME_SetPollRate?relay
   \   00002C   8003         SJMP    ??ZDApp_DeviceAuthEvt_1
    847            else
    848            {
    849              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002E                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00002E   12....       LCALL   ??ZDApp_NVUpdate?relay
    850            }
    851          }
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000031   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine46_0
   \   000005                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    852          
    853          /*********************************************************************
    854           * @fn      ZDApp_SaveNetworkStateEvt()
    855           *
    856           * @brief   Process the Save the Network State Event
    857           *
    858           * @param   none
    859           *
    860           * @return  none
    861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    862          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    863          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    864          #if defined ( NV_RESTORE )
    865           #if defined ( NV_TURN_OFF_RADIO )
    866            // Turn off the radio's receiver during an NV update
    867            uint8 RxOnIdle;
    868            uint8 x = false;
    869            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    870            ZMacSetReq( ZMacRxOnIdle, &x );
    871           #endif
    872          
    873            // Update the Network State in NV
    874            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    875                           NWK_NV_DEVICELIST_ENABLE |
    876                           NWK_NV_BINDING_ENABLE    |
    877                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   ??NLME_UpdateNV?relay
    878          
    879            // Reset the NV startup option to resume from NV by
    880            // clearing the "New" join option.
    881            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   ??zgWriteStartupOptions?relay
    882          
    883           #if defined ( NV_TURN_OFF_RADIO )
    884            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    885           #endif
    886          #endif  // NV_RESTORE
    887          }
   \   000010   02....       LJMP    ??Subroutine50_0 & 0xFFFF
    888          
    889          /*********************************************************************
    890           * @fn      ZDApp_RestoreNetworkState()
    891           *
    892           * @brief   This function will restore the network state of the
    893           *          device if the network state is stored in NV.
    894           *
    895           * @param   none
    896           *
    897           * @return
    898           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    899           *          restored.
    900           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    901           *          This could mean that zgStartupOption said to not restore, or
    902           *          it could mean that there was no network state to restore.
    903           *
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    906          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    907            uint8 nvStat;
    908          
    909            // Initialize NWK NV items
    910            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    911          
    912            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   602D         JZ      ??ZDApp_RestoreNetworkState_0
    913            {
    914              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6027         JZ      ??ZDApp_RestoreNetworkState_0
    915              {
    916                // Are we a coordinator
    917                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine61_0 & 0xFFFF
    918                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_121:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_1
    919                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    920                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?Subroutine10 & 0xFFFF
    921                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    922              }
    923              else
    924                nvStat = NV_ITEM_UNINIT;
    925          
    926              if ( ZG_SECURE_ENABLED )
    927              {
    928                nwkFrameCounterChanges = 0;
    929          
    930                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    931                {
    932                  ZDApp_RestoreNwkKey();
    933                }
    934              }
    935          
    936              // The default for RxOnWhenIdle is true for Routers and false for end devices
    937              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    938              // other than default.
    939            }
    940          
    941            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000035   EE           MOV     A,R6
   \   000036   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    942              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000038   7900         MOV     R1,#0x0
   \   00003A   8002         SJMP    ??ZDApp_RestoreNetworkState_2
    943            else
    944              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003C   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00003E   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    945          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    946          
    947          /*********************************************************************
    948           * @fn      ZDApp_InitUserDesc()
    949           *
    950           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    951           *          when needed.  If you want to initialize the User descriptor to
    952           *          something other than all zero, do it here.
    953           *
    954           * @param   none
    955           *
    956           * @return  none
    957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    958          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    959          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    960            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    961          
    962            // Initialize the User Descriptor, the descriptor is read from NV
    963            // when needed.  If you want to initialize the User descriptor to something
    964            // other than all zero, do it here.
    965            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine33 & 0xFFFF
    966            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    967                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_44:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   702F         JNZ     ??ZDApp_InitUserDesc_0
    968            {
    969              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    970                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   E9           MOV     A,R1
   \   000042   7010         JNZ     ??ZDApp_InitUserDesc_0
    971              {
    972                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6007         JZ      ??ZDApp_InitUserDesc_0
    973                {
    974                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX    A,@DPTR
   \   000051   D2E4         SETB    0xE0 /* A   */.4
   \   000053   F0           MOVX    @DPTR,A
    975                }
    976              }
    977            }
    978          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV     A,#0x11
   \   000056   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_read?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
    979          
    980          /*********************************************************************
    981           * @fn      ZDAppCheckForHoldKey()
    982           *
    983           * @brief   Check for key to set the device into Hold Auto Start
    984           *
    985           * @param   none
    986           *
    987           * @return  none
    988           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    989          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    990          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    991          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    992            // Get Keypad directly to see if a HOLD_START is needed.
    993            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    994            // while booting to avoid starting up the device.
    995            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6404         XRL     A,#0x4
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    996            {
    997              // Change the device state to HOLD on start up
    998              devState = DEV_HOLD;
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    999            }
   1000          #endif // HAL_KEY
   1001          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1002          
   1003          /*********************************************************************
   1004           * @fn      ZDApp_ProcessOSALMsg()
   1005           *
   1006           * @brief   Process the incoming task message.
   1007           *
   1008           * @param   msgPtr - message to process
   1009           *
   1010           * @return  none
   1011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1012          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1013          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1014            // Data Confirmation message fields
   1015            uint8 sentEP;       // This should always be 0
   1016            uint8 sentStatus;
   1017            afDataConfirm_t *afDataConfirm;
   1018            uint8 tmp;
   1019          
   1020            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   6023         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   6007         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6009         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1021            {
   1022              // Incoming ZDO Message
   1023              case AF_INCOMING_MSG_CMD:
   1024                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL   ??ZDP_IncomingData?relay
   1025                break;
   \   00002C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1026          
   1027              case ZDO_CB_MSG:
   1028                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   1029                break;
   \   000032   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1030          
   1031              case AF_DATA_CONFIRM_CMD:
   1032                // This message is received as a confirmation of a data packet sent.
   1033                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1034                // The message fields are defined in AF.h
   1035                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1036                sentEP = afDataConfirm->endpoint;
   1037                sentStatus = afDataConfirm->hdr.status;
   1038          
   1039                // Action taken when confirmation is received.
   1040          #if defined ( ZIGBEE_FREQ_AGILITY )
   1041                if ( pZDNwkMgr_ProcessDataConfirm )
   1042                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1043          #endif
   1044                (void)sentEP;
   1045                (void)sentStatus;
   1046                break;
   1047          
   1048              case ZDO_NWK_DISC_CNF:
   1049                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV     DPTR,#devState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1050                  break;
   1051          
   1052                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6402         XRL     A,#0x2
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1053                {
   1054                  // Process the network discovery scan results and choose a parent
   1055                  // device to join/rejoin itself
   1056                  networkDesc_t *pChosenNwk;
   1057                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000050   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay
   \   000053   8A..         MOV     ?V0 + 0,R2
   \   000055   8B..         MOV     ?V0 + 1,R3
   \   000057   A8..         MOV     R0,?V0 + 0
   \   000059   A9..         MOV     R1,?V0 + 1
   \   00005B   E8           MOV     A,R0
   \   00005C   FE           MOV     R6,A
   \   00005D   E9           MOV     A,R1
   \   00005E   FF           MOV     R7,A
   \   00005F   E8           MOV     A,R0
   \   000060   49           ORL     A,R1
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   000066   90....       MOV     DPTR,#zdoDiscCounter
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C3           CLR     C
   \   00006B   9403         SUBB    A,#0x3
   \   00006D   5003         JNC     $+5
   \   00006F   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1058                  {
   1059                    if ( devStartMode == MODE_JOIN )
   \   000072   90....       MOV     DPTR,#devStartMode
   \   000075   E0           MOVX    A,@DPTR
   \   000076   7059         JNZ     ??ZDApp_ProcessOSALMsg_8
   1060                    {
   1061                      devState = DEV_NWK_JOINING;
   \   000078   90....       MOV     DPTR,#devState
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?Subroutine11 & 0xFFFF
   1062          
   1063                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_4:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1064          
   1065                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1066                                            pChosenNwk->logicalChannel,
   1067                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1068                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000085                ; Setup parameters for call to function NLME_JoinRequest
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0 + 0,A
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A9   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F5..         MOV     ?V0 + 0,A
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FC           MOV     R4,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   12....       LCALL   ?Subroutine34 & 0xFFFF
   1069                      {
   1070                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1071                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1072                      }
   1073                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_70:
   \   0000C7   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000CA   7404         MOV     A,#0x4
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CF   806B         SJMP    ??ZDApp_ProcessOSALMsg_9
   1074                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000D1   6403         XRL     A,#0x3
   \   0000D3   706D         JNZ     ??CrossCallReturnLabel_34
   1075                    {
   1076                      devState = DEV_NWK_REJOIN;
   \   0000D5   90....       MOV     DPTR,#devState
   \   0000D8   7404         MOV     A,#0x4
   \   0000DA   F0           MOVX    @DPTR,A
   1077          
   1078                      // Before trying to do rejoin, check if the device has a valid short address
   1079                      // If not, generate a random short address for itself
   1080                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000DB   90....       MOV     DPTR,#_NIB + 20
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   64FE         XRL     A,#0xfe
   \   0000E1   7003         JNZ     ??ZDApp_ProcessOSALMsg_10
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000E6   7012         JNZ     ??ZDApp_ProcessOSALMsg_11
   1081                      {
   1082                        _NIB.nwkDevAddress = osal_rand();
   \   0000E8                ; Setup parameters for call to function osal_rand
   \   0000E8   12....       LCALL   ??osal_rand?relay
   \   0000EB   90....       MOV     DPTR,#_NIB + 20
   \   0000EE   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   1083                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_122:
   \   0000F1                ; Setup parameters for call to function ZMacSetReq
   \   0000F1   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   0000F3   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   0000F5   7953         MOV     R1,#0x53
   \   0000F7   12....       LCALL   ??ZMacSetReq?relay
   1084                      }
   1085          
   1086                      if ( ZG_SECURE_ENABLED )
   1087                      {
   1088                        ZDApp_RestoreNwkKey();
   1089                      }
   1090          
   1091                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1092                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000FA   90....       MOV     DPTR,#_NIB + 33
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   64FE         XRL     A,#0xfe
   \   000100   7003         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000105   7014         JNZ     ??ZDApp_ProcessOSALMsg_13
   1093                      {
   1094                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000107   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00010A   90....       MOV     DPTR,#_NIB + 33
   \   00010D   E8           MOV     A,R0
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E9           MOV     A,R1
   \   000111   F0           MOVX    @DPTR,A
   1095                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   000112                ; Setup parameters for call to function ZMacSetReq
   \   000112   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   000114   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   000116   7950         MOV     R1,#0x50
   \   000118   12....       LCALL   ??ZMacSetReq?relay
   1096                      }
   1097          
   1098                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00011B   85..82       MOV     DPL,?XSP + 0
   \   00011E   85..83       MOV     DPH,?XSP + 1
   \   000121   7401         MOV     A,#0x1
   \   000123   F0           MOVX    @DPTR,A
   1099                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000124                ; Setup parameters for call to function ZMacSetReq
   \   000124   AA82         MOV     R2,DPL
   \   000126   AB83         MOV     R3,DPH
   \   000128   7952         MOV     R1,#0x52
   \   00012A   12....       LCALL   ??ZMacSetReq?relay
   1100                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
   \   00012D                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F9           MOV     R1,A
   \   000135   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000137   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000139   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00013C   E9           MOV     A,R1
   \   00013D   6003         JZ      ??CrossCallReturnLabel_34
   1101                      {
   1102                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1103                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00013F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013F                ; Setup parameters for call to function osal_rand
   \   00013F   12....       LCALL   ?Subroutine27 & 0xFFFF
   1104                      }
   1105                    } // else if ( devStartMode == MODE_REJOIN )
   1106          
   1107                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_34:
   \   000142   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000145   E0           MOVX    A,@DPTR
   \   000146   A2E3         MOV     C,0xE0 /* A   */.3
   \   000148   505A         JNC     ??ZDApp_ProcessOSALMsg_5
   1108                    {
   1109                      // The receiver is on, turn network layer polling off.
   1110                      NLME_SetPollRate( 0 );
   \   00014A                ; Setup parameters for call to function NLME_SetPollRate
   \   00014A   12....       LCALL   ?Subroutine32 & 0xFFFF
   1111                      NLME_SetQueuedPollRate( 0 );
   1112                      NLME_SetResponseRate( 0 );
   1113                    }
   1114                    else
   1115                    {
   1116                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1117                      {
   1118                        ZDApp_SavedPollRate = zgPollRate;
   1119                        NLME_SetPollRate( zgRejoinPollRate );
   1120                      }
   1121                    }
   1122                  }
   \                     ??CrossCallReturnLabel_42:
   \   00014D   8055         SJMP    ??ZDApp_ProcessOSALMsg_5
   1123                  else
   1124                  {
   1125                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00014F   90....       MOV     DPTR,#continueJoining
   \   000152   E0           MOVX    A,@DPTR
   \   000153   604F         JZ      ??ZDApp_ProcessOSALMsg_5
   1126                    {
   1127              #if defined ( MANAGED_SCAN )
   1128                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1129              #else
   1130                      zdoDiscCounter++;
   \   000155   90....       MOV     DPTR,#zdoDiscCounter
   \   000158   E0           MOVX    A,@DPTR
   \   000159   04           INC     A
   \   00015A   F0           MOVX    @DPTR,A
   1131                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1132                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00015B                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00015B                ; Setup parameters for call to function osal_rand
   \   00015B   12....       LCALL   ??osal_rand?relay
   \   00015E   EA           MOV     A,R2
   \   00015F   2464         ADD     A,#0x64
   \   000161   FA           MOV     R2,A
   \   000162   E4           CLR     A
   \   000163   3400         ADDC    A,#0x0
   \   000165   FB           MOV     R3,A
   \   000166   8039         SJMP    ??ZDApp_ProcessOSALMsg_14
   1133              #endif
   1134                    }
   1135                  }
   1136                }
   1137                break;
   1138          
   1139              case ZDO_NWK_JOIN_IND:
   1140                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000168   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   6401         XRL     A,#0x1
   \   00016E   6005         JZ      ??ZDApp_ProcessOSALMsg_15
   \   000170   E0           MOVX    A,@DPTR
   \   000171   6402         XRL     A,#0x2
   \   000173   702F         JNZ     ??ZDApp_ProcessOSALMsg_5
   1141                {
   1142                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000175                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000175   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   000178   802A         SJMP    ??ZDApp_ProcessOSALMsg_5
   1143                }
   1144                break;
   1145          
   1146              case ZDO_NWK_JOIN_REQ:
   1147                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00017A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   6401         XRL     A,#0x1
   \   000180   6005         JZ      ??ZDApp_ProcessOSALMsg_16
   \   000182   E0           MOVX    A,@DPTR
   \   000183   6402         XRL     A,#0x2
   \   000185   701D         JNZ     ??ZDApp_ProcessOSALMsg_5
   1148                {
   1149                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000187   90....       MOV     DPTR,#retryCnt
   \   00018A   E4           CLR     A
   \   00018B   F0           MOVX    @DPTR,A
   1150                  devStartMode = MODE_RESUME;
   \   00018C   90....       MOV     DPTR,#devStartMode
   \   00018F   04           INC     A
   \   000190   F0           MOVX    @DPTR,A
   1151                  _tmpRejoinState = true;
   \   000191   90....       MOV     DPTR,#_tmpRejoinState
   \   000194   12....       LCALL   ?Subroutine10 & 0xFFFF
   1152                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1153                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_3:
   \   000197   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00019A   7402         MOV     A,#0x2
   \   00019C   F0           MOVX    @DPTR,A
   1154                  ZDApp_NetworkInit( 0 );
   \   00019D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00019D   7A00         MOV     R2,#0x0
   \   00019F   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   0001A1   12....       LCALL   ??ZDApp_NetworkInit?relay
   1155                }
   1156                break;
   1157          
   1158              default:
   1159                if ( ZG_SECURE_ENABLED )
   1160                  ZDApp_ProcessSecMsg( msgPtr );
   1161                break;
   1162            }
   1163          
   1164          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001A4   7401         MOV     A,#0x1
   \   0001A6   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   EA           MOV     A,R2
   \   000004   547F         ANL     A,#0x7f
   \   000006   2464         ADD     A,#0x64
   \   000008   FA           MOV     R2,A
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
   1165          
   1166          /*********************************************************************
   1167           * @fn      ZDApp_ProcessMsgCBs()
   1168           *
   1169           * @brief   Process response messages
   1170           *
   1171           * @param   none
   1172           *
   1173           * @return  none
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1176          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1177            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1178            {
   1179          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1180              case NWK_addr_rsp:
   1181              case IEEE_addr_rsp:
   1182                {
   1183                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1184                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00002D   8A..         MOV     ?V0 + 0,R2
   \   00002F   8B..         MOV     ?V0 + 1,R3
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   1185                  if ( pAddrRsp )
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   603D         JZ      ??ZDApp_ProcessMsgCBs_2
   1186                  {
   1187                    if ( pAddrRsp->status == ZSuccess )
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   700F         JNZ     ??ZDApp_ProcessMsgCBs_3
   1188                    {
   1189                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000040                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000040   EE           MOV     A,R6
   \   000041   2403         ADD     A,#0x3
   \   000043   FC           MOV     R4,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   FD           MOV     R5,A
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine24 & 0xFFFF
   1190                    }
   \                     ??CrossCallReturnLabel_29:
   \   00004C   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1191                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   ??osal_mem_free?relay
   \   000056   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1192                  }
   1193                }
   1194                break;
   1195          #endif
   1196          
   1197          #if defined ( REFLECTOR )
   1198              case Bind_req:
   1199              case Unbind_req:
   1200                {
   1201                  ZDO_BindUnbindReq_t bindReq;
   1202                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000058                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   AC82         MOV     R4,DPL
   \   000060   AD83         MOV     R5,DPH
   \   000062   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1203                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000065                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   AC82         MOV     R4,DPL
   \   00006D   AD83         MOV     R5,DPH
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1204                }
   1205                break;
   1206          #endif
   1207          
   1208          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1209              case Bind_rsp:
   1210              case Unbind_rsp:
   1211                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1212                {
   1213                  ZDMatchSendState(
   1214                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1215                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1216                }
   1217                break;
   1218          
   1219              case End_Device_Bind_req:
   1220                if (ZG_DEVICE_COORDINATOR_TYPE)
   1221                {
   1222                  ZDEndDeviceBind_t bindReq;
   1223                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1224                  ZDO_MatchEndDeviceBind( &bindReq );
   1225          
   1226                  // Freeing the cluster lists - if allocated.
   1227                  if ( bindReq.numInClusters )
   1228                    osal_mem_free( bindReq.inClusters );
   1229                  if ( bindReq.numOutClusters )
   1230                    osal_mem_free( bindReq.outClusters );
   1231                }
   1232                break;
   1233          #endif
   1234            }
   1235          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000076                REQUIRE ?Subroutine6
   \   000076                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1236          
   1237          /*********************************************************************
   1238           * @fn      ZDApp_RegisterCBs()
   1239           *
   1240           * @brief   Process response messages
   1241           *
   1242           * @param   none
   1243           *
   1244           * @return  none
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1247          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1248          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1249            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine21 & 0xFFFF
   1250          #endif
   1251          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1252            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_80:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine21 & 0xFFFF
   1253          #endif
   1254          #if ZG_BUILD_COORDINATOR_TYPE
   1255            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1256            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1257            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1258          #endif
   1259          #if defined ( REFLECTOR )
   1260            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_81:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1261            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_82:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV     R2,#0x22
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1262          #endif
   1263          }
   \                     ??CrossCallReturnLabel_83:
   \   00001C   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1264          
   1265          /*********************************************************************
   1266           * @fn      ZDApp_ProcessSecMsg()
   1267           *
   1268           * @brief   Process the incoming security message.
   1269           *
   1270           * @param   msgPtr - message to process
   1271           *
   1272           * @return  none
   1273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1274          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1275          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1276            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FA         ADD     A,#-0x6
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1277            {
   1278              case ZDO_ESTABLISH_KEY_CFM:
   1279                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1280                {
   1281                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1282                }
   1283                break;
   1284          
   1285              case ZDO_ESTABLISH_KEY_IND:
   1286                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1287                {
   1288                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1289                  {
   1290                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1291                  }
   1292                }
   1293                break;
   1294          
   1295              case ZDO_TRANSPORT_KEY_IND:
   1296                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1297                {
   1298                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1299                }
   1300                break;
   1301          
   1302              case ZDO_UPDATE_DEVICE_IND:
   1303                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1304                {
   1305                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1306                }
   1307                break;
   1308          
   1309              case ZDO_REMOVE_DEVICE_IND:
   1310                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1311                {
   1312                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1313                }
   1314                break;
   1315          
   1316              case ZDO_REQUEST_KEY_IND:
   1317                if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   1318                    ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
   1319                {
   1320                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1321                  {
   1322                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1323                  }
   1324                }
   1325                break;
   1326          
   1327              case ZDO_SWITCH_KEY_IND:
   1328                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1329                {
   1330                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1331                }
   1332                break;
   1333          
   1334              case ZDO_AUTHENTICATE_IND:
   1335                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1336                {
   1337                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1338                }
   1339                break;
   1340          
   1341              case ZDO_AUTHENTICATE_CFM:
   1342                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1343                {
   1344                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1345                }
   1346                break;
   1347          
   1348              default:
   1349                // Unsupported messages
   1350                break;
   1351            }
   1352          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1353          
   1354          /*********************************************************************
   1355           * @fn      ZDApp_ProcessNetworkJoin()
   1356           *
   1357           * @brief
   1358           *
   1359           *   Save off the Network key information.
   1360           *
   1361           * @param   none
   1362           *
   1363           * @return  none
   1364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1365          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1366          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1367            if ( (devState == DEV_NWK_JOINING) ||
   1368                ((devState == DEV_NWK_ORPHAN)  &&
   1369                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1370            {
   1371              // Result of a Join attempt by this device.
   1372              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7017         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1373              {
   1374                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine18 & 0xFFFF
   1375          
   1376          #if defined ( POWER_SAVING )
   1377                osal_pwrmgr_device( PWRMGR_BATTERY );
   1378          #endif
   1379          
   1380                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1381                {
   1382                  // wait for auth from trust center!!
   1383                  devState = DEV_END_DEVICE_UNAUTH;
   1384          
   1385                  // Start the reset timer for MAX UNAUTH time
   1386                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1387                }
   1388                else
   1389                {
   1390                  if ( ZSTACK_ROUTER_BUILD )
   1391                  {
   1392                    if ( devState == DEV_NWK_ORPHAN
   1393                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1394                    {
   1395                      // Change NIB state to router for restore
   1396                      _NIB.nwkState = NWK_ROUTER;
   1397                    }
   1398                  }
   1399          
   1400                  if ( devState == DEV_NWK_JOINING )
   \                     ??CrossCallReturnLabel_60:
   \   000030   90....       MOV     DPTR,#devState
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6403         XRL     A,#0x3
   \   000036   7003         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1401                  {
   1402                    ZDApp_AnnounceNewAddress();
   \   000038                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000038   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1403                  }
   1404          
   1405                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003B   90....       MOV     DPTR,#devState
   \   00003E   7406         MOV     A,#0x6
   \   000040   F0           MOVX    @DPTR,A
   1406                  if ( ZSTACK_ROUTER_BUILD )
   \   000041   02....       LJMP    ??CrossCallReturnLabel_61 & 0xFFFF
   1407                  {
   1408                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1409                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1410                    {
   1411                      NLME_StartRouterRequest( 0, 0, false );
   1412                    }
   1413                  }
   1414                }
   1415              }
   1416              else
   1417              {
   1418                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000044   90....       MOV     DPTR,#devStartMode
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   7036         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004C   90....       MOV     DPTR,#retryCnt
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   04           INC     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   C3           CLR     C
   \   000053   9403         SUBB    A,#0x3
   \   000055   402B         JC      ??ZDApp_ProcessNetworkJoin_5
   1419                {
   1420                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000057   90....       MOV     DPTR,#_NIB + 33
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F4           CPL     A
   \   00005C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000061   600D         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   000063   90....       MOV     DPTR,#_NIB + 33
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64FE         XRL     A,#0xfe
   \   000069   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   00006E   7006         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1421                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000070   90....       MOV     DPTR,#devStartMode
   \   000073   E4           CLR     A
   \   000074   800B         SJMP    ??ZDApp_ProcessNetworkJoin_10
   1422                  else
   1423                  {
   1424                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000076   90....       MOV     DPTR,#devStartMode
   \   000079   7403         MOV     A,#0x3
   \   00007B   F0           MOVX    @DPTR,A
   1425                    _tmpRejoinState = true;
   \   00007C   90....       MOV     DPTR,#_tmpRejoinState
   \   00007F   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000081   F0           MOVX    @DPTR,A
   1426                  }
   1427                }
   1428          
   1429                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1430                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000082                ; Setup parameters for call to function NLME_GetShortAddr
   \   000082   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000085   8A..         MOV     ?V0 + 0,R2
   \   000087   8B..         MOV     ?V0 + 1,R3
   \   000089   74FE         MOV     A,#-0x2
   \   00008B   65..         XRL     A,?V0 + 0
   \   00008D   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   00008F   74FF         MOV     A,#-0x1
   \   000091   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   000093   700D         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   000095   90....       MOV     DPTR,#_NIB + 20
   \   000098   E0           MOVX    A,@DPTR
   \   000099   64FE         XRL     A,#0xfe
   \   00009B   7003         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000A0   601B         JZ      ??ZDApp_ProcessNetworkJoin_14
   1431                {
   1432                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   74FE         MOV     A,#-0x2
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   04           INC     A
   \   0000AD   F0           MOVX    @DPTR,A
   1433                  // Invalidate nwk addr so end device does not use in its data reqs.
   1434                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000AE   90....       MOV     DPTR,#_NIB + 20
   \   0000B1   14           DEC     A
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   04           INC     A
   \   0000B5   12....       LCALL   ?Subroutine12 & 0xFFFF
   1435                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1436                }
   \                     ??CrossCallReturnLabel_6:
   \   0000B8   7953         MOV     R1,#0x53
   \   0000BA   12....       LCALL   ??ZMacSetReq?relay
   1437          
   1438                // Clear the neighbor Table and network discovery tables.
   1439                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000BD                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000BD   12....       LCALL   ??nwkNeighborInitTable?relay
   1440                NLME_NwkDiscTerm();
   \   0000C0                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000C0   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1441          
   1442                zdoDiscCounter = 1;
   \   0000C3   90....       MOV     DPTR,#zdoDiscCounter
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   F0           MOVX    @DPTR,A
   1443          
   1444          //      ZDApp_NetworkInit( (uint16)
   1445          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1446          //                          (NWK_START_DELAY * 5)) );
   1447                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1448                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000C9                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000C9                ; Setup parameters for call to function osal_rand
   1449              }
   1450            }
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000C9   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000CC   807C         SJMP    ??CrossCallReturnLabel_61
   1451            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6404         XRL     A,#0x4
   \   0000D1   7069         JNZ     ??ZDApp_ProcessNetworkJoin_16
   1452            {
   1453              // results of an orphaning attempt by this device
   1454              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000D3   90....       MOV     DPTR,#nwkStatus
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   7013         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1455              {
   1456                if ( ZG_SECURE_ENABLED )
   1457                {
   1458                  ZDApp_RestoreNwkKey();
   1459                }
   1460          
   1461                devState = DEV_END_DEVICE;
   \   0000D9   12....       LCALL   ?Subroutine8 & 0xFFFF
   1462                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1463                // setup Power Manager Device
   1464          #if defined ( POWER_SAVING )
   1465                osal_pwrmgr_device( PWRMGR_BATTERY );
   1466          #endif
   1467          
   1468                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_67:
   \   0000DC   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000E2   5003         JNC     ??CrossCallReturnLabel_43
   1469                {
   1470                  // The receiver is on, turn network layer polling off.
   1471                  NLME_SetPollRate( 0 );
   \   0000E4                ; Setup parameters for call to function NLME_SetPollRate
   \   0000E4   12....       LCALL   ?Subroutine32 & 0xFFFF
   1472                  NLME_SetQueuedPollRate( 0 );
   1473                  NLME_SetResponseRate( 0 );
   1474                }
   1475          
   1476                if ( ZSTACK_ROUTER_BUILD )
   1477                {
   1478                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1479                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1480                  {
   1481                    NLME_StartRouterRequest( 0, 0, false );
   1482                  }
   1483                }
   1484          
   1485                ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_43:
   \   0000E7                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000E7   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   0000EA   805E         SJMP    ??CrossCallReturnLabel_61
   1486              }
   1487              else
   1488              {
   1489                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000EC   90....       MOV     DPTR,#devStartMode
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   6401         XRL     A,#0x1
   \   0000F2   7040         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1490                {
   1491                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0000F4   90....       MOV     DPTR,#retryCnt
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   04           INC     A
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   C3           CLR     C
   \   0000FB   9404         SUBB    A,#0x4
   \   0000FD   502D         JNC     ??ZDApp_ProcessNetworkJoin_19
   1492                  {
   1493                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0000FF   90....       MOV     DPTR,#_NIB + 33
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F4           CPL     A
   \   000104   7003         JNZ     ??ZDApp_ProcessNetworkJoin_20
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000109   600D         JZ      ??ZDApp_ProcessNetworkJoin_21
   \   00010B   90....       MOV     DPTR,#_NIB + 33
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   64FE         XRL     A,#0xfe
   \   000111   7003         JNZ     ??ZDApp_ProcessNetworkJoin_22
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000116   7007         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1494                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000118   90....       MOV     DPTR,#devStartMode
   \   00011B   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   8015         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1495                    else
   1496                    {
   1497                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00011F   90....       MOV     DPTR,#devStartMode
   \   000122   7403         MOV     A,#0x3
   \   000124   F0           MOVX    @DPTR,A
   1498                      _tmpRejoinState = true;
   \   000125   90....       MOV     DPTR,#_tmpRejoinState
   \   000128   7401         MOV     A,#0x1
   \   00012A   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_24
   1499                    }
   1500                  }
   1501                  // Do a normal join to the network after certain times of rejoin retries
   1502                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00012C   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   6401         XRL     A,#0x1
   \   000132   60E4         JZ      ??ZDApp_ProcessNetworkJoin_21
   1503                  {
   1504                    devStartMode = MODE_JOIN;
   1505                  }
   1506                }
   1507          
   1508                // Clear the neighbor Table and network discovery tables.
   1509                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000134                ; Setup parameters for call to function nwkNeighborInitTable
   \   000134   12....       LCALL   ??nwkNeighborInitTable?relay
   1510                NLME_NwkDiscTerm();
   \   000137                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000137   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1511          
   1512                // setup a retry for later...
   1513                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1514                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00013A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013A                ; Setup parameters for call to function osal_rand
   \   00013A   808D         SJMP    ??ZDApp_ProcessNetworkJoin_15
   1515              }
   1516            }
   1517          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1518            else
   1519            {
   1520              // Assume from address conflict
   1521              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00013C   90....       MOV     DPTR,#_NIB + 96
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   6402         XRL     A,#0x2
   \   000142   7006         JNZ     ??CrossCallReturnLabel_61
   1522              {
   1523                // Notify the network
   1524                ZDApp_AnnounceNewAddress();
   \   000144                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000144   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1525          
   1526                // Notify apps
   1527                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000147                ; Setup parameters for call to function osal_set_event
   \   000147   12....       LCALL   ?Subroutine18 & 0xFFFF
   1528              }
   1529            }
   1530          #endif
   1531          }
   \                     ??CrossCallReturnLabel_61:
   \   00014A                REQUIRE ?Subroutine7
   \   00014A                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
   1532          
   1533          /*********************************************************************
   1534           * @fn      ZDApp_SaveNwkKey()
   1535           *
   1536           * @brief   Save off the Network key information.
   1537           *
   1538           * @param   none
   1539           *
   1540           * @return  none
   1541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7415         MOV     A,#0x15
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1542          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1543          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1544            nwkActiveKeyItems keyItems;
   1545          
   1546            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1547            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1548          
   1549            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1550                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C00         MOV     R4,#0x0
   \   000047   7D00         MOV     R5,#0x0
   \   000049   7A82         MOV     R2,#-0x7e
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   ??osal_nv_write?relay
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1551          
   1552            nwkFrameCounterChanges = 0;
   \   000055   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   F0           MOVX    @DPTR,A
   1553          
   1554            // Clear copy in RAM before return.
   1555            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00005C                ; Setup parameters for call to function osal_memset
   \   00005C   7C15         MOV     R4,#0x15
   \   00005E   FD           MOV     R5,A
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memset?relay
   1556          
   1557          }
   \   00006D   02....       LJMP    ?Subroutine2 & 0xFFFF
   1558          
   1559          /*********************************************************************
   1560           * @fn      ZDApp_ResetNwkKey()
   1561           *
   1562           * @brief   Reset the Network key information in NV.
   1563           *
   1564           * @param   none
   1565           *
   1566           * @return  none
   1567           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1568          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1569          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1570            nwkActiveKeyItems keyItems;
   1571          
   1572            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine33 & 0xFFFF
   1573            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1574                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_45:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A82         MOV     R2,#-0x7e
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??osal_nv_write?relay
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
   1575          }
   \   00002D   02....       LJMP    ?Subroutine6 & 0xFFFF
   1576          
   1577          /*********************************************************************
   1578           * @fn      ZDApp_RestoreNwkKey()
   1579           *
   1580           * @brief
   1581           *
   1582           *   Save off the Network key information.
   1583           *
   1584           * @param   none
   1585           *
   1586           * @return  true if restored from NV, false if not
   1587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1588          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1589          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1590            nwkActiveKeyItems keyItems;
   1591            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1592          
   1593            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1594                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   703F         JNZ     ??ZDApp_RestoreNwkKey_0
   1595            {
   1596              if ( keyItems.frameCounter > 0 )
   \   000036   7411         MOV     A,#0x11
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   45..         ORL     A,?V0 + 1
   \   000044   45..         ORL     A,?V0 + 2
   \   000046   45..         ORL     A,?V0 + 3
   \   000048   6021         JZ      ??ZDApp_RestoreNwkKey_1
   1597              {
   1598                // Restore the key information
   1599                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   00004A   90....       MOV     DPTR,#__Constant_3e8
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?L_MOV_X
   \   000052   7411         MOV     A,#0x11
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?L_ADD_TO_X
   1600                nwkFrameCounter = keyItems.frameCounter;
   \   00005C   7411         MOV     A,#0x11
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?XLOAD_R2345
   \   000064   90....       MOV     DPTR,#nwkFrameCounter
   \   000067   12....       LCALL   ?XSTORE_R2345
   1601                ret = true;
   \   00006A   0E           INC     R6
   1602              }
   1603          
   1604              // Force a save for the first frame counter increment
   1605              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00006B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00006E   74E9         MOV     A,#-0x17
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   7403         MOV     A,#0x3
   \   000074   F0           MOVX    @DPTR,A
   1606            }
   1607            // Clear copy in RAM before return.
   1608            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000075                ; Setup parameters for call to function osal_memset
   \   000075   7C15         MOV     R4,#0x15
   \   000077   7D00         MOV     R5,#0x0
   \   000079   7900         MOV     R1,#0x0
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??osal_memset?relay
   1609          
   1610            return ( ret );
   \   000088   EE           MOV     A,R6
   \   000089   F9           MOV     R1,A
   \   00008A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1611          }
   1612          
   1613          /*********************************************************************
   1614           * @fn      ZDApp_ResetTimerStart
   1615           *
   1616           * @brief   Start the reset timer.
   1617           *
   1618           * @param   delay - delay time(ms) before reset
   1619           *
   1620           * @return  none
   1621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1622          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1623          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1624            // Start the rest timer
   1625            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   1626          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0
   1627          
   1628          /*********************************************************************
   1629           * @fn      ZDApp_ResetTimerCancel
   1630           *
   1631           * @brief   Cancel the reset timer.
   1632           *
   1633           * @param   none
   1634           *
   1635           * @return  none
   1636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1637          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1638          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1639            // Cancel the reset timer
   1640            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1641          }
   \   000010   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1642          
   1643          /*********************************************************************
   1644           * @fn      ZDApp_LeaveCtrlInit
   1645           *
   1646           * @brief   Initialize the leave control logic.
   1647           *
   1648           * @param   none
   1649           *
   1650           * @return  none
   1651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1652          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1653          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1654            uint8 status;
   1655          
   1656          
   1657            // Initialize control state
   1658            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1659          
   1660            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1661                                        sizeof(ZDApp_LeaveCtrl),
   1662                                        &ZDApp_LeaveCtrl );
   1663          
   1664            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   701C         JNZ     ??ZDApp_LeaveCtrlInit_0
   1665            {
   1666              // Read saved control
   1667              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1668                            0,
   1669                            sizeof( uint8 ),
   1670                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   12....       LCALL   ?Subroutine35 & 0xFFFF
   1671            }
   \                     ??CrossCallReturnLabel_48:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1672          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   1673          
   1674          /*********************************************************************
   1675           * @fn      ZDApp_LeaveCtrlSet
   1676           *
   1677           * @brief   Set the leave control logic.
   1678           *
   1679           * @param   ra - reassociate flag
   1680           *
   1681           * @return  none
   1682           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0 + 0,#0x1
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine41_0
   \   000023                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1683          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1684          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1685            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1686          
   1687            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1688            {
   1689              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1690            }
   1691          
   1692            // Write the leave control
   1693            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1694                           0,
   1695                           sizeof( uint8 ),
   1696                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine1 & 0xFFFF
   1697          }
   1698          
   1699          /*********************************************************************
   1700           * @fn      ZDApp_LeaveCtrlReset
   1701           *
   1702           * @brief   Re-initialize the leave control logic.
   1703           *
   1704           * @param   none
   1705           *
   1706           * @return  none
   1707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1708          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1709          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1710            // Set leave control to initialized state
   1711            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1712          
   1713            // Write initialized control
   1714            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1715                          0,
   1716                          sizeof( uint8 ),
   1717                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1718          }
   1719          
   1720          /*********************************************************************
   1721           * @fn      ZDApp_LeaveCtrlBypass
   1722           *
   1723           * @brief   Check if NV restore should be skipped during a leave reset.
   1724           *
   1725           * @param   none
   1726           *
   1727           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1729          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1730          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1731            uint8 bypass;
   1732          
   1733            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1734            {
   1735              bypass = TRUE;
   1736            }
   1737            else
   1738            {
   1739              bypass = FALSE;
   1740            }
   1741          
   1742            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine50_0
   1743          }
   1744          
   1745          /*********************************************************************
   1746           * @fn      ZDApp_LeaveCtrlStartup
   1747           *
   1748           * @brief   Check for startup conditions during a leave reset.
   1749           *
   1750           * @param   state      - devState_t determined by leave control logic
   1751           * @param   startDelay - startup delay
   1752           *
   1753           * @return  none
   1754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1755          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1756          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1757            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1758          
   1759            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1760            {
   1761              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1762              {
   1763                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1764              }
   1765              else
   1766              {
   1767                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1768              }
   1769          
   1770              // Reset leave control logic
   1771              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay
   1772            }
   1773          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine50_0
   1774          
   1775          /*********************************************************************
   1776           * @fn      ZDApp_LeaveReset
   1777           *
   1778           * @brief   Setup a device reset due to a leave indication/confirm.
   1779           *
   1780           * @param   ra - reassociate flag
   1781           *
   1782           * @return  none
   1783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1784          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1785          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1786            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1787          
   1788            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1789          }
   \   00000F   80..         SJMP    ??Subroutine52_0
   1790          
   1791          /*********************************************************************
   1792           * @fn      ZDApp_LeaveUpdate
   1793           *
   1794           * @brief   Update local device data related to leaving device.
   1795           *
   1796           * @param   nwkAddr        - NWK address of leaving device
   1797           * @param   extAddr        - EXT address of leaving device
   1798           * @param   removeChildren - remove children of leaving device
   1799           *
   1800           * @return  none
   1801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1802          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1803                                  uint8 removeChildren )
   1804          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1805            // Remove Apps Key for leaving device
   1806            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   1807          
   1808            // Clear SECURITY bit from Address Manager
   1809            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??ZDSecMgrAddrClear?relay
   1810          
   1811            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000026   603C         JZ      ??ZDApp_LeaveUpdate_0
   1812            {
   1813              zAddrType_t devAddr;
   1814          
   1815              // Remove bind entry and all related data
   1816              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   1817              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V0 + 4,R6
   \   000032   8F..         MOV     ?V0 + 5,R7
   \   000034   75..00       MOV     ?V0 + 6,#0x0
   \   000037   78..         MOV     R0,#?V0 + 4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
   \   000049   12....       LCALL   ??osal_memcpy?relay
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1818          
   1819              pbindRemoveDev(&devAddr);
   \   000051                ; Setup parameters for indirect call
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   AA82         MOV     R2,DPL
   \   000059   AB83         MOV     R3,DPH
   \   00005B   90....       MOV     DPTR,#pbindRemoveDev
   \   00005E   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   1820            }
   \                     ??CrossCallReturnLabel_98:
   \   000061   12....       LCALL   ?CALL_IND
   1821          
   1822            // Remove if child
   1823            if ( ZSTACK_ROUTER_BUILD )
   1824            {
   1825              NLME_RemoveChild( extAddr, removeChildren );
   1826            }
   1827          
   1828            // Remove Routing table related entry
   1829            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000064                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000064   7900         MOV     R1,#0x0
   \   000066   AA..         MOV     R2,?V0 + 0
   \   000068   AB..         MOV     R3,?V0 + 1
   \   00006A   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1830          
   1831            // Remove entry from neighborTable
   1832            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   00006D                ; Setup parameters for call to function nwkNeighborRemove
   \   00006D   90....       MOV     DPTR,#_NIB + 33
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FC           MOV     R4,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FD           MOV     R5,A
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??nwkNeighborRemove?relay
   1833          
   1834            // Schedule to save data to NV
   1835            ZDApp_NwkWriteNVRequest();
   \   00007C                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   00007C   12....       LCALL   ??AddrMgrWriteNVRequest?relay
   1836          }
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   7F07         MOV     R7,#0x7
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
   1837          
   1838          /*********************************************************************
   1839           * @fn      ZDApp_NetworkDiscoveryReq
   1840           *
   1841           * @brief   Request a network discovery.
   1842           *
   1843           * @param  scanChannels -
   1844           * @param  scanDuration -
   1845           *
   1846           * @return  ZStatus_t
   1847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1848          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1849          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1850            // Setup optional filters - tbd
   1851          
   1852            // Request NLME network discovery
   1853            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   000008   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1854          }
   1855          
   1856          /*********************************************************************
   1857           * @fn      ZDApp_JoinReq
   1858           *
   1859           * @brief   Request the device to join a parent in a network.
   1860           *
   1861           * @param   channel -
   1862           * @param   panID -
   1863           *
   1864           * @return  ZStatus_t
   1865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   1867                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1868          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 3,A
   \   00001B   7410         MOV     A,#0x10
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 5,A
   \   000023   7411         MOV     A,#0x11
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   1869            // Sync up the node with the stack profile (In the case where a pro device
   1870            // joins a non-pro network, or verse versa)
   1871            ZDApp_NodeProfileSync( stackProfile);
   \   00002A                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002A   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1872          
   1873            // Request NLME Join Request
   1874            return NLME_JoinRequest(extendedPanID, panID,channel,
   1875                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   1876                                    chosenParent, parentDepth);
   \   00002D                ; Setup parameters for call to function NLME_JoinRequest
   \   00002D   78..         MOV     R0,#?V0 + 5
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   A9..         MOV     R1,?V0 + 4
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??NLME_JoinRequest?relay
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054                REQUIRE ?Subroutine4
   \   000054                ; // Fall through to label ?Subroutine4
   1877          
   1878          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1879          
   1880          /*********************************************************************
   1881           * @fn      ZDApp_DeviceConfigured
   1882           *
   1883           * @brief   Check to see if the local device is configured (i.e., part
   1884           *          of a network).
   1885           *
   1886           * @param   none
   1887           *
   1888           * @return  TRUE if configured. FALSE, otherwise.
   1889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1890          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   1891          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1892            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   1893          
   1894            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   1895                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F   8583..       MOV     ?V0 + 1,DPH
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C14         MOV     R4,#0x14
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A21         MOV     R2,#0x21
   \   000038   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1896          
   1897            // Does the NIB have anything more than default?
   1898            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   02....       LJMP    ?Subroutine7 & 0xFFFF
   1899          }
   1900          
   1901          /*********************************************************************
   1902           * CALLBACK FUNCTIONS
   1903           */
   1904          
   1905          
   1906          /*********************************************************************
   1907           * @fn      ZDApp_SendEventMsg()
   1908           *
   1909           * @brief
   1910           *
   1911           *   Sends a Network Join message
   1912           *
   1913           * @param  cmd - command ID
   1914           * @param  len - length (in bytes) of the buf field
   1915           * @param  buf - buffer for the rest of the message.
   1916           *
   1917           * @return  none
   1918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1919          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1920          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   1921            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1922          }
   \                     ??CrossCallReturnLabel_22:
   \   00000E   02....       LJMP    ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1923          
   1924          /*********************************************************************
   1925           * @fn      ZDApp_SendMsg()
   1926           *
   1927           * @brief   Sends a OSAL message
   1928           *
   1929           * @param  taskID - Where to send the message
   1930           * @param  cmd - command ID
   1931           * @param  len - length (in bytes) of the buf field
   1932           * @param  buf - buffer for the rest of the message.
   1933           *
   1934           * @return  none
   1935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1936          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1937          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   1938            osal_event_hdr_t *msgPtr;
   1939          
   1940            // Send the address to the task
   1941            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   8B..         MOV     ?V0 + 6,R3
   \   000011   AA..         MOV     R2,?V0 + 6
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay
   \   000018   8A..         MOV     ?V0 + 6,R2
   \   00001A   8B..         MOV     ?V0 + 7,R3
   \   00001C   AE..         MOV     R6,?V0 + 6
   \   00001E   AF..         MOV     R7,?V0 + 7
   1942            if ( msgPtr )
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   6031         JZ      ??ZDApp_SendMsg_0
   1943            {
   1944              if ( (len > 0) && (buf != NULL) )
   \   000024   E5..         MOV     A,?V0 + 5
   \   000026   601D         JZ      ??ZDApp_SendMsg_1
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   45..         ORL     A,?V0 + 1
   \   00002C   6017         JZ      ??ZDApp_SendMsg_1
   1945                osal_memcpy( msgPtr, buf, len );
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   75..00       MOV     ?V0 + 2,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   85....       MOV     ?V0 + 0,?V0 + 5
   \   000039   AC..         MOV     R4,?V0 + 0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1946          
   1947              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E5..         MOV     A,?V0 + 4
   \   00004B   F0           MOVX    @DPTR,A
   1948              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   A9..         MOV     R1,?V0 + 3
   \   000052   12....       LCALL   ??osal_msg_send?relay
   1949            }
   1950          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F08         MOV     R7,#0x8
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   1951          
   1952          /*********************************************************************
   1953           * Call Back Functions from NWK  - API
   1954           */
   1955          
   1956          /*********************************************************************
   1957           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1958           *
   1959           * @brief       This function returns a choice of PAN to join.
   1960           *
   1961           * @param       status - return status of the nwk discovery confirm
   1962           *
   1963           * @return      ZStatus_t
   1964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1965          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1966          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1967            osal_event_hdr_t msg;
   1968          
   1969            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   1970            // Send ZDO_MGMT_NWK_DISC_RSP back
   1971          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1972            if ( zdappMgmtNwkDiscReqInProgress )
   1973            {
   1974              zdappMgmtNwkDiscReqInProgress = false;
   1975              ZDO_FinishProcessingMgmtNwkDiscReq();
   1976            }
   1977            else
   1978          #endif
   1979            {
   1980              // Pass the confirm to another task if it registers the callback
   1981              // Otherwise, pass the confirm to ZDApp.
   1982              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000017   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   1983              {
   1984                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   90....       MOV     DPTR,#zdoCBFunc + 5
   \   000026   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   1985              }
   \                     ??CrossCallReturnLabel_92:
   \   000029   12....       LCALL   ?CALL_IND
   \   00002C   8016         SJMP    ??CrossCallReturnLabel_23
   1986              else
   1987              {
   1988                // Otherwise, send scan confirm to ZDApp task to proceed
   1989                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   1990                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000035                ; Setup parameters for call to function ZDApp_SendMsg
   \   000035   04           INC     A
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   7B02         MOV     R3,#0x2
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   12....       LCALL   ?Subroutine22 & 0xFFFF
   1991              }
   1992            }
   1993            return (ZSuccess);
   \                     ??CrossCallReturnLabel_23:
   \   000044   7900         MOV     R1,#0x0
   \   000046   7403         MOV     A,#0x3
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1994          }  // ZDO_NetworkDiscoveryConfirmCB
   1995          
   1996          /*********************************************************************
   1997           * @fn          ZDApp_NwkDescListProcessing
   1998           *
   1999           * @brief       This function process the network discovery result and select
   2000           *              a parent device to join itself.
   2001           *
   2002           * @param       none
   2003           *
   2004           * @return      ZStatus_t
   2005           */
   2006          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2007          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2008          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2009            networkDesc_t *pNwkDesc;
   2010            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2011            uint8 stackProfile;
   2012            uint8 stackProfilePro;
   2013            uint8 selected;
   2014          
   2015            // Count the number of nwk descriptors in the list
   2016            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay
   \   00000B   8A..         MOV     ?V0 + 2,R2
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   AE..         MOV     R6,?V0 + 2
   \   000011   AF..         MOV     R7,?V0 + 3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_89
   2017            while (pNwkDesc)
   2018            {
   2019              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V0 + 0
   2020              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine20 & 0xFFFF
   2021            }
   \                     ??CrossCallReturnLabel_89:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2022          
   2023            // process discovery results
   2024            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0 + 3,#0x0
   2025            selected = FALSE;
   2026          
   2027          
   2028            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   2029            {
   2030              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
   2031              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V0 + 2,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_90
   2032              {
   2033                if ( zgConfigPANID != 0xFFFF )
   2034                {
   2035                  // PAN Id is preconfigured. check if it matches
   2036                  if ( pNwkDesc->panId != zgConfigPANID )
   2037                    continue;
   2038                }
   2039          
   2040                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
   2041                {
   2042                  // If the extended Pan ID is commissioned to a non zero value
   2043                  // Only join the Pan that has match EPID
   2044                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2045                    continue;
   2046          
   2047                }
   2048          
   2049                // check that network is allowing joining
   2050                if ( ZSTACK_ROUTER_BUILD )
   2051                {
   2052                  if ( stackProfilePro == FALSE )
   2053                  {
   2054                    if ( !pNwkDesc->routerCapacity )
   2055                    {
   2056                      continue;
   2057                    }
   2058                  }
   2059                  else
   2060                  {
   2061                    if ( !pNwkDesc->deviceCapacity )
   2062                    {
   2063                      continue;
   2064                    }
   2065                  }
   2066                }
   2067                else if ( ZSTACK_END_DEVICE_BUILD )
   2068                {
   2069                  if ( !pNwkDesc->deviceCapacity )
   2070                  {
   2071                    continue;
   2072                  }
   2073                }
   2074          
   2075                // check version of zigbee protocol
   2076                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2077                  continue;
   2078          
   2079                // check version of stack profile
   2080                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2081                {
   2082                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2083                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2084                  {
   2085                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0 + 3,#0x1
   2086                  }
   2087          
   2088                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V0 + 2
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000057   E5..         MOV     A,?V0 + 2
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V0 + 0
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061   90....       MOV     DPTR,#zgConfigPANID
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F4           CPL     A
   \   000066   7003         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   00006B   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00006D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000070   90....       MOV     DPTR,#zgConfigPANID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   68           XRL     A,R0
   \   000075   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00007A   70D6         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00007C                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007C   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00007E   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000080   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000083   E9           MOV     A,R1
   \   000084   6401         XRL     A,#0x1
   \   000086   7012         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000088                ; Setup parameters for call to function sAddrExtCmp
   \   000088   EE           MOV     A,R6
   \   000089   240B         ADD     A,#0xb
   \   00008B   FC           MOV     R4,A
   \   00008C   EF           MOV     A,R7
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FD           MOV     R5,A
   \   000090   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000092   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000094   12....       LCALL   ??sAddrExtCmp?relay
   \   000097   E9           MOV     A,R1
   \   000098   60B8         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   60AD         JZ      ??ZDApp_NwkDescListProcessing_6
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   90....       MOV     DPTR,#_NIB + 17
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   68           XRL     A,R0
   \   0000B5   709B         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   90....       MOV     DPTR,#zgStackProfile
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   68           XRL     A,R0
   \   0000C8   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6401         XRL     A,#0x1
   \   0000CD   6003         JZ      $+5
   \   0000CF   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6402         XRL     A,#0x2
   \   0000DF   6003         JZ      $+5
   \   0000E1   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000E4   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2089                  {
   2090                    continue;
   2091                  }
   2092                }
   2093          
   2094                break;
   2095              }
   2096          
   2097              if (i < ResultCount)
   2098              {
   2099               selected = TRUE;
   2100                break;
   2101              }
   2102          
   2103              // break if selected or stack profile pro wasn't found
   2104              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000E7   E5..         MOV     A,?V0 + 3
   \   0000E9   600C         JZ      ??ZDApp_NwkDescListProcessing_12
   2105              {
   2106                break;
   2107              }
   2108            }
   \   0000EB   05..         INC     ?V0 + 1
   \   0000ED   E5..         MOV     A,?V0 + 1
   \   0000EF   C3           CLR     C
   \   0000F0   9402         SUBB    A,#0x2
   \   0000F2   5003         JNC     $+5
   \   0000F4   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2109          
   2110            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000F7   E5..         MOV     A,?V0 + 0
   \   0000F9   65..         XRL     A,?V0 + 2
   \   0000FB   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2111            {
   2112              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000FD   7A00         MOV     R2,#0x0
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   8004         SJMP    ??ZDApp_NwkDescListProcessing_13
   2113            }
   2114            else
   2115            {
   2116              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000103   EE           MOV     A,R6
   \   000104   FA           MOV     R2,A
   \   000105   EF           MOV     A,R7
   \   000106   FB           MOV     R3,A
   2117            }
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   000107   02....       LJMP    ?Subroutine4 & 0xFFFF
   2118          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000006                REQUIRE ??Subroutine53_0
   \   000006                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2119          
   2120          /*********************************************************************
   2121           * @fn          ZDO_NetworkFormationConfirmCB
   2122           *
   2123           * @brief       This function reports the results of the request to
   2124           *              initialize a coordinator in a network.
   2125           *
   2126           * @param       Status - Result of NLME_NetworkFormationRequest()
   2127           *
   2128           * @return      none
   2129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2130          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2131          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2132            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2133          
   2134            if ( Status == ZSUCCESS )
   \   00000A   7009         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2135            {
   2136              // LED on shows Coordinator started
   2137              //HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2138          
   2139              // LED off forgets HOLD_AUTO_START
   2140              //HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2141          
   2142          #if defined ( ZBIT )
   2143              SIM_SetColor(0xd0ffd0);
   2144          #endif
   2145          
   2146              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2147              {
   2148                // Began with HOLD_AUTO_START
   2149                devState = DEV_COORD_STARTING;
   \   000012   7408         MOV     A,#0x8
   \   000014   F0           MOVX    @DPTR,A
   2150              }
   2151            }
   2152          #if defined(BLINK_LEDS)
   2153            else
   2154            {
   2155              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2156            }
   2157          #endif
   2158          
   2159            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A02         MOV     R2,#0x2
   \   000017   02....       LJMP    ?Subroutine0 & 0xFFFF
   2160          }
   2161          
   2162          /****************************************************************************
   2163           * @fn          ZDApp_beaconIndProcessing
   2164           *
   2165           * @brief       This function processes the incoming beacon indication.
   2166           *
   2167           *              When another task (MT or App) is registered to process
   2168           *              beacon indication themselves, this function will parse the
   2169           *              beacon payload and pass the beacon descriptor to that task
   2170           *              If no other tasks registered, this function will process
   2171           *              the beacon payload and generate the network descriptor link
   2172           *              list.
   2173           *
   2174           * @param
   2175           *
   2176           * @return      none
   2177           *
   2178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2179          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2180          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2181            // Pass the beacon Indication to another task if it registers the callback
   2182            // Otherwise, process the beacon notification here.
   2183            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2184            {
   2185              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   2186            }
   \                     ??CrossCallReturnLabel_93:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2187            else
   2188            {
   2189              networkDesc_t *pNwkDesc;
   2190              networkDesc_t *pLastNwkDesc;
   2191              uint8 found = false;
   2192          
   2193              // Add the network to the Network Descriptor List
   2194              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2195              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_87:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_91
   2196              while (pNwkDesc)
   2197              {
   2198                if ((pNwkDesc->panId == pBeacon->panID) &&
   2199                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   605F         JZ      ??ZDO_beaconNotifyIndCB_5
   2200                {
   2201                  found = true;
   2202                  break;
   2203                }
   2204                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V0 + 2,R6
   \   000054   8F..         MOV     ?V0 + 3,R7
   2205                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine20 & 0xFFFF
   2206              }
   \                     ??CrossCallReturnLabel_91:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2207          
   2208              // If no existing descriptor found, make a new one and add to the list
   2209              if (found == false)
   2210              {
   2211                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 4,R2
   \   000066   8B..         MOV     ?V0 + 5,R3
   \   000068   AE..         MOV     R6,?V0 + 4
   \   00006A   AF..         MOV     R7,?V0 + 5
   2212                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2213                {
   2214                  // Memory alloc failed, discard this beacon
   2215                  return;
   2216                }
   2217          
   2218                // Clear the network descriptor
   2219                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   ??osal_memset?relay
   2220          
   2221                // Initialize the descriptor
   2222                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   12....       LCALL   ?Subroutine11 & 0xFFFF
   2223                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_5:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   2224          
   2225                // Save new entry into the descriptor list
   2226                if ( !NwkDescList )
   \   000094   90....       MOV     DPTR,#NwkDescList
   \   000097   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00009A   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2227                {
   2228                  NwkDescList = pNwkDesc;
   \   00009C   90....       MOV     DPTR,#NwkDescList
   \   00009F   800B         SJMP    ??CrossCallReturnLabel_112
   2229                }
   2230                else
   2231                {
   2232                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A1   E5..         MOV     A,?V0 + 2
   \   0000A3   2414         ADD     A,#0x14
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   E5..         MOV     A,?V0 + 3
   \   0000A9   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   2233                }
   2234              }
   \                     ??CrossCallReturnLabel_112:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F0           MOVX    @DPTR,A
   2235          
   2236              // Update the descriptor with the incoming beacon
   2237              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B1   85..82       MOV     DPL,?V0 + 0
   \   0000B4   85..83       MOV     DPH,?V0 + 1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   2238              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C7   E5..         MOV     A,?V0 + 0
   \   0000C9   2408         ADD     A,#0x8
   \   0000CB   F8           MOV     R0,A
   \   0000CC   E5..         MOV     A,?V0 + 1
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   F9           MOV     R1,A
   \   0000D1   8882         MOV     DPL,R0
   \   0000D3   8983         MOV     DPH,R1
   \   0000D5   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000D8   12....       LCALL   ?Subroutine14 & 0xFFFF
   2239              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_8:
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   12....       LCALL   ?Subroutine14 & 0xFFFF
   2240              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_9:
   \   0000E5   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E8   8E82         MOV     DPL,R6
   \   0000EA   8F83         MOV     DPH,R7
   \   0000EC   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   2241              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_123:
   \   0000EF   E5..         MOV     A,?V0 + 0
   \   0000F1   240C         ADD     A,#0xc
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   E5..         MOV     A,?V0 + 1
   \   0000F7   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000FA   C0E0         PUSH    A
   \   0000FC   EE           MOV     A,R6
   \   0000FD   2413         ADD     A,#0x13
   \   0000FF   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000102   D0E0         POP     A
   \   000104   F0           MOVX    @DPTR,A
   2242          
   2243              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2244              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000105   8882         MOV     DPL,R0
   \   000107   8983         MOV     DPH,R1
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6401         XRL     A,#0x1
   \   00010C   6011         JZ      ??ZDO_beaconNotifyIndCB_7
   2245              {
   2246                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00010E                ; Setup parameters for call to function sAddrExtCpy
   \   00010E   E5..         MOV     A,?V0 + 0
   \   000110   240D         ADD     A,#0xd
   \   000112   FC           MOV     R4,A
   \   000113   E5..         MOV     A,?V0 + 1
   \   000115   3400         ADDC    A,#0x0
   \   000117   12....       LCALL   ?Subroutine34 & 0xFFFF
   2247              }
   \                     ??CrossCallReturnLabel_71:
   \   00011A   12....       LCALL   ??sAddrExtCpy?relay
   \   00011D   800C         SJMP    ??ZDO_beaconNotifyIndCB_8
   2248              else
   2249              {
   2250                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   00011F                ; Setup parameters for call to function osal_memset
   \   00011F   7C08         MOV     R4,#0x8
   \   000121   7D00         MOV     R5,#0x0
   \   000123   79FF         MOV     R1,#-0x1
   \   000125   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2251              }
   \                     ??CrossCallReturnLabel_69:
   \   000128   12....       LCALL   ??osal_memset?relay
   2252          
   2253              // check if this device is a better choice to join...
   2254              // ...dont bother checking assocPermit flag is doing a rejoin
   2255              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2256                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   00012B   85..82       MOV     DPL,?V0 + 0
   \   00012E   85..83       MOV     DPH,?V0 + 1
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   90....       MOV     DPTR,#gMIN_TREE_LINK_COST
   \   000140   E0           MOVX    A,@DPTR
   \   000141   C3           CLR     C
   \   000142   98           SUBB    A,R0
   \   000143   4003         JC      $+5
   \   000145   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000148   85..82       MOV     DPL,?V0 + 0
   \   00014B   85..83       MOV     DPH,?V0 + 1
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   6401         XRL     A,#0x1
   \   000156   6009         JZ      ??ZDO_beaconNotifyIndCB_9
   \   000158   90....       MOV     DPTR,#_tmpRejoinState
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   7003         JNZ     $+5
   \   00015E   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2257              {
   2258                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000161   7900         MOV     R1,#0x0
   2259                uint8 capacity = FALSE;
   2260          
   2261                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000163   90....       MOV     DPTR,#_NIB + 96
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6402         XRL     A,#0x2
   \   000169   7030         JNZ     ??ZDO_beaconNotifyIndCB_10
   2262                {
   2263                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2264                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2265                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2266                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   C3           CLR     C
   \   00017A   98           SUBB    A,R0
   \   00017B   500D         JNC     ??ZDO_beaconNotifyIndCB_11
   \   00017D   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000180   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000183   C3           CLR     C
   \   000184   9414         SUBB    A,#0x14
   \   000186   402D         JC      ??ZDO_beaconNotifyIndCB_12
   \   000188   802C         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00018A   8E82         MOV     DPL,R6
   \   00018C   8F83         MOV     DPH,R7
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   68           XRL     A,R0
   \   000199   701B         JNZ     ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F8           MOV     R0,A
   \   0001AB   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001AE   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001B1   C3           CLR     C
   \   0001B2   98           SUBB    A,R0
   \   0001B3   5001         JNC     ??ZDO_beaconNotifyIndCB_13
   2267                  {
   2268                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001B5   09           INC     R1
   2269                  }
   2270                }
   2271                else
   2272                {
   2273                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2274                  {
   2275                    selected = TRUE;
   2276                  }
   2277                }
   2278          
   2279                if ( ZSTACK_ROUTER_BUILD )
   2280                {
   2281                  capacity = pBeacon->routerCapacity;
   2282                }
   2283                else if ( ZSTACK_END_DEVICE_BUILD )
   2284                {
   2285                  capacity = pBeacon->deviceCapacity;
   2286                }
   2287          
   2288                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001B6   85..82       MOV     DPL,?V0 + 0
   \   0001B9   85..83       MOV     DPH,?V0 + 1
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   6042         JZ      ??ZDO_beaconNotifyIndCB_14
   \   0001C6   E9           MOV     A,R1
   \   0001C7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C9   5032         JNC     ??ZDO_beaconNotifyIndCB_15
   2289                {
   2290                  // this is the new chosen router for joining...
   2291                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001CB   85..82       MOV     DPL,?V0 + 0
   \   0001CE   85..83       MOV     DPH,?V0 + 1
   \   0001D1   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001D4   8E82         MOV     DPL,R6
   \   0001D6   8F83         MOV     DPH,R7
   \   0001D8   A3           INC     DPTR
   \   0001D9   A3           INC     DPTR
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   E8           MOV     A,R0
   \   0001E0   F0           MOVX    @DPTR,A
   \   0001E1   A3           INC     DPTR
   \   0001E2   E9           MOV     A,R1
   \   0001E3   12....       LCALL   ?Subroutine9 & 0xFFFF
   2292                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_0:
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001EC   F0           MOVX    @DPTR,A
   2293                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001ED   12....       LCALL   ?Subroutine36 & 0xFFFF
   2294                }
   \                     ??CrossCallReturnLabel_52:
   \   0001F0   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0001F3   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001F6   A3           INC     DPTR
   \   0001F7   12....       LCALL   ?Subroutine9 & 0xFFFF
   2295          
   2296                if ( pBeacon->deviceCapacity )
   \                     ??CrossCallReturnLabel_1:
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   600B         JZ      ??ZDO_beaconNotifyIndCB_14
   2297                  pNwkDesc->deviceCapacity = 1;
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001FD   8E82         MOV     DPL,R6
   \   0001FF   8F83         MOV     DPH,R7
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   7401         MOV     A,#0x1
   \   000207   F0           MOVX    @DPTR,A
   2298          
   2299                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000208   85..82       MOV     DPL,?V0 + 0
   \   00020B   85..83       MOV     DPH,?V0 + 1
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2300                  pNwkDesc->routerCapacity = 1;
   \   000217   8E82         MOV     DPL,R6
   \   000219   8F83         MOV     DPH,R7
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   7401         MOV     A,#0x1
   \   000220   F0           MOVX    @DPTR,A
   2301              }
   2302            }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000221   02....       LJMP    ?Subroutine4 & 0xFFFF
   2303          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   2304          
   2305          /*********************************************************************
   2306           * @fn          ZDO_StartRouterConfirmCB
   2307           *
   2308           * @brief       This function reports the results of the request to
   2309           *              start functioning as a router in a network.
   2310           *
   2311           * @param       Status - Result of NLME_StartRouterRequest()
   2312           *
   2313           * @return      none
   2314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2315          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2316          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2317            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2318          
   2319            if ( Status == ZSUCCESS )
   \   00000A   7009         JNZ     ??ZDO_StartRouterConfirmCB_0
   2320            {
   2321              // LED on shows Router started
   2322              //HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2323              // LED off forgets HOLD_AUTO_START
   2324            ///  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2325              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??ZDO_StartRouterConfirmCB_0
   2326              {
   2327                // Began with HOLD_AUTO_START
   2328                devState = DEV_END_DEVICE;
   \   000012   7406         MOV     A,#0x6
   \   000014   F0           MOVX    @DPTR,A
   2329              }
   2330            }
   2331          #if defined(BLINK_LEDS)
   2332            else
   2333            {
   2334              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2335            }
   2336          #endif
   2337          
   2338            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A20         MOV     R2,#0x20
   \   000017   02....       LJMP    ?Subroutine0 & 0xFFFF
   2339          }
   2340          
   2341          /*********************************************************************
   2342           * @fn          ZDO_JoinConfirmCB
   2343           *
   2344           * @brief       This function allows the next hight layer to be notified
   2345           *              of the results of its request to join itself or another
   2346           *              device to a network.
   2347           *
   2348           * @param       Status - Result of NLME_JoinRequest()
   2349           *
   2350           * @return      none
   2351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2352          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2353          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2354            (void)PanId;  // remove if this parameter is used.
   2355          
   2356            nwkStatus = (byte)Status;
   \   00000C   90....       MOV     DPTR,#nwkStatus
   \   00000F   F0           MOVX    @DPTR,A
   2357          
   2358            if ( Status == ZSUCCESS )
   \   000010   700C         JNZ     ??ZDO_JoinConfirmCB_0
   2359            {
   2360              // LED on shows device joined
   2361              //HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2362              // LED off forgets HOLD_AUTO_START
   2363            //  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2364              if ( (devState == DEV_HOLD) )
   \   000012   90....       MOV     DPTR,#devState
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7003         JNZ     ??ZDO_JoinConfirmCB_1
   2365              {
   2366                // Began with HOLD_AUTO_START
   2367                devState = DEV_NWK_JOINING;
   \   000018   7403         MOV     A,#0x3
   \   00001A   F0           MOVX    @DPTR,A
   2368              }
   2369          
   2370              if ( !ZG_SECURE_ENABLED )
   2371              {
   2372                // Notify to save info into NV
   2373                ZDApp_NVUpdate();
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001B   12....       LCALL   ??ZDApp_NVUpdate?relay
   2374              }
   2375            }
   2376            else
   2377            {
   2378          #if defined(BLINK_LEDS)
   2379              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2380          #endif
   2381            }
   2382          
   2383            // Pass the join confirm to higher layer if callback registered
   2384            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000024   6033         JZ      ??ZDO_JoinConfirmCB_2
   2385            {
   2386              zdoJoinCnf_t joinCnf;
   2387          
   2388              joinCnf.status = Status;
   \   000026   EE           MOV     A,R6
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   F0           MOVX    @DPTR,A
   2389              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   00002E   90....       MOV     DPTR,#_NIB + 20
   \   000031   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   2390              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   00003E   90....       MOV     DPTR,#_NIB + 23
   \   000041   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   2391          
   2392              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2393            }
   \                     ??CrossCallReturnLabel_75:
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000050   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000053   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000056   12....       LCALL   ?CALL_IND
   2394          
   2395            // Notify ZDApp
   2396            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_2:
   \   000059                ; Setup parameters for call to function ZDApp_SendMsg
   \   000059   7C00         MOV     R4,#0x0
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7B02         MOV     R3,#0x2
   \   00005F   7A02         MOV     R2,#0x2
   \   000061   12....       LCALL   ?Subroutine22 & 0xFFFF
   2397          
   2398          }
   \                     ??CrossCallReturnLabel_24:
   \   000064                REQUIRE ?Subroutine5
   \   000064                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2399          
   2400          /*********************************************************************
   2401           * @fn          ZDO_AddrChangeIndicationCB
   2402           *
   2403           * @brief       This function notifies the application that this
   2404           *              device's address has changed.  Could happen in
   2405           *              a network with stochastic addressing (PRO).
   2406           *
   2407           * @param       newAddr - the new address
   2408           *
   2409           * @return      none
   2410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2411          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2412          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2413            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2414            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2415          
   2416            // Notify to save info into NV
   2417            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_88:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   ??ZDApp_NVUpdate?relay
   2418          
   2419            // Notify the applications
   2420            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000015   8033         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2421          
   2422            while (pItem != NULL)
   2423            {
   2424              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000017   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6026         JZ      ??ZDO_AddrChangeIndicationCB_2
   2425              {
   2426                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00001D                ; Setup parameters for call to function osal_msg_allocate
   \   00001D   7A04         MOV     R2,#0x4
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??osal_msg_allocate?relay
   2427                if (pZDOAddrChangeMsg != NULL)
   \   000024   EA           MOV     A,R2
   \   000025   4B           ORL     A,R3
   \   000026   601B         JZ      ??ZDO_AddrChangeIndicationCB_2
   2428                {
   2429                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   74D6         MOV     A,#-0x2a
   \   00002E   F0           MOVX    @DPTR,A
   2430                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   F0           MOVX    @DPTR,A
   2431                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   000038                ; Setup parameters for call to function osal_msg_send
   \   000038   12....       LCALL   ?Subroutine16 & 0xFFFF
   2432                }
   2433              }
   \                     ??CrossCallReturnLabel_102:
   \   00003B   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??osal_msg_send?relay
   2434              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000043   12....       LCALL   ?Subroutine17 & 0xFFFF
   2435            }
   \                     ??CrossCallReturnLabel_79:
   \   000046   E8           MOV     A,R0
   \   000047   FE           MOV     R6,A
   \   000048   E9           MOV     A,R1
   \   000049   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00004A   EE           MOV     A,R6
   \   00004B   4F           ORL     A,R7
   \   00004C   70C9         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2436          
   2437            // Send out a device announce
   2438            ZDApp_AnnounceNewAddress();
   \   00004E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004E   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2439          }
   \   000051   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine56_0
   \   000005                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0
   2440          
   2441          /*********************************************************************
   2442           * @fn          ZDO_JoinIndicationCB
   2443           *
   2444           * @brief       This function allows the next higher layer of a
   2445           *              coordinator to be notified of a remote join request.
   2446           *
   2447           * @param       ShortAddress - 16-bit address
   2448           * @param       ExtendedAddress - IEEE (64-bit) address
   2449           * @param       CapabilityFlags - Association Capability Flags
   2450           * @param       type - of joining -
   2451           *                          NWK_ASSOC_JOIN
   2452           *                          NWK_ASSOC_REJOIN_UNSECURE
   2453           *                          NWK_ASSOC_REJOIN_SECURE
   2454           *
   2455           * @return      ZStatus_t
   2456           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2457          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2458                                          uint8 CapabilityFlags, uint8 type)
   2459          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2460            (void)ShortAddress;
   2461            (void)ExtendedAddress;
   2462          #if ZDO_NV_SAVE_RFDs
   2463            (void)CapabilityFlags;
   2464          
   2465          #else  // if !ZDO_NV_SAVE_RFDs
   2466            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2467          #endif
   2468            {
   2469              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   000004                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000004   12....       LCALL   ??ZDApp_NVUpdate?relay
   2470            }
   2471          
   2472            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2473            {
   2474              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2475              {
   2476                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2477              }
   2478            }
   2479          
   2480            return ZSuccess;
   \   000007   7900         MOV     R1,#0x0
   \   000009   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2481          }
   2482          
   2483          /*********************************************************************
   2484           * @fn          ZDO_ConcentratorIndicationCB
   2485           *
   2486           * @brief       This function allows the next higher layer of a
   2487           *              device to be notified of existence of the concentrator.
   2488           *
   2489           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2490           * @param       extAddr - pointer to extended Address
   2491           *                        NULL if not available
   2492           * @param       pktCost - PktCost from RREQ
   2493           *
   2494           * @return      void
   2495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2496          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2497          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2498            zdoConcentratorInd_t conInd;
   2499          
   2500            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2501            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_126:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2502            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2503          
   2504            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000024   6013         JZ      ??ZDO_ConcentratorIndicationCB_0
   2505            {
   2506              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 3
   \   000033   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   2507            }
   \                     ??CrossCallReturnLabel_94:
   \   000036   12....       LCALL   ?CALL_IND
   2508          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000039   02....       LJMP    ?Subroutine5 & 0xFFFF
   2509          
   2510          /*********************************************************************
   2511           * @fn          ZDO_LeaveCnf
   2512           *
   2513           * @brief       This function allows the next higher layer to be
   2514           *              notified of the results of its request for this or
   2515           *              a child device to leave the network.
   2516           *
   2517           * @param       cnf - NLME_LeaveCnf_t
   2518           *
   2519           * @return      none
   2520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2521          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2522          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2523            // Check for this device
   2524            if ( osal_ExtAddrEqual( cnf->extAddr,
   2525                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCmp?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   701F         JNZ     ??CrossCallReturnLabel_38
   2526            {
   2527              // Pass the leave confirm to higher layer if callback registered
   2528              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2529                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000020   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000023   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000026   6011         JZ      ??ZDO_LeaveCnf_0
   \   000028                ; Setup parameters for indirect call
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00002F   12....       LCALL   ?CALL_IND
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V0 + 1
   \   000037   7006         JNZ     ??CrossCallReturnLabel_38
   2530              {
   2531                // Prepare to leave with reset
   2532                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_0:
   \   000039                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000039   EE           MOV     A,R6
   \   00003A   240B         ADD     A,#0xb
   \   00003C   12....       LCALL   ?Subroutine29 & 0xFFFF
   2533              }
   2534            }
   2535            else if ( ZSTACK_ROUTER_BUILD )
   2536            {
   2537              // Remove device address(optionally descendents) from data
   2538              ZDApp_LeaveUpdate( cnf->dstAddr,
   2539                                 cnf->extAddr,
   2540                                 cnf->removeChildren );
   2541            }
   2542          }
   \                     ??CrossCallReturnLabel_38:
   \   00003F   02....       LJMP    ??Subroutine42_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000008   22           RET
   2543          
   2544          /*********************************************************************
   2545           * @fn          ZDO_LeaveInd
   2546           *
   2547           * @brief       This function allows the next higher layer of a
   2548           *              device to be notified of a remote leave request or
   2549           *              indication.
   2550           *
   2551           * @param       ind - NLME_LeaveInd_t
   2552           *
   2553           * @return      none
   2554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2555          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2556          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2557            uint8 leave;
   2558          
   2559          
   2560            // Parent is requesting the leave - NWK layer filters out illegal
   2561            // requests
   2562            if ( ind->request == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   7008         JNZ     ??ZDO_LeaveInd_0
   2563            {
   2564              // Notify network of leave
   2565              if ( ZSTACK_ROUTER_BUILD )
   2566              {
   2567                NLME_LeaveRsp_t rsp;
   2568                rsp.rejoin         = ind->rejoin;
   2569                rsp.removeChildren = ind->removeChildren;
   2570                NLME_LeaveRsp( &rsp );
   2571              }
   2572          
   2573              // Prepare to leave with reset
   2574              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   00001C                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00001C   EE           MOV     A,R6
   \   00001D   240C         ADD     A,#0xc
   \   00001F   12....       LCALL   ?Subroutine29 & 0xFFFF
   2575            }
   \                     ??CrossCallReturnLabel_39:
   \   000022   803F         SJMP    ??ZDO_LeaveInd_2
   2576            else
   2577            {
   2578              leave = FALSE;
   2579          
   2580              // Check if this device needs to leave as a child or descendent
   2581              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000024                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000024   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   A8..         MOV     R0,?V0 + 0
   \   00002D   A9..         MOV     R1,?V0 + 1
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   68           XRL     A,R0
   \   000035   7003         JNZ     ??ZDO_LeaveInd_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_3:
   \   00003A   7011         JNZ     ??ZDO_LeaveInd_4
   2582              {
   2583                if ( ( ind->removeChildren == TRUE               ) ||
   2584                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2585                       NODETYPE_DEVICE                           )    )
   \   00003C   12....       LCALL   ?Subroutine31 & 0xFFFF
   2586                {
   2587                  leave = TRUE;
   2588                }
   2589              }
   \                     ??CrossCallReturnLabel_109:
   \   00003F   6401         XRL     A,#0x1
   \   000041   60D9         JZ      ??ZDO_LeaveInd_1
   \   000043   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000046   E0           MOVX    A,@DPTR
   \   000047   5407         ANL     A,#0x7
   \   000049   6402         XRL     A,#0x2
   \   00004B   60CF         JZ      ??ZDO_LeaveInd_1
   2590              else if ( ind->removeChildren == TRUE )
   2591              {
   2592                // Check NWK address allocation algorithm
   2593                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2594              }
   2595          
   2596              if ( leave == TRUE )
   2597              {
   2598                // Prepare to leave with reset
   2599                ZDApp_LeaveReset( ind->rejoin );
   2600              }
   2601              else
   2602              {
   2603                // Remove device address(optionally descendents) from data
   2604                ZDApp_LeaveUpdate( ind->srcAddr,
   2605                                   ind->extAddr,
   2606                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   00004D                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00004D   12....       LCALL   ?Subroutine31 & 0xFFFF
   2607              }
   2608            }
   \                     ??CrossCallReturnLabel_110:
   \   000050   F9           MOV     R1,A
   \   000051   EE           MOV     A,R6
   \   000052   2402         ADD     A,#0x2
   \   000054   FC           MOV     R4,A
   \   000055   EF           MOV     A,R7
   \   000056   3400         ADDC    A,#0x0
   \   000058   FD           MOV     R5,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000060   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2609          
   2610            // Pass the leave indication to higher layer if callback registered.
   2611            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   000063   90....       MOV     DPTR,#zdoCBFunc + 12
   \   000066   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000069   600A         JZ      ??ZDO_LeaveInd_5
   2612            {
   2613              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   00006B                ; Setup parameters for indirect call
   \   00006B   EE           MOV     A,R6
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   2614            }
   \                     ??CrossCallReturnLabel_96:
   \   000072   12....       LCALL   ?CALL_IND
   2615          }
   \                     ??ZDO_LeaveInd_5:
   \   000075   02....       LJMP    ??Subroutine42_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0
   2616          
   2617          /*********************************************************************
   2618           * @fn          ZDO_SyncIndicationCB
   2619           *
   2620           * @brief       This function allows the next higher layer of a
   2621           *              coordinator to be notified of a loss of synchronization
   2622           *                          with the parent/child device.
   2623           *
   2624           * @param       type: 0 - child; 1 - parent
   2625           *
   2626           *
   2627           * @return      none
   2628           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2629          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2630          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2631            (void)shortAddr;  // Remove this line if this parameter is used.
   2632          
   2633            if ( ZSTACK_END_DEVICE_BUILD
   2634              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2635            {
   2636              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   700E         JNZ     ??CrossCallReturnLabel_25
   2637              {
   2638                // We lost contact with our parent.  Clear the neighbor Table.
   2639                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   ??nwkNeighborInitTable?relay
   2640          
   2641                // Start the rejoin process.
   2642                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7B02         MOV     R3,#0x2
   \   000015   7A03         MOV     R2,#0x3
   \   000017   12....       LCALL   ?Subroutine22 & 0xFFFF
   2643              }
   2644            }
   2645          }
   \                     ??CrossCallReturnLabel_25:
   \   00001A   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2646          
   2647          /*********************************************************************
   2648           * @fn          ZDO_ManytoOneFailureIndicationCB
   2649           *
   2650           * @brief       This function allows the next higher layer of a
   2651           *              concentrator to be notified of a many-to-one route
   2652           *              failure.
   2653           *
   2654           * @param       none
   2655           *
   2656           *
   2657           * @return      none
   2658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2659          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2660          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2661            // By default, the concentrator automatically redo many-to-one route
   2662            // discovery to update all many-to-one routes in the network
   2663            // If you want anything processing other than the default,
   2664            // please replace the following code.
   2665          
   2666            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2667          }
   \   000007   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2668          
   2669          /*********************************************************************
   2670           * @fn          ZDO_PollConfirmCB
   2671           *
   2672           * @brief       This function allows the next higher layer to be
   2673           *              notified of a Poll Confirm.
   2674           *
   2675           * @param       none
   2676           *
   2677           * @return      none
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2680          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2681            (void)status;  // Remove this line if this parameter is used.
   2682            return;
   \   000000   02....       LJMP    ?BRET
   2683          }
   2684          
   2685          /******************************************************************************
   2686           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2687           *
   2688           * @brief       Stub routine implemented by NHLE. NHLE should call
   2689           *              <AddrMgrWriteNV> when appropriate.
   2690           *
   2691           * @param       none
   2692           *
   2693           * @return      none
   2694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2695          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2696          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2697          #if defined ( NV_RESTORE )
   2698            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000008   7003         JNZ     ??AddrMgrWriteNVRequest_0
   2699            {
   2700              // Trigger to save info into NV
   2701              ZDApp_NVUpdate();
   \   00000A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000A   12....       LCALL   ??ZDApp_NVUpdate?relay
   2702            }
   2703          #endif
   2704          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   00000D   02....       LJMP    ??Subroutine42_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B02         MOV     R3,#0x2
   \   000004   90....       MOV     DPTR,#ZDAppTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??osal_get_timeoutEx?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   22           RET
   2705          
   2706          /*********************************************************************
   2707           * Call Back Functions from Security  - API
   2708           */
   2709          
   2710           /*********************************************************************
   2711           * @fn          ZDO_UpdateDeviceIndication
   2712           *
   2713           * @brief       This function notifies the "Trust Center" of a
   2714           *              network when a device joins or leaves the network.
   2715           *
   2716           * @param       extAddr - pointer to 64 bit address of new device
   2717           * @param       status  - 0 if a new device joined securely
   2718           *                      - 1 if a new device joined un-securely
   2719           *                      - 2 if a device left the network
   2720           *
   2721           * @return      true if newly joined device should be allowed to
   2722           *                                              remain on network
   2723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2724          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2725          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2726            // can implement a network access policy based on the
   2727            // IEEE address of newly joining devices...
   2728            (void)extAddr;
   2729            (void)status;
   2730          
   2731            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2732          }
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDApp_InMsgCB
   2736           *
   2737           * @brief       This function is called to pass up any message that is
   2738           *              not yet supported.  This allows for the developer to
   2739           *              support features themselves..
   2740           *
   2741           * @return      none
   2742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2743          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2744          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2745            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   5480         ANL     A,#0x80
   \   000010   704A         JNZ     ??ZDApp_InMsgCB_0
   2746            {
   2747              // Handle the response message
   2748            }
   2749            else
   2750            {
   2751              // Handle the request message by sending a generic "not supported".
   2752              // Device Announce doesn't have a response.
   2753              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000015   7045         JNZ     ??ZDApp_InMsgCB_0
   \   000017   EE           MOV     A,R6
   \   000018   240C         ADD     A,#0xc
   \   00001A   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001D   6413         XRL     A,#0x13
   \   00001F   7002         JNZ     ??ZDApp_InMsgCB_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000023   6037         JZ      ??ZDApp_InMsgCB_0
   2754              {
   2755                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2756                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_GenericRsp
   \   000025   12....       LCALL   ?Subroutine30 & 0xFFFF
   2757              }
   2758            }
   \                     ??CrossCallReturnLabel_41:
   \   000028   4480         ORL     A,#0x80
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   E4           CLR     A
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   F5..         MOV     ?V0 + 1,A
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   EE           MOV     A,R6
   \   00003C   240E         ADD     A,#0xe
   \   00003E   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000041   FD           MOV     R5,A
   \   000042   7C84         MOV     R4,#-0x7c
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   0A           INC     R2
   \   000048   0A           INC     R2
   \   000049   EF           MOV     A,R7
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   EE           MOV     A,R6
   \   00004E   240F         ADD     A,#0xf
   \   000050   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   2759          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005C   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   2760          
   2761          
   2762          /*********************************************************************
   2763           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2764           *
   2765           * @brief   Changes the Match Descriptor Response permission.
   2766           *
   2767           * @param   endpoint - endpoint to allow responses
   2768           * @param   action - true to allow responses, false to not
   2769           *
   2770           * @return  none
   2771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2772          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2773          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2774            // Store the action
   2775            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay
   2776          }
   \   000008   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2777          
   2778          /*********************************************************************
   2779           * @fn      ZDApp_NetworkInit()
   2780           *
   2781           * @brief   Used to start the network joining process
   2782           *
   2783           * @param   delay - mSec delay to wait before starting
   2784           *
   2785           * @return  none
   2786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2787          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2788          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2789            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600D         JZ      ??ZDApp_NetworkInit_0
   2790            {
   2791              // Wait awhile before starting the device
   2792              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   FC           MOV     R4,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ?Subroutine25 & 0xFFFF
   2793            }
   \                     ??CrossCallReturnLabel_85:
   \   000013   8005         SJMP    ??CrossCallReturnLabel_65
   2794            else
   2795            {
   2796              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A01         MOV     R2,#0x1
   \   000017   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2797            }
   2798          }
   \                     ??CrossCallReturnLabel_65:
   \   00001A   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2799          
   2800          /*********************************************************************
   2801           * @fn      ZDApp_NwkStateUpdateCB()
   2802           *
   2803           * @brief   This function notifies that this device's network
   2804           *          state info has been changed.
   2805           *
   2806           * @param   none
   2807           *
   2808           * @return  none
   2809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2810          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2811          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2812            // Notify to save info into NV
   2813            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000008   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   2814            {
   2815              // Trigger to save info into NV
   2816              ZDApp_NVUpdate();
   \   00000A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000A   12....       LCALL   ??ZDApp_NVUpdate?relay
   2817            }
   2818          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   00000D   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   2819          
   2820          /*********************************************************************
   2821           * @fn      ZDApp_NodeProfileSync()
   2822           *
   2823           * @brief   Sync node with stack profile.
   2824           *
   2825           * @param   stackProfile - stack profile of the network to join
   2826           *
   2827           * @return  none
   2828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2829          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   2830          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2831            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   2832            {
   2833              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   2834              {
   2835                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   2836                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   2837                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2838              }
   2839            }
   2840          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2841          
   2842          /*********************************************************************
   2843           * @fn      ZDApp_StartJoiningCycle()
   2844           *
   2845           * @brief   Starts the joining cycle of a device.  This will only
   2846           *          continue an already started (or stopped) joining cycle.
   2847           *
   2848           * @param   none
   2849           *
   2850           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2852          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2853          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2854            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2855            {
   2856              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   2857              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2858          
   2859              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2860            }
   2861            else
   2862              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2863          }
   2864          
   2865          /*********************************************************************
   2866           * @fn      ZDApp_StopJoiningCycle()
   2867           *
   2868           * @brief   Stops the joining or rejoining process of a device.
   2869           *
   2870           * @param   none
   2871           *
   2872           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2874          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2875          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2876            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2877            {
   2878              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   2879              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2880            }
   2881            else
   2882              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2883          }
   2884          
   2885          /*********************************************************************
   2886           * @fn      ZDApp_AnnounceNewAddress()
   2887           *
   2888           * @brief   Send Device Announce and hold all transmissions for
   2889           *          new address timeout.
   2890           *
   2891           * @param   none
   2892           *
   2893           * @return  none
   2894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2895          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2896          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2897          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2898            // Turn off data request hold
   2899            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   2900          #endif
   2901          
   2902            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2903                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2904          
   2905          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2906            // Setup the timeout
   2907            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   2908          #endif
   2909          }
   \   000038   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   2910          
   2911          /*********************************************************************
   2912           * @fn          ZDApp_NVUpdate
   2913           *
   2914           * @brief       Set the NV Update Timer.
   2915           *
   2916           * @param       none
   2917           *
   2918           * @return      none
   2919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2920          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2921          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2922          #if defined ( NV_RESTORE )
   2923            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CBC         MOV     R4,#-0x44
   \   000006   7D02         MOV     R5,#0x2
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7B02         MOV     R3,#0x2
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2924          #endif
   2925          }
   2926          
   2927          /*********************************************************************
   2928           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2929           *
   2930           * @brief   Returns a PAN ID for the network layer to use during
   2931           *          a coordinator start and there is another network with
   2932           *          the intended PANID.
   2933           *
   2934           * @param   panid - the intended PAN ID
   2935           *
   2936           * @return  PANID to try
   2937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2938          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2939          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2940            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   02....       LJMP    ?BRET
   2941          }
   2942          
   2943          /*********************************************************************
   2944           * @fn          ZDO_SrcRtgIndCB
   2945           *
   2946           * @brief       This function notifies the ZDO available src route record received.
   2947           *
   2948           * @param       srcAddr - source address of the source route
   2949           * @param       relayCnt - number of devices in the relay list
   2950           * @param       relayList - relay list of the source route
   2951           *
   2952           * @return      none
   2953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2954          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2955          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2956            zdoSrcRtg_t srcRtg;
   2957          
   2958            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2959            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_127:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   2960            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   2961          
   2962            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000024   6013         JZ      ??ZDO_SrcRtgIndCB_0
   2963            {
   2964              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 1
   \   000033   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   2965            }
   \                     ??CrossCallReturnLabel_97:
   \   000036   12....       LCALL   ?CALL_IND
   2966          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000039   02....       LJMP    ?Subroutine5 & 0xFFFF
   2967          
   2968          /*********************************************************************
   2969           * @fn          ZDApp_InitZdoCBFunc
   2970           *
   2971           * @brief       Call this function to initialize zdoCBFunc[]
   2972           *
   2973           * @param       none
   2974           *
   2975           * @return      none
   2976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   2978          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2979            uint8 i;
   2980          
   2981            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   2982            {
   2983              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   12....       LCALL   ?Subroutine28 & 0xFFFF
   2984            }
   \                     ??CrossCallReturnLabel_36:
   \   000009   0A           INC     R2
   \   00000A   EA           MOV     A,R2
   \   00000B   C3           CLR     C
   \   00000C   9407         SUBB    A,#0x7
   \   00000E   40F6         JC      ??ZDApp_InitZdoCBFunc_0
   2985          }
   \   000010   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#zdoCBFunc & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   2986          
   2987          /*********************************************************************
   2988           * @fn          ZDO_RegisterForZdoCB
   2989           *
   2990           * @brief       Call this function to register the higher layer (for
   2991           *              example, the Application layer or MT layer) with ZDO
   2992           *              callbacks to get notified of some ZDO indication like
   2993           *              existence of a concentrator or receipt of a source
   2994           *              route record.
   2995           *
   2996           * @param       indID - ZDO Indication ID
   2997           * @param       pFn   - Callback function pointer
   2998           *
   2999           * @return      ZSuccess - successful, ZInvalidParameter if not
   3000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3001          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3002          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3003            // Check the range of the indication ID
   3004            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3005            {
   3006              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00000F   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   3007              return ZSuccess;
   \                     ??CrossCallReturnLabel_124:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3008            }
   3009          
   3010            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3011          }
   3012          
   3013          /*********************************************************************
   3014           * @fn          ZDO_DeregisterForZdoCB
   3015           *
   3016           * @brief       Call this function to de-register the higher layer (for
   3017           *              example, the Application layer or MT layer) with ZDO
   3018           *              callbacks to get notified of some ZDO indication like
   3019           *              existence of a concentrator or receipt of a source
   3020           *              route record.
   3021           *
   3022           * @param       indID - ZDO Indication ID
   3023           *
   3024           * @return      ZSuccess - successful, ZInvalidParameter if not
   3025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3026          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3027          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3028            // Check the range of the indication ID
   3029            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   5006         JNC     ??ZDO_DeregisterForZdoCB_0
   3030            {
   3031              zdoCBFunc[indID] = NULL;
   \   00000B   12....       LCALL   ?Subroutine28 & 0xFFFF
   3032              return ZSuccess;
   \                     ??CrossCallReturnLabel_37:
   \   00000E   F9           MOV     R1,A
   \   00000F   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3033            }
   3034          
   3035            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000013   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3036          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB
   3037          
   3038          /*********************************************************************
   3039          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0     34
       -> osal_get_timeoutEx            0      0     20
       -> ZDApp_NVUpdate                0      0     20
     ZDAppCheckForHoldKey               2      0      9
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     14
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> APSME_HoldDataRequests        0      0     20
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
       -> APSME_HoldDataRequests        0      0     20
     ZDApp_ChangeMatchDescRespPermission
                                        0      0      9
       -> afSetMatch                    0      0     18
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_NVUpdate                4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
       -> ZDApp_NVUpdate                4      0      0
     ZDApp_DeviceConfigured             0      0     16
       -> osal_nv_read                  0      0     32
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         0      0      9
       -> NLME_GetExtAddr               0      0     18
       -> ZDAppCheckForHoldKey          0      0     18
       -> ZDO_Init                      0      0     18
       -> afRegister                    0      0     18
       -> ZDOInitDevice                 0      0     18
       -> ZDOInitDevice                 0      0     18
       -> ZDApp_InitZdoCBFunc           0      0     18
       -> ZDApp_RegisterCBs             0      0     18
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_InitZdoCBFunc                2      0      9
     ZDApp_JoinReq                      0      0     22
       -> ZDApp_NodeProfileSync         0      0     28
       -> NLME_JoinRequest              0      0     36
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     28
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlReset               0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlSet                 0      0     23
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             2      0     14
       -> ZDApp_LeaveCtrlReset          4      0      0
     ZDApp_LeaveReset                   0      0     19
       -> ZDApp_LeaveCtrlSet            0      0     18
       -> ZDApp_ResetTimerStart         0      0     18
     ZDApp_LeaveUpdate                  0      0     37
       -> ZDSecMgrDeviceRemoveByExtAddr
                                        0      0     48
       -> ZDSecMgrAddrClear             0      0     48
       -> osal_memcpy                   0      0     54
       -> RTG_RemoveRtgEntry            0      0     48
       -> nwkNeighborRemove             0      0     48
       -> AddrMgrWriteNVRequest         0      0     48
     ZDApp_NVUpdate                     2      0     14
       -> osal_start_timerEx            4      0      0
     ZDApp_NetworkDiscoveryReq          0      0     12
       -> NLME_NetworkDiscoveryRequest
                                        0      0     24
     ZDApp_NetworkInit                  2      0     14
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0      0
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     23
       -> NLME_SetBroadcastFilter       0      0     18
     ZDApp_NwkDescListProcessing        0      0     25
       -> nwk_getNwkDescList            0      0     28
       -> nwk_getNwkDescList            0      0     28
       -> nwk_ExtPANIDValid             0      0     28
       -> sAddrExtCmp                   0      0     28
     ZDApp_NwkStateUpdateCB             0      0     10
       -> osal_get_timeoutEx            0      0     20
       -> ZDApp_NVUpdate                0      0     20
     ZDApp_ProcessMsgCBs                0      0     42
       -> ZDO_ParseAddrRsp              0      0     62
       -> ZDO_UpdateAddrManager         0      0     62
       -> osal_mem_free                 0      0     62
       -> ZDO_ParseBindUnbindReq        0      0     62
       -> ZDO_ProcessBindUnbindReq      0      0     62
     ZDApp_ProcessNetworkJoin           0      0     23
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> osal_set_event                0      0     24
     ZDApp_ProcessOSALMsg               0      0     25
       -> ZDP_IncomingData              0      0     22
       -> ZDApp_ProcessMsgCBs           0      0     22
       -> ZDApp_NwkDescListProcessing
                                        0      0     22
       -> ZDApp_NodeProfileSync         0      0     22
       -> NLME_JoinRequest              0      0     30
       -> osal_rand                     0      0     22
       -> ZDApp_NetworkInit             0      0     22
       -> osal_rand                     0      0     22
       -> ZMacSetReq                    0      0     22
       -> ZMacSetReq                    0      0     22
       -> ZMacSetReq                    0      0     22
       -> NLME_ReJoinRequest            0      0     22
       -> osal_rand                     0      0     22
       -> ZDApp_NetworkInit             0      0     22
       -> NLME_SetPollRate              0      0     22
       -> NLME_SetQueuedPollRate        0      0     22
       -> NLME_SetResponseRate          0      0     22
       -> osal_rand                     0      0     22
       -> ZDApp_NetworkInit             0      0     22
       -> ZDApp_ProcessNetworkJoin      0      0     22
       -> sAddrExtCpy                   0      0     22
       -> ZDApp_NetworkInit             0      0     22
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
       -> ZDSecMgrSaveApsLinkKey        0      0     18
       -> ZDSecMgrSaveTCLinkKey         0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0     23
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      9
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      9
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0     23
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SaveNetworkStateEvt          2      0     10
       -> NLME_UpdateNV                 4      0      0
       -> zgWriteStartupOptions         4      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SecInit                      0      0      9
       -> ZDSecMgrInit                  0      0     18
     ZDApp_SendEventMsg                 0      0      9
       -> ZDApp_SendMsg                 0      0     18
     ZDApp_SendMsg                      1      0     33
       -> osal_msg_allocate             0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_msg_send                 0      0     32
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> osal_set_event                0      0     20
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
       -> osal_start_timerEx            0      0     20
       -> ZDApp_SaveNetworkStateEvt     0      0     20
       -> zgWriteStartupOptions         0      0     20
       -> Onboard_soft_reset            0      0     20
     ZDOInitDevice                      0      0     23
       -> zgInitItems                   0      0     28
       -> ZDConfig_InitDescriptors      0      0     28
       -> HalKeyRead                    0      0     28
       -> NLME_InitNV                   0      0     28
       -> NLME_SetDefaultNV             0      0     28
       -> ZDSecMgrClearNVKeyValues      0      0     28
       -> ZDAppDetermineDeviceType      0      0     28
       -> osal_rand                     0      0     28
       -> ZDSecMgrInit                  0      0     28
       -> ZDApp_LeaveCtrlInit           0      0     28
       -> ZDApp_LeaveCtrlStartup        0      0     28
       -> zgWriteStartupOptions         0      0     28
       -> osal_set_event                0      0     28
       -> ZDApp_ReadNetworkRestoreState
                                        0      0     28
       -> ZDApp_RestoreNetworkState     0      0     28
       -> ZDApp_NetworkInit             0      0     28
       -> NLME_SetBroadcastFilter       0      0     28
     ZDO_AddrChangeIndicationCB         0      0     12
       -> ZDApp_NVUpdate                0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_msg_send                 0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
     ZDO_ConcentratorIndicationCB       1      0     14
     ZDO_DeregisterForZdoCB             2      0      0
     ZDO_JoinConfirmCB                  1      0     14
       -> ZDApp_NVUpdate                0      0     28
       -> ZDApp_SendMsg                 0      0     28
     ZDO_JoinIndicationCB               2      0      1
       -> ZDApp_NVUpdate                4      0      0
     ZDO_LeaveCnf                       0      0     10
       -> NLME_GetExtAddr               0      0     20
       -> sAddrExtCmp                   0      0     20
       -> ZDApp_LeaveReset              0      0     20
     ZDO_LeaveInd                       0      0     10
       -> ZDApp_LeaveReset              0      0     20
       -> NLME_GetCoordShortAddr        0      0     20
       -> ZDApp_LeaveUpdate             0      0     20
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      3      0      3
       -> ZDApp_SendMsg                 4      0      6
     ZDO_NetworkFormationConfirmCB      0      0      9
       -> osal_set_event                0      0     18
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    1      0     14
     ZDO_StartRouterConfirmCB           0      0      9
       -> osal_set_event                0      0     18
     ZDO_SyncIndicationCB               0      0      9
       -> nwkNeighborInitTable          0      0     18
       -> ZDApp_SendMsg                 0      0     18
     ZDO_UpdateDeviceIndication         0      0      0
     ZDO_beaconNotifyIndCB              1      0     14
       -> osal_mem_alloc                0      0     28
       -> osal_memset                   0      0     28
       -> sAddrExtCpy                   0      0     28
       -> osal_memset                   0      0     28


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                     14
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    69
     ??Subroutine52_0                               5
     ZDApp_SecInit                                 11
     ZDApp_event_loop                             174
     ??Subroutine42_0                               5
     ??Subroutine46_0                              14
     ??Subroutine51_0                               6
     ZDApp_ProcessSecEvent                        106
     ??Subroutine48_0                               6
     ??Subroutine61_0                               6
     ZDOInitDevice                                200
     ?Subroutine18                                  2
     ??Subroutine43_0                              11
     ??Subroutine44_0                               3
     ??Subroutine45_0                               5
     ?Subroutine13                                  6
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ??Subroutine50_0                               7
     ZDApp_NetworkStartEvt                         79
     ZDApp_DeviceAuthEvt                           52
     ?Subroutine8                                   5
     ?Subroutine24                                  6
     ZDApp_SaveNetworkStateEvt                     19
     ZDApp_RestoreNetworkState                     65
     ?Subroutine10                                 13
     ?Subroutine15                                  8
     ??Subroutine41_0                               3
     ZDApp_InitUserDesc                            89
     ?Subroutine33                                 32
     ?Subroutine35                                  8
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         425
     ?Subroutine34                                  1
     ??Subroutine47_0                               9
     ?Subroutine17                                  4
     ?Subroutine32                                 22
     ?Subroutine27                                 15
     ?Subroutine11                                 12
     ZDApp_ProcessMsgCBs                          118
     ?Subroutine6                                   5
     ?Subroutine39                                  3
     ??Subroutine54_0                               3
     ??Subroutine55_0                               5
     ?Subroutine30                                  9
     ZDApp_RegisterCBs                             31
     ?Subroutine21                                  2
     ??Subroutine49_0                               9
     ZDApp_ProcessSecMsg                           56
     ZDApp_ProcessNetworkJoin                     330
     ?Subroutine7                                   5
     ?Subroutine12                                 12
     ?Subroutine2                                   2
     ZDApp_SaveNwkKey                             112
     ZDApp_ResetNwkKey                             48
     ZDApp_RestoreNwkKey                          141
     ZDApp_ResetTimerStart                         15
     ?Subroutine3                                   3
     ?Subroutine25                                  3
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           71
     ?Subroutine1                                  35
     ZDApp_LeaveCtrlSet                            22
     ZDApp_LeaveCtrlReset                          13
     ZDApp_LeaveCtrlBypass                         15
     ZDApp_LeaveCtrlStartup                        47
     ZDApp_LeaveReset                              17
     ZDApp_LeaveUpdate                            137
     ??Subroutine57_0                               3
     ??Subroutine58_0                               6
     ZDApp_NetworkDiscoveryReq                     11
     ZDApp_JoinReq                                 84
     ?Subroutine4                                   5
     ZDApp_DeviceConfigured                        87
     ZDApp_SendEventMsg                            17
     ?Subroutine22                                  9
     ZDApp_SendMsg                                 90
     ZDO_NetworkDiscoveryConfirmCB                 78
     ZDApp_NwkDescListProcessing                  266
     ?Subroutine20                                  6
     ??Subroutine53_0                               6
     ?Subroutine0                                   3
     ZDO_NetworkFormationConfirmCB                 26
     ZDO_beaconNotifyIndCB                        548
     ?Subroutine36                                  9
     ?Subroutine26                                  4
     ?Subroutine38                                  9
     ?Subroutine19                                 10
     ?Subroutine14                                  6
     ?Subroutine37                                 10
     ?Subroutine9                                   9
     ??Subroutine60_0                               5
     ZDO_StartRouterConfirmCB                      26
     ZDO_JoinConfirmCB                            100
     ?Subroutine5                                   8
     ZDO_AddrChangeIndicationCB                    84
     ?Subroutine16                                  5
     ??Subroutine56_0                               1
     ZDO_JoinIndicationCB                          12
     ZDO_ConcentratorIndicationCB                  60
     ZDO_LeaveCnf                                  66
     ?Subroutine29                                  9
     ZDO_LeaveInd                                 120
     ?Subroutine31                                  3
     ??Subroutine59_0                               3
     ZDO_SyncIndicationCB                          29
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                         16
     ?Subroutine23                                 18
     ZDO_UpdateDeviceIndication                     5
     ZDApp_InMsgCB                                 95
     ZDApp_ChangeMatchDescRespPermission
                                                   11
     ZDApp_NetworkInit                             29
     ZDApp_NwkStateUpdateCB                        16
     ZDApp_NodeProfileSync                         44
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      59
     ZDApp_NVUpdate                                15
     ZDApp_CoordStartPANIDConflictCB
                                                   11
     ZDO_SrcRtgIndCB                               60
     ZDApp_InitZdoCBFunc                           19
     ?Subroutine28                                  9
     ?Subroutine40                                 17
     ZDO_RegisterForZdoCB                          27
     ZDO_DeregisterForZdoCB                        22
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlReset?relay                   6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_NetworkDiscoveryReq?relay              6
     ??ZDApp_JoinReq?relay                          6
     ??ZDApp_DeviceConfigured?relay                 6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDApp_NwkDescListProcessing?relay            6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_beaconNotifyIndCB?relay                  6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDApp_InitZdoCBFunc?relay                    6
     ??ZDO_RegisterForZdoCB?relay                   6
     ??ZDO_DeregisterForZdoCB?relay                 6

 
 5 295 bytes in segment BANKED_CODE
   390 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    54 bytes in segment XDATA_Z
 
 5 696 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    65 bytes of XDATA memory

Errors: none
Warnings: none
