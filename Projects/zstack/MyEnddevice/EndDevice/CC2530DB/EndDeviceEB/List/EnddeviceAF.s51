///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        21/Apr/2015  17:17:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\Source\EnddeviceAF.c                      /
//    Command line       =  -f C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEn /
//                          dev.cfg (-DCPU32MHZ -DROOT=__near_func            /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Project /
//                          s\zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\ /
//                          Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Project /
//                          s\zstack\MyEnddevice\EndDevice\Source\EnddeviceAF /
//                          .c -D NWK_AUTO_POLL -D NV_RESTORE=1 -D xZTOOL_P1  /
//                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D    /
//                          xLCD_SUPPORTED=DEBUG -lC                          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\ -lA            /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\                /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\Obj\ -e              /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\ -I C:\Users\William\Desktop\±œ“ /
//                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\ /
//                          zstack\MyEnddevice\EndDevice\CC2530DB\..\Source\  /
//                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\ZMain\TI2530DB\ -I   /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\hal\in /
//                          clude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E /
//                          ndDevice-Project-for-editing\Projects\zstack\MyEn /
//                          ddevice\EndDevice\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\target\CC2530EB\ -I                       /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\in /
//                          clude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\E /
//                          ndDevice-Project-for-editing\Projects\zstack\MyEn /
//                          ddevice\EndDevice\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\high_level\ -I C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Project /
//                          s\zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\ /
//                          ..\..\Components\mac\low_level\srf04\ -I          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mac\lo /
//                          w_level\srf04\single_chip\ -I                     /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\mt\    /
//                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic /
//                          e-Project-for-editing\Projects\zstack\MyEnddevice /
//                          \EndDevice\CC2530DB\..\..\..\..\..\Components\osa /
//                          l\include\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\S /
//                          RC\EndDevice-Project-for-editing\Projects\zstack\ /
//                          MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\saddr\ -I                        /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\servic /
//                          es\sdata\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SR /
//                          C\EndDevice-Project-for-editing\Projects\zstack\M /
//                          yEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Comp /
//                          onents\stack\af\ -I C:\Users\William\Desktop\±œ“µ /
//                          …Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z /
//                          stack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\nwk\ -I                       /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\ /
//                          sapi\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En /
//                          dDevice-Project-for-editing\Projects\zstack\MyEnd /
//                          device\EndDevice\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sec\ -I C:\Users\William\Desktop\±œ“µ…Ëº /
//                          ∆\SRC\EndDevice-Project-for-editing\Projects\zsta /
//                          ck\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\ /
//                          Components\stack\sys\ -I                          /
//                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\..\..\..\..\..\Components\stack\ /
//                          zdo\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End /
//                          Device-Project-for-editing\Projects\zstack\MyEndd /
//                          evice\EndDevice\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\ /
//                          EndDevice-Project-for-editing\Projects\zstack\MyE /
//                          nddevice\EndDevice\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz                               /
//    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-P /
//                          roject-for-editing\Projects\zstack\MyEnddevice\En /
//                          dDevice\CC2530DB\EndDeviceEB\List\EnddeviceAF.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME EnddeviceAF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??EnddeviceApp_HandleAfIncomingMessage?relay
        FUNCTION ??EnddeviceApp_HandleAfIncomingMessage?relay,0203H
        PUBLIC ??EnddeviceApp_SendBroadcastMessage?relay
        FUNCTION ??EnddeviceApp_SendBroadcastMessage?relay,0203H
        PUBLIC ??EnddeviceApp_SendGroupMessage?relay
        FUNCTION ??EnddeviceApp_SendGroupMessage?relay,0203H
        PUBLIC ??EnddeviceApp_SendP2PMessage?relay
        FUNCTION ??EnddeviceApp_SendP2PMessage?relay,0203H
        PUBLIC EnddeviceApp_HandleAfIncomingMessage
        FUNCTION EnddeviceApp_HandleAfIncomingMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC EnddeviceApp_SendBroadcastMessage
        FUNCTION EnddeviceApp_SendBroadcastMessage,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC EnddeviceApp_SendGroupMessage
        FUNCTION EnddeviceApp_SendGroupMessage,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC EnddeviceApp_SendP2PMessage
        FUNCTION EnddeviceApp_SendP2PMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
HalLcdWriteSetTemperature SYMBOL "HalLcdWriteSetTemperature"
HalLcdWriteEndMod   SYMBOL "HalLcdWriteEndMod"
HalLcdWritePower    SYMBOL "HalLcdWritePower"
HalLcd_HW_WriteST   SYMBOL "HalLcd_HW_WriteST"
HalLcd_HW_WriteSTU  SYMBOL "HalLcd_HW_WriteSTU"
HalLcdWriteRealTempeMod SYMBOL "HalLcdWriteRealTempeMod"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteEndMod?relay SYMBOL "?relay", HalLcdWriteEndMod
??HalLcdWritePower?relay SYMBOL "?relay", HalLcdWritePower
??HalLcdWriteRealTempeMod?relay SYMBOL "?relay", HalLcdWriteRealTempeMod
??HalLcdWriteSetTemperature?relay SYMBOL "?relay", HalLcdWriteSetTemperature
??HalLcd_HW_WriteST?relay SYMBOL "?relay", HalLcd_HW_WriteST
??HalLcd_HW_WriteSTU?relay SYMBOL "?relay", HalLcd_HW_WriteSTU
??NLME_UpdateNV?relay SYMBOL "?relay", NLME_UpdateNV
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
EnddeviceApp_HandleAfIncomingMessage SYMBOL "EnddeviceApp_HandleAfIncomingMessage"
??EnddeviceApp_HandleAfIncomingMessage?relay SYMBOL "?relay", EnddeviceApp_HandleAfIncomingMessage
EnddeviceApp_SendBroadcastMessage SYMBOL "EnddeviceApp_SendBroadcastMessage"
??EnddeviceApp_SendBroadcastMessage?relay SYMBOL "?relay", EnddeviceApp_SendBroadcastMessage
EnddeviceApp_SendGroupMessage SYMBOL "EnddeviceApp_SendGroupMessage"
??EnddeviceApp_SendGroupMessage?relay SYMBOL "?relay", EnddeviceApp_SendGroupMessage
EnddeviceApp_SendP2PMessage SYMBOL "EnddeviceApp_SendP2PMessage"
??EnddeviceApp_SendP2PMessage?relay SYMBOL "?relay", EnddeviceApp_SendP2PMessage

        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteSetTemperature
        FUNCTION HalLcdWriteSetTemperature,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteEndMod
        FUNCTION HalLcdWriteEndMod,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWritePower
        FUNCTION HalLcdWritePower,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_WriteST
        FUNCTION HalLcd_HW_WriteST,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_WriteSTU
        FUNCTION HalLcd_HW_WriteSTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteRealTempeMod
        FUNCTION HalLcdWriteRealTempeMod,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteEndMod?relay
        FUNCTION ??HalLcdWriteEndMod?relay,00H
        EXTERN ??HalLcdWritePower?relay
        FUNCTION ??HalLcdWritePower?relay,00H
        EXTERN ??HalLcdWriteRealTempeMod?relay
        FUNCTION ??HalLcdWriteRealTempeMod?relay,00H
        EXTERN ??HalLcdWriteSetTemperature?relay
        FUNCTION ??HalLcdWriteSetTemperature?relay,00H
        EXTERN ??HalLcd_HW_WriteST?relay
        FUNCTION ??HalLcd_HW_WriteST?relay,00H
        EXTERN ??HalLcd_HW_WriteSTU?relay
        FUNCTION ??HalLcd_HW_WriteSTU?relay,00H
        EXTERN ??NLME_UpdateNV?relay
        FUNCTION ??NLME_UpdateNV?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN End_Ack
        EXTERN End_Mod
        EXTERN EnddeviceApp_Broadcast_DstAddr
        EXTERN EnddeviceApp_Group_DstAddr
        EXTERN EnddeviceApp_P2PDstAddr
        EXTERN EnddeviceApp_TransID
        EXTERN EnddeviceApp_epDesc
        EXTERN MsgBuf
        EXTERN MyDeviceId
        EXTERN POWER
        EXTERN Real_Tem_Mod
        EXTERN SetFL_Temperature
        EXTERN SetRM_Temperature
        EXTERN TOKEN
        EXTERN _NIB
        EXTERN rssi

// C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\zstack\MyEnddevice\EndDevice\Source\EnddeviceAF.c
//    1 #include "EnddeviceVariable.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//    2 #include "EnddeviceAF.h"
//    3 
//    4 
//    5 
//    6 /*********************************************************************
//    7  * @fn      EnddeviceApp_HandleAfIncomingMessage
//    8  *
//    9  * @brief   Data message processor callback.  This function processes
//   10  *          any incoming data - probably from other devices.  So, based
//   11  *          on cluster ID, perform the intended action.
//   12  *
//   13  * @param   none
//   14  *
//   15  * @return  none
//   16  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   17 void EnddeviceApp_HandleAfIncomingMessage( afIncomingMSGPacket_t *pkt )
EnddeviceApp_HandleAfIncomingMessage:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function EnddeviceApp_HandleAfIncomingMessage
        CODE
//   18 {  
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, NLME_UpdateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, EnddeviceApp_SendP2PMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteSetTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, EnddeviceApp_SendP2PMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteSetTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteEndMod
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, EnddeviceApp_SendP2PMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWritePower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcd_HW_WriteST
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteSetTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcd_HW_WriteSTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteEndMod
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteRealTempeMod
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcd_HW_WriteST
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteSetTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcd_HW_WriteSTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWritePower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteEndMod
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, HalLcdWriteRealTempeMod
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EnddeviceApp_HandleAfIncomingMessage, EnddeviceApp_SendP2PMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   19   uint8 *str = pkt->cmd.Data;
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   20   uint8 len = str[0];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
//   21   uint8 id = str[1];
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//   22   uint8 command = str[2];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//   23   
//   24  /*****************************for debug **************************/
//   25    //  uint8  n = command /16;
//   26    //  uint8  m = command % 16;
//   27    // HalLcdWriteChar5x8(n,0,50,TRUE);
//   28     // HalLcdWriteChar5x8(m,0,55,TRUE);
//   29 /*****************************for debug **************************/
//   30    
//   31  
//   32   // the PANID is changed ,reset the system regardless of id
//   33   if((command == CMD_SET_PANID))// &&  //(pkt->clusterId == COORDINATOR_BROADCAST_CLUSTERID)) 
        MOV     A,#0x10
        XRL     A,R6
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
//   34   {
//   35      if(len == 1)
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_0
//   36      {
//   37         _NIB.nwkPanId = str[3];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 33
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   38 	    NLME_UpdateNV(0x01);
        ; Setup parameters for call to function NLME_UpdateNV
        MOV     R1,#0x1
        LCALL   ??NLME_UpdateNV?relay
//   39 	    SystemReset();
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??EnddeviceApp_HandleAfIncomingMessage_1:
        SJMP    ??EnddeviceApp_HandleAfIncomingMessage_1
//   40      }     
//   41   }
//   42 
//   43   if(id == MyDeviceId)
??EnddeviceApp_HandleAfIncomingMessage_0:
        MOV     DPTR,#MyDeviceId
        MOVX    A,@DPTR
        XRL     A,R5
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   44   {
//   45     //HalLcdWriteDeviceID(pkt->clusterId,TRUE);// for test
//   46     switch (pkt->clusterId)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_3
        INC     DPTR
        MOVX    A,@DPTR
??EnddeviceApp_HandleAfIncomingMessage_3:
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   47     {
//   48     case COORDINATOR_COMMAND_CLUSTERID:
//   49      {
//   50        
//   51       switch(command)
        MOV     A,R6
        DEC     A
        JZ      ??EnddeviceApp_HandleAfIncomingMessage_4
        DEC     A
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_5 & 0xFFFF
        ADD     A,#-0x4
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_6 & 0xFFFF
        ADD     A,#-0x6
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_7 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_8 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_9 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_10 & 0xFFFF
        ADD     A,#0x11
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_11 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_12 & 0xFFFF
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   52       {
//   53         case CMD_SET_ROOM_TEMPER:
//   54              if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_4:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   55              {
//   56               
//   57               // if(POWER)// only when powered on,than we can set the temperature
//   58               // {
//   59                  SetRM_Temperature = str[3];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SetRM_Temperature
        LCALL   ?Subroutine1 & 0xFFFF
//   60                  MsgBuf[0] = 1;
//   61                  MsgBuf[1] = MyDeviceId;
//   62                  MsgBuf[2] = CMD_SET_ROOM_TEMPER;
??CrossCallReturnLabel_8:
        MOV     A,#0x1
        MOVX    @DPTR,A
//   63                  MsgBuf[3] = SetRM_Temperature;
        MOV     DPTR,#SetRM_Temperature
        LCALL   ?Subroutine3 & 0xFFFF
//   64                  
//   65                  if(osal_nv_item_init(SET_RM_TEMP_NV,1,NULL) == SUCCESS)
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_13
//   66                  {
//   67                      osal_nv_write(SET_RM_TEMP_NV,0,1,&SetRM_Temperature);// load the item to the NV
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#SetRM_Temperature & 0xff
        MOV     ?V0 + 1,#(SetRM_Temperature >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   68                      EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess send 
        ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
        MOV     ?V0 + 0,#MsgBuf & 0xff
        MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??EnddeviceApp_SendP2PMessage?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   69                      //message
//   70                  }
//   71                  if(Real_Tem_Mod && POWER)//  room  temperature mode and Power on ,
??EnddeviceApp_HandleAfIncomingMessage_13:
        MOV     DPTR,#Real_Tem_Mod
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
        MOV     DPTR,#POWER
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   72                   //  we need to diplay the temprerature immediately in LCD
//   73                  {
//   74                    HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
        ; Setup parameters for call to function HalLcdWriteSetTemperature
        MOV     R2,#0x1
        MOV     DPTR,#SetRM_Temperature
//   75                  }
//   76          
//   77              }
??EnddeviceApp_HandleAfIncomingMessage_14:
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_7:
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   78           break;
//   79         case CMD_SET_FLOOR_TEMPER:// only when powered on,than we can set the temperature
//   80              if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_5:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   81              {
//   82                 //if(POWER)
//   83              //   {
//   84                   SetFL_Temperature = str[3];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SetFL_Temperature
        LCALL   ?Subroutine1 & 0xFFFF
//   85                   MsgBuf[0] = 1;
//   86                   MsgBuf[1] = MyDeviceId;
//   87                   MsgBuf[2] = CMD_SET_FLOOR_TEMPER;
??CrossCallReturnLabel_9:
        MOV     A,#0x2
        MOVX    @DPTR,A
//   88                   MsgBuf[3] = SetFL_Temperature;
        MOV     DPTR,#SetFL_Temperature
        LCALL   ?Subroutine3 & 0xFFFF
//   89                  if(osal_nv_item_init(SET_FL_TEMP_NV,1,NULL) == SUCCESS)
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_15
//   90                  {
//   91                      osal_nv_write(SET_FL_TEMP_NV,0,1,&SetFL_Temperature);// load the item to the NV
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#SetFL_Temperature & 0xff
        MOV     ?V0 + 1,#(SetFL_Temperature >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   92                      EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);//load sucess and
        ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
        MOV     ?V0 + 0,#MsgBuf & 0xff
        MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??EnddeviceApp_SendP2PMessage?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   93                       //send  message   
//   94                  }
//   95                   if(!Real_Tem_Mod && POWER)//  floor  temperature mode
??EnddeviceApp_HandleAfIncomingMessage_15:
        MOV     DPTR,#Real_Tem_Mod
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
        MOV     DPTR,#POWER
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//   96                   {
//   97                    HalLcdWriteSetTemperature(SetFL_Temperature,TRUE);
        ; Setup parameters for call to function HalLcdWriteSetTemperature
        MOV     R2,#0x1
        MOV     DPTR,#SetFL_Temperature
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_14 & 0xFFFF
//   98                   }
//   99                // }
//  100                // else
//  101                // {
//  102                //   ;
//  103                // }
//  104              }
//  105           break;
//  106         case CMD_ROOM_REAL_TEMPER:
//  107           break;
//  108         case CMD_FLOOR_REAL_TEMPER:
//  109           break; 
//  110         case CMD_RELAY_STATE:
//  111           break;
//  112         case CMD_SET_RELAY_STATE:
//  113               if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_6:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  114               {
//  115                 if(POWER && (!End_Mod))// only when powered on and the manual mod 
        MOV     DPTR,#POWER
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
        MOV     DPTR,#End_Mod
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  116                   //than we can set the Relay   
//  117                 {
//  118                   REL_CTL = str[3] & 0x01;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.2,C
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  119                 }
//  120               }
//  121           break;
//  122         case CMD_SET_SLEEP_MODE:
//  123           break;
//  124         case CMD_SET_START_CLOCK:
//  125           break; 
//  126         case CMD_SET_CLOSE_CLOCK:
//  127           break;
//  128         case CMD_SET_NEW_DEVICEID:
//  129           if(len == 1)
//  130           {
//  131             if(!POWER)// only when powered off,that we can change the ID
//  132             {
//  133               //MyDeviceId = debugnum = str[3];
//  134               //if(osal_nv_item_init(MY_DEVICEID_NV,1,NULL) == SUCCESS)
//  135               //{
//  136                //  osal_nv_write(MY_DEVICEID_NV,0,1,&MyDeviceId);
//  137               //}
//  138             }
//  139           }
//  140           break;
//  141         case CMD_SET_PRIORITY:
//  142           break;
//  143         case CMD_SET_MODE:
//  144           if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_7:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  145           {
//  146             if(POWER)// only when powered on,than we can set the Mode
        MOV     DPTR,#POWER
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  147             {
//  148               End_Mod = str[3];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#End_Mod
        MOVX    @DPTR,A
//  149               REL_CTL = 0;
        CLR     0x90.2
//  150               HalLcdWriteEndMod(End_Mod);// update the mode in LCD
        ; Setup parameters for call to function HalLcdWriteEndMod
        MOV     R1,A
        LCALL   ??HalLcdWriteEndMod?relay
//  151               
//  152               // send mode to the coordinator
//  153               MsgBuf[0] = 1;
        LCALL   ??Subroutine6_0 & 0xFFFF
//  154 	          MsgBuf[1] = MyDeviceId;
//  155 	          MsgBuf[2] = CMD_SET_MODE;
??CrossCallReturnLabel_10:
        MOV     A,#0xc
        MOVX    @DPTR,A
//  156 	          MsgBuf[3] = End_Mod;
        MOV     DPTR,#End_Mod
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_16 & 0xFFFF
//  157 	          EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
//  158             }
//  159           }
//  160           break; 
//  161         case CMD_SEND_TOKEN:
//  162           if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_8:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  163           TOKEN = TRUE;
        MOV     DPTR,#TOKEN
??EnddeviceApp_HandleAfIncomingMessage_17:
        MOV     A,#0x1
??EnddeviceApp_HandleAfIncomingMessage_18:
        MOVX    @DPTR,A
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  164           break;
//  165         case CMD_TAKEN_TOKEN:
//  166           if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_9:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  167           TOKEN = FALSE;
        MOV     DPTR,#TOKEN
        CLR     A
        SJMP    ??EnddeviceApp_HandleAfIncomingMessage_18
//  168           break;
//  169         case CMD_GET_RSSI:
//  170           if(len == 0)
??EnddeviceApp_HandleAfIncomingMessage_10:
        MOV     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  171             rssi = pkt->rssi;
        MOV     A,R2
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#rssi
        SJMP    ??EnddeviceApp_HandleAfIncomingMessage_18
//  172           break;
//  173         case CMD_ACK:
//  174           if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_11:
        MOV     A,#0x1
        XRL     A,R4
        JZ      $+5
        LJMP    ??EnddeviceApp_HandleAfIncomingMessage_2 & 0xFFFF
//  175           End_Ack = TRUE;
        MOV     DPTR,#End_Ack
        SJMP    ??EnddeviceApp_HandleAfIncomingMessage_17
//  176           break;
//  177         case CMD_START_OR_SHUTDOWN:
//  178           if(len == 1)
??EnddeviceApp_HandleAfIncomingMessage_12:
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??EnddeviceApp_HandleAfIncomingMessage_2
//  179           {
//  180             POWER = str[3] & 0x01;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        MOV     DPTR,#POWER
        MOVX    @DPTR,A
//  181               if(POWER) // power on
        MOV     C,0xE0 /* A   */.0
        CLR     0x90.2
        MOV     DPTR,#Real_Tem_Mod
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x0
        JNC     ??EnddeviceApp_HandleAfIncomingMessage_19
//  182               {
//  183                 REL_CTL = 0;
        LCALL   ??HalLcdWritePower?relay
//  184                 Real_Tem_Mod = TRUE;
//  185                 
//  186                 HalLcdWritePower(FALSE);  // clear the power picture for the ST
//  187                  
//  188                 HalLcd_HW_WriteST(TRUE);
        ; Setup parameters for call to function HalLcd_HW_WriteST
        MOV     R1,#0x1
        LCALL   ??HalLcd_HW_WriteST?relay
//  189                 HalLcdWriteSetTemperature(SetRM_Temperature,TRUE);
        ; Setup parameters for call to function HalLcdWriteSetTemperature
        MOV     R2,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
//  190                 HalLcd_HW_WriteSTU(TRUE); 
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function HalLcd_HW_WriteSTU
        MOV     R1,#0x1
        LCALL   ??HalLcd_HW_WriteSTU?relay
//  191        
//  192                 HalLcdWriteEndMod(End_Mod);
        ; Setup parameters for call to function HalLcdWriteEndMod
        MOV     DPTR,#End_Mod
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??EnddeviceApp_HandleAfIncomingMessage_20
//  193                 HalLcdWriteRealTempeMod(TRUE);
//  194               }
//  195               else//power off
//  196               {
//  197                 REL_CTL = 0;
??EnddeviceApp_HandleAfIncomingMessage_19:
        LCALL   ??HalLcd_HW_WriteST?relay
//  198                 Real_Tem_Mod = TRUE;
//  199                 HalLcd_HW_WriteST(FALSE);
//  200                 HalLcdWriteSetTemperature(SetRM_Temperature,FALSE);
        ; Setup parameters for call to function HalLcdWriteSetTemperature
        MOV     R2,#0x0
        LCALL   ?Subroutine4 & 0xFFFF
//  201                 HalLcd_HW_WriteSTU(FALSE);// clear the ST for the power picture
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function HalLcd_HW_WriteSTU
        MOV     R1,#0x0
        LCALL   ??HalLcd_HW_WriteSTU?relay
//  202                 
//  203                 HalLcdWritePower(TRUE);  // write the power picture
        ; Setup parameters for call to function HalLcdWritePower
        MOV     R1,#0x1
        LCALL   ??HalLcdWritePower?relay
//  204                 
//  205                 HalLcdWriteEndMod(FALSE);	
        ; Setup parameters for call to function HalLcdWriteEndMod
        MOV     R1,#0x0
??EnddeviceApp_HandleAfIncomingMessage_20:
        LCALL   ??HalLcdWriteEndMod?relay
//  206                 HalLcdWriteRealTempeMod(TRUE);
        ; Setup parameters for call to function HalLcdWriteRealTempeMod
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteRealTempeMod?relay
//  207              }
//  208              // send the power state to the coordinator
//  209             MsgBuf[0] = 1;
        LCALL   ??Subroutine6_0 & 0xFFFF
//  210             MsgBuf[1] = MyDeviceId;
//  211             MsgBuf[2] = CMD_START_OR_SHUTDOWN;
??CrossCallReturnLabel_11:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  212             MsgBuf[3] = POWER;
        MOV     DPTR,#POWER
??EnddeviceApp_HandleAfIncomingMessage_16:
        MOVX    A,@DPTR
        MOV     DPTR,#MsgBuf + 3
        MOVX    @DPTR,A
//  213             EnddeviceApp_SendP2PMessage(ENDDEVICE_DATA_CLUSTERID,4,MsgBuf);
        ; Setup parameters for call to function EnddeviceApp_SendP2PMessage
        MOV     ?V0 + 0,#MsgBuf & 0xff
        MOV     ?V0 + 1,#(MsgBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??EnddeviceApp_SendP2PMessage?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  214          
//  215          }
//  216           break;
//  217         default:
//  218 	  break;
//  219        }
//  220        break;
//  221      }
//  222    default :
//  223       break;
//  224    }  
//  225   }
//  226   else // the message is not mine
//  227   {
//  228      ; 
//  229   }
//  230 }
??EnddeviceApp_HandleAfIncomingMessage_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0
        REQUIRE WDCTL
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     DPTR,#SetRM_Temperature
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalLcdWriteSetTemperature?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     DPTR,#MsgBuf + 3
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPTR,#MsgBuf
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#MyDeviceId
        MOVX    A,@DPTR
        MOV     DPTR,#MsgBuf + 1
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  231 
//  232 
//  233 
//  234 /*********************************************************************
//  235  * @fn      EnddeviceApp_SendP2PMessage
//  236  *
//  237  * @brief   Send the PointToPoint message.
//  238  *
//  239  * @param   ClusterID,the clusterID of the message,
//  240             len,the length of the message,
//  241             str,the pointer of the message.
//  242  *
//  243  * @return  none
//  244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  245 void EnddeviceApp_SendP2PMessage(uint16 ClusterID,uint16 len,uint8 * str)
EnddeviceApp_SendP2PMessage:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function EnddeviceApp_SendP2PMessage
        CODE
//  246 {
        FUNCALL EnddeviceApp_SendP2PMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  247   
//  248   if(AF_DataRequest(&EnddeviceApp_P2PDstAddr,&EnddeviceApp_epDesc,
//  249                     ClusterID,
//  250                     len,
//  251                     str,
//  252                     &EnddeviceApp_TransID,
//  253                     AF_DISCV_ROUTE,
//  254                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS)
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
        MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#EnddeviceApp_epDesc & 0xff
        MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
        MOV     R2,#EnddeviceApp_P2PDstAddr & 0xff
        MOV     R3,#(EnddeviceApp_P2PDstAddr >> 8) & 0xff
        CFI EndBlock cfiBlock19
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  255   {
//  256     
//  257   }
//  258   else
//  259   {
//  260     
//  261     
//  262   } 
//  263 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20
//  264 
//  265 
//  266 /*********************************************************************
//  267  * @fn      EnddeviceApp_SendGroupMessage
//  268  *
//  269  * @brief   Send the Group message .
//  270  *
//  271  * @param   ClusterID,the clusterID of the message,
//  272             len,the length of the message,
//  273             str,the pointer of the message.
//  274  *
//  275  * @return  none
//  276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 void EnddeviceApp_SendGroupMessage(uint16 ClusterID,uint16 len,uint8 * str)
EnddeviceApp_SendGroupMessage:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function EnddeviceApp_SendGroupMessage
        CODE
//  278 {
        FUNCALL EnddeviceApp_SendGroupMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  279   if ( AF_DataRequest( &EnddeviceApp_Group_DstAddr, &EnddeviceApp_epDesc,
//  280                        ClusterID,
//  281                        len,
//  282                        str,
//  283                        &EnddeviceApp_TransID,
//  284                        AF_DISCV_ROUTE,
//  285                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
        MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#EnddeviceApp_epDesc & 0xff
        MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
        MOV     R2,#EnddeviceApp_Group_DstAddr & 0xff
        MOV     R3,#(EnddeviceApp_Group_DstAddr >> 8) & 0xff
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  286   {
//  287   }
//  288   else
//  289   {
//  290     // Error occurred in request to send.
//  291   }
//  292 }
//  293 
//  294 
//  295 /*********************************************************************
//  296  * @fn      EnddeviceApp_SendBroadcastMessage
//  297  *
//  298  * @brief   Send the Broadcast message.
//  299  *
//  300 * @param   ClusterID,the clusterID of the message,
//  301            len,the length of the message,
//  302            str,the pointer of the message.
//  303  *
//  304  * @return  none
//  305  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 void EnddeviceApp_SendBroadcastMessage(uint16 ClusterID,uint16 len,uint8 * str)
EnddeviceApp_SendBroadcastMessage:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function EnddeviceApp_SendBroadcastMessage
        CODE
//  307 {
        FUNCALL EnddeviceApp_SendBroadcastMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  308   if ( AF_DataRequest( &EnddeviceApp_Broadcast_DstAddr, &EnddeviceApp_epDesc,
//  309                        ClusterID,
//  310                        len,
//  311                        str,//(uint8*)&EnddeviceAppPeriodicCounter,
//  312                        &EnddeviceApp_TransID,
//  313                        AF_DISCV_ROUTE,
//  314                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#EnddeviceApp_TransID & 0xff
        MOV     ?V0 + 3,#(EnddeviceApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#EnddeviceApp_epDesc & 0xff
        MOV     R5,#(EnddeviceApp_epDesc >> 8) & 0xff
        MOV     R2,#EnddeviceApp_Broadcast_DstAddr & 0xff
        MOV     R3,#(EnddeviceApp_Broadcast_DstAddr >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock26

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EnddeviceApp_HandleAfIncomingMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    EnddeviceApp_HandleAfIncomingMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EnddeviceApp_SendP2PMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    EnddeviceApp_SendP2PMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EnddeviceApp_SendGroupMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    EnddeviceApp_SendGroupMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EnddeviceApp_SendBroadcastMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    EnddeviceApp_SendBroadcastMessage

        END
//  315   {
//  316   }
//  317   else
//  318   {
//  319     // Error occurred in request to send.
//  320   }
//  321 }
//  322 
//  323 
//  324 
//  325 
// 
// 996 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
// 
// 1 020 bytes of CODE memory
//     0 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
