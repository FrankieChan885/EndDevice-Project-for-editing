###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         21/Apr/2015  16:52:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Components\mt\MT.c               #
#    Command line       =  -f C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev #
#                          .cfg (-DCPU32MHZ -DROOT=__near_func                #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\ #
#                          zstack\MyEnddevice\EndDevice\CC2530DB\..\..\..\Too #
#                          ls\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\EndDevice-Project-for-editing\Component #
#                          s\mt\MT.c -D NWK_AUTO_POLL -D NV_RESTORE=1 -D      #
#                          xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           #
#                          xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\ -lA               #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\ --diag_suppress   #
#                          Pe001,Pa010 -o C:\Users\William\Desktop\±œ“µ…Ëº∆\S #
#                          RC\EndDevice-Project-for-editing\Projects\zstack\M #
#                          yEnddevice\EndDevice\CC2530DB\EndDeviceEB\Obj\ -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\ -I C:\Users\William\Desktop\±œ“ #
#                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z #
#                          stack\MyEnddevice\EndDevice\CC2530DB\..\Source\    #
#                          -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice #
#                          -Project-for-editing\Projects\zstack\MyEnddevice\E #
#                          ndDevice\CC2530DB\..\..\..\ZMain\TI2530DB\ -I      #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\hal\inclu #
#                          de\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDe #
#                          vice-Project-for-editing\Projects\zstack\MyEnddevi #
#                          ce\EndDevice\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\target\CC2530EB\ -I C:\Users\William\Desktop\±œ“ #
#                          µ…Ëº∆\SRC\EndDevice-Project-for-editing\Projects\z #
#                          stack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mac\high_ #
#                          level\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\En #
#                          dDevice-Project-for-editing\Projects\zstack\MyEndd #
#                          evice\EndDevice\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mac\low_l #
#                          evel\srf04\single_chip\ -I                         #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\mt\ -I    #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\osal\incl #
#                          ude\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndD #
#                          evice-Project-for-editing\Projects\zstack\MyEnddev #
#                          ice\EndDevice\CC2530DB\..\..\..\..\..\Components\s #
#                          ervices\saddr\ -I C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\EndDevice-Project-for-editing\Projects\zstac #
#                          k\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                        #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\stack\af\ #
#                           -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevic #
#                          e-Project-for-editing\Projects\zstack\MyEnddevice\ #
#                          EndDevice\CC2530DB\..\..\..\..\..\Components\stack #
#                          \nwk\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\End #
#                          Device-Project-for-editing\Projects\zstack\MyEndde #
#                          vice\EndDevice\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\S #
#                          RC\EndDevice-Project-for-editing\Projects\zstack\M #
#                          yEnddevice\EndDevice\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sec\ -I C:\Users\William\Desktop\±œ“µ… #
#                          Ëº∆\SRC\EndDevice-Project-for-editing\Projects\zst #
#                          ack\MyEnddevice\EndDevice\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sys\ -I                           #
#                          C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\..\..\..\..\..\Components\stack\zdo #
#                          \ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevi #
#                          ce-Project-for-editing\Projects\zstack\MyEnddevice #
#                          \EndDevice\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \ -I C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevi #
#                          ce-Project-for-editing\Projects\zstack\MyEnddevice #
#                          \EndDevice\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \f8w\ -Ohz                                         #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\List\MT.lst             #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Pr #
#                          oject-for-editing\Projects\zstack\MyEnddevice\EndD #
#                          evice\CC2530DB\EndDeviceEB\Obj\MT.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\EndDevice-Project-for-editing\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2011-06-07 12:12:44 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26238 $
      5          
      6            Description:    MonitorTest Event Loop functions.
      7                            Everything in the MonitorTest Task (except the serial driver).
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40           **************************************************************************************************/
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          
     46          #include "ZComDef.h"
     47          #include "MT.h"
     48          #include "MT_APP.h"
     49          #include "MT_DEBUG.h"
     50          #include "MT_UTIL.h"
     51          #include "MT_SYS.h"
     52          
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Memory.h"
     56          #include "OSAL_Nv.h"
     57          
     58          #include "DebugTrace.h"
     59          #include "ZMAC.h"
     60          
     61          #if !defined ( NONWK )
     62            #include "NLMEDE.h"
     63            #include "nwk_bufs.h"
     64            #include "ZDObject.h"
     65            #include "ssp.h"
     66            #include "nwk_util.h"
     67            #include "AF.h"
     68            #include "MT_SAPI.h"
     69          #endif
     70          
     71          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     72            #include "MT_MAC.h"
     73          #endif
     74          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     75            #include "MT_NWK.h"
     76            #include "nwk.h"
     77            #include "nwk_bufs.h"
     78          #endif
     79          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     80            #include "MT_AF.h"
     81          #endif
     82          #if defined( MT_USER_TEST_FUNC )
     83            #include "AF.h"
     84          #endif
     85          #if defined( MT_ZDO_FUNC )
     86            #include "MT_ZDO.h"
     87          #endif
     88          #if defined (MT_SAPI_FUNC)
     89          	#include "MT_SAPI.h"
     90          #endif
     91          #if defined (MT_OTA_FUNC)
     92            #include "MT_OTA.h"
     93          #endif
     94          
     95          #if defined( APP_TP )
     96           #include "TestProfile.h"
     97          #endif
     98          #if defined( APP_TP2 )
     99           #include "TestProfile2.h"
    100          #endif
    101          
    102          #if defined(APP_TGEN)
    103            #include "TrafficGenApp.h"
    104          #endif
    105          #if defined(APP_DEBUG)
    106          	#include "DebugApp.h"
    107          #endif
    108          #if defined (NWK_TEST)
    109          	#include "HWTTApp.h"
    110          #endif
    111          
    112          /* HAL */
    113          #include "hal_uart.h"
    114          #include "hal_key.h"
    115          #include "MT_UART.h"
    116          
    117          /**************************************************************************************************
    118           * CONSTANTS
    119           **************************************************************************************************/
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 22
   \   000016                REQUIRE __INIT_XDATA_Z
    122          {
    123            NULL,
    124          
    125          #if defined (MT_SYS_FUNC)
    126            MT_SysCommandProcessing,
    127          #else
    128            NULL,
    129          #endif
    130          
    131          #if defined (MT_MAC_FUNC)
    132            MT_MacCommandProcessing,
    133          #else
    134            NULL,
    135          #endif
    136          
    137          #if defined (MT_NWK_FUNC)
    138            MT_NwkCommandProcessing,
    139          #else
    140            NULL,
    141          #endif
    142          
    143          #if defined (MT_AF_FUNC)
    144            MT_AfCommandProcessing,
    145          #else
    146            NULL,
    147          #endif
    148          
    149          #if defined (MT_ZDO_FUNC)
    150            MT_ZdoCommandProcessing,
    151          #else
    152            NULL,
    153          #endif
    154          
    155          #if defined (MT_SAPI_FUNC)
    156            MT_SapiCommandProcessing,
    157          #else
    158            NULL,
    159          #endif
    160          
    161          #if defined (MT_UTIL_FUNC)
    162            MT_UtilCommandProcessing,
    163          #else
    164            NULL,
    165          #endif
    166          
    167          #if defined (MT_DEBUG_FUNC)
    168            MT_DebugCommandProcessing,
    169          #else
    170            NULL,
    171          #endif
    172          
    173          #if defined (MT_APP_FUNC)
    174            MT_AppCommandProcessing,
    175          #else
    176            NULL,
    177          #endif
    178          
    179          #if defined (MT_OTA_FUNC)
    180            MT_OtaCommandProcessing,
    181          #else
    182            NULL,
    183          #endif
    184          };
    185          
    186          /**************************************************************************************************
    187           * GLOBAL VARIABLES
    188           **************************************************************************************************/
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    192          
    193          /**************************************************************************************************
    194           * LOCAL FUNCTIONS
    195           **************************************************************************************************/
    196          
    197          void MT_MsgQueueInit( void );
    198          void MT_ResetMsgQueue( void );
    199          byte MT_QueueMsg( byte *msg , byte len );
    200          void MT_ProcessQueue( void );
    201          
    202          #if defined ( MT_USER_TEST_FUNC )
    203          void MT_ProcessAppUserCmd( byte *pData );
    204          #endif
    205          
    206          /**************************************************************************************************
    207           * @fn         MT_Init
    208           *
    209           * @brief      This function is the secondary initialization that resolves conflicts during
    210           *             osalInitTasks(). For example, since MT is the highest priority task, and
    211           *             specifically because the MT task is initialized before the ZDApp task, if MT_Init()
    212           *             registers anything with ZDO_RegisterForZdoCB(), it is wiped out when ZDApp task
    213           *             initialization invokes ZDApp_InitZdoCBFunc().
    214           *             There may be other existing or future such races, so try to do all possible
    215           *             MT initialization here vice in MT_TaskInit().
    216           *
    217           * input parameters
    218           *
    219           * None.
    220           *
    221           * output parameters
    222           *
    223           * None.
    224           *
    225           * @return      None.
    226           **************************************************************************************************
    227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          void MT_Init(void)
   \                     MT_Init:
    229          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    230          #if defined (MT_ZDO_FUNC)
    231            MT_ZdoInit();
    232          #endif
    233            MT_SysResetInd();
   \   000004                ; Setup parameters for call to function MT_SysResetInd
   \   000004   12....       LCALL   ??MT_SysResetInd?relay
    234          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    235          
    236          /***************************************************************************************************
    237           * @fn      MT_BuildSPIMsg
    238           *
    239           * @brief
    240           *
    241           *   Format an SPI message.
    242           *
    243           * @param   UINT16 cmd - command id
    244           * @param   byte *msg - pointer to message buffer
    245           * @param   byte dataLen - length of data field
    246           * @param   byte *pData - pointer to data field
    247           *
    248           * @return  void
    249           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void MT_BuildSPIMsg( uint8 cmdType, uint8 cmdId, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    251          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   7410         MOV     A,#0x10
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 1,A
    252            /* Fill in the CMD and Data Length */
    253            *msg++ = dataLen;
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   EB           MOV     A,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
    254            *msg++ = cmdType;
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
    255            *msg++ = cmdId;
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
    256          
    257            /* Fill in the data */
    258            if ( pData )
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   45..         ORL     A,?V0 + 1
   \   00002A   6020         JZ      ??MT_BuildSPIMsg_0
    259            {
    260              osal_memcpy( msg, pData, dataLen );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   85....       MOV     ?V0 + 4,?V0 + 0
   \   00002F   85....       MOV     ?V0 + 5,?V0 + 1
   \   000032   75..00       MOV     ?V0 + 6,#0x0
   \   000035   78..         MOV     R0,#?V0 + 4
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   8B..         MOV     ?V0 + 0,R3
   \   00003C   AC..         MOV     R4,?V0 + 0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??osal_memcpy?relay
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    261            }
    262          }
   \                     ??MT_BuildSPIMsg_0:
   \   00004C                REQUIRE ?Subroutine1
   \   00004C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    263          
    264          /***************************************************************************************************
    265           * @fn      MT_BuildAndSendZToolResponse
    266           *
    267           * @brief   Build and send a ZTOOL msg
    268           * @param   uint8 cmdType - include type and subsystem
    269           *          uint8 cmdId - command ID
    270           *          byte dataLen
    271           *          byte *pData
    272           *
    273           * @return  void
    274           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    276          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 0,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
    277            uint8 *msg_ptr;
    278          
    279            /* Allocate memory including SOP and FCS */
    280            msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen);
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   74E0         MOV     A,#-0x20
   \   000013   55..         ANL     A,?V0 + 1
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??MT_TransportAlloc?relay
   \   000019   8A..         MOV     ?V0 + 6,R2
   \   00001B   8B..         MOV     ?V0 + 7,R3
   \   00001D   AE..         MOV     R6,?V0 + 6
   \   00001F   AF..         MOV     R7,?V0 + 7
    281          
    282            if (msg_ptr)
   \   000021   EE           MOV     A,R6
   \   000022   4F           ORL     A,R7
   \   000023   601E         JZ      ??MT_BuildAndSendZToolResponse_0
    283            {
    284              /* Build the message */
    285              MT_BuildSPIMsg(cmdType, cmdId, msg_ptr, dataLen, pData);
   \   000025                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000025   78..         MOV     R0,#?V0 + 2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   AB..         MOV     R3,?V0 + 0
   \   00002C   EE           MOV     A,R6
   \   00002D   FC           MOV     R4,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FD           MOV     R5,A
   \   000030   AA..         MOV     R2,?V0 + 4
   \   000032   A9..         MOV     R1,?V0 + 1
   \   000034   12....       LCALL   ??MT_BuildSPIMsg?relay
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    286              /* Send out the msg */
    287              MT_TransportSend(msg_ptr);
   \   00003C                ; Setup parameters for call to function MT_TransportSend
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??MT_TransportSend?relay
    288            }
    289          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   000043   80..         SJMP    ?Subroutine1
    290          
    291          /***************************************************************************************************
    292           * @fn      MT_ProcessIncoming
    293           *
    294           * @brief  Process Incoming Message.
    295           *
    296           * @param   byte *pBuf - pointer to event message
    297           *
    298           * @return  void
    299           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    301          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    302            mtProcessMsg_t func;
    303            uint8 rsp[MT_RPC_FRAME_HDR_SZ];
    304          
    305            /* pre-build response message:  | status | cmd0 | cmd1 | */
    306            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   C0E0         PUSH    A
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   D0E0         POP     A
   \   000018   F0           MOVX    @DPTR,A
    307            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
    308          
    309            /* check length */
    310            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C3           CLR     C
   \   000030   94FB         SUBB    A,#-0x5
   \   000032   400A         JC      ??MT_ProcessIncoming_0
    311            {
    312              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   7404         MOV     A,#0x4
   \   00003C   8044         SJMP    ??MT_ProcessIncoming_1
    313            }
    314            /* check subsystem range */
    315            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   541F         ANL     A,#0x1f
   \   000046   C3           CLR     C
   \   000047   940B         SUBB    A,#0xb
   \   000049   502F         JNC     ??MT_ProcessIncoming_2
    316            {
    317              /* look up processing function */
    318              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   541F         ANL     A,#0x1f
   \   00004E   C3           CLR     C
   \   00004F   33           RLC     A
   \   000050   F8           MOV     R0,A
   \   000051   74..         MOV     A,#mtProcessIncoming & 0xff
   \   000053   28           ADD     A,R0
   \   000054   F582         MOV     DPL,A
   \   000056   74..         MOV     A,#(mtProcessIncoming >> 8) & 0xff
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F8           MOV     R0,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
    319              if (func)
   \   000065   E582         MOV     A,DPL
   \   000067   4583         ORL     A,DPH
   \   000069   600F         JZ      ??MT_ProcessIncoming_2
    320              {
    321                /* execute processing function */
    322                rsp[0] = (*func)(pBuf);
   \   00006B                ; Setup parameters for indirect call
   \   00006B   12....       LCALL   ?CALL_IND
   \   00006E   E9           MOV     A,R1
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   F0           MOVX    @DPTR,A
    323              }
    324              else
    325              {
    326                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    327              }
    328            }
    329            else
    330            {
    331              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    332            }
    333          
    334            /* if error and this was an SREQ, send error message */
    335            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   000076   700B         JNZ     ??MT_ProcessIncoming_3
   \   000078   8028         SJMP    ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   7401         MOV     A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000082   F0           MOVX    @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E0           MOVX    A,@DPTR
   \   000089   54E0         ANL     A,#0xe0
   \   00008B   6420         XRL     A,#0x20
   \   00008D   7013         JNZ     ??MT_ProcessIncoming_4
    336            {
    337              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0,
    338                                                                            MT_RPC_FRAME_HDR_SZ, rsp);
   \   00008F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   AC82         MOV     R4,DPL
   \   000097   AD83         MOV     R5,DPH
   \   000099   7B03         MOV     R3,#0x3
   \   00009B   7A00         MOV     R2,#0x0
   \   00009D   7960         MOV     R1,#0x60
   \   00009F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    339            }
    340          }
   \                     ??MT_ProcessIncoming_4:
   \   0000A2   7403         MOV     A,#0x3
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   02....       LJMP    ?Subroutine0 & 0xFFFF
    341          
    342          /***************************************************************************************************
    343           * @fn      MTProcessAppRspMsg
    344           *
    345           * @brief   Process the User App Response Message
    346           *
    347           * @param   data - output serial buffer.  The first byte must be the
    348           *          endpoint that send this message.
    349           * @param   len - data length
    350           *
    351           * @return  none
    352           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    354          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
   \   000009   E9           MOV     A,R1
    355            /* Send out Reset Response message */
    356            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   FB           MOV     R3,A
   \   00000B   7A80         MOV     R2,#-0x80
   \   00000D   7969         MOV     R1,#0x69
   \   00000F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    357          }
   \   000012                REQUIRE ?Subroutine2
   \   000012                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    358          
    359          
    360          /***************************************************************************************************
    361           * @fn      MT_ReverseBytes
    362           *
    363           * @brief
    364           *
    365           *   Reverses bytes within an array
    366           *
    367           * @param   data - ptr to data buffer to reverse
    368           * @param    len - number of bytes in buffer
    369           *
    370           * @return  void
    371           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    373          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    374            byte i,j;
    375            byte temp;
    376          
    377            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   75..00       MOV     ?V0 + 2,#0x0
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   2E           ADD     A,R6
   \   00000D   FF           MOV     R7,A
   \   00000E   8032         SJMP    ??MT_ReverseBytes_0
    378            {
    379              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000010   85....       MOV     ?V0 + 0,?V0 + 2
   \   000013   EA           MOV     A,R2
   \   000014   25..         ADD     A,?V0 + 0
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F9           MOV     R1,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
    380              pData[i++] = pData[j];
   \   000022   8F..         MOV     ?V0 + 0,R7
   \   000024   EA           MOV     A,R2
   \   000025   25..         ADD     A,?V0 + 0
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FD           MOV     R5,A
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   E0           MOVX    A,@DPTR
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   F0           MOVX    @DPTR,A
   \   000036   05..         INC     ?V0 + 2
    381              pData[j--] = temp;
   \   000038   8C82         MOV     DPL,R4
   \   00003A   8D83         MOV     DPH,R5
   \   00003C   E5..         MOV     A,?V0 + 3
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   1F           DEC     R7
    382            }
   \   000040   1E           DEC     R6
   \   000041   1E           DEC     R6
   \                     ??MT_ReverseBytes_0:
   \   000042   EE           MOV     A,R6
   \   000043   C3           CLR     C
   \   000044   9402         SUBB    A,#0x2
   \   000046   50C8         JNC     ??MT_ReverseBytes_1
    383          }
   \   000048   7F04         MOV     R7,#0x4
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
    384          
    385          
    386          /***************************************************************************************************
    387           * @fn      MT_Word2Buf
    388           *
    389           * @brief   Copy a uint16 array to a byte array, little endian.
    390           *
    391           * @param   pBuf - byte array
    392           * @param   pWord - uint16 array
    393           * @param   len - length of uint16 array
    394           *
    395           * @return  pointer to end of byte array
    396           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    397          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    398          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8027         SJMP    ??MT_Word2Buf_0
    399            while ( len-- > 0 )
    400            {
    401              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   AA82         MOV     R2,DPL
   \   000014   AB83         MOV     R3,DPH
    402              *pBuf++ = HI_UINT16( *pWord );
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   0A           INC     R2
   \   000023   AB83         MOV     R3,DPH
    403              pWord++;
   \   000025   EC           MOV     A,R4
   \   000026   2402         ADD     A,#0x2
   \   000028   0C           INC     R4
   \   000029   0C           INC     R4
   \   00002A   ED           MOV     A,R5
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FD           MOV     R5,A
    404            }
   \                     ??MT_Word2Buf_0:
   \   00002E   E9           MOV     A,R1
   \   00002F   F8           MOV     R0,A
   \   000030   74FF         MOV     A,#-0x1
   \   000032   28           ADD     A,R0
   \   000033   19           DEC     R1
   \   000034   04           INC     A
   \   000035   70D0         JNZ     ??MT_Word2Buf_1
    405          
    406            return pBuf;
   \   000037   02....       LJMP    ?Subroutine2 & 0xFFFF
    407          }
    408          #if !defined(NONWK)
    409          /***************************************************************************************************
    410           * @fn      MT_BuildEndpointDesc
    411           *
    412           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    413           *
    414           * @param   pBuf - byte array
    415           *
    416           * @return  epDesc - pointer to the endpoint descriptor
    417           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    419          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    420            uint8 i;
    421            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
    422            endPointDesc_t *epDesc;
    423          
    424            epDesc = (endPointDesc_t *)param;
    425            /* check if this endpoint is already registered */
    426            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??afFindEndPointDesc?relay
   \   000019   8B..         MOV     ?V0 + 3,R3
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V0 + 3
   \   00001E   6006         JZ      ??MT_BuildEndpointDesc_0
    427            {
    428              ret = ZApsDuplicateEntry;
   \   000020   75..B8       MOV     ?V0 + 4,#-0x48
   \   000023   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    429            }
    430            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   45..         ORL     A,?V0 + 1
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    431            {
    432              epDesc->endPoint = *pBuf;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   F0           MOVX    @DPTR,A
    433          
    434              /* Ignore the latency reqs */
    435              epDesc->latencyReq = noLatencyReqs;
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    436          
    437              /* allocate memory for the simple descriptor */
    438              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000042   E5..         MOV     A,?V0 + 0
   \   000044   2403         ADD     A,#0x3
   \   000046   F5..         MOV     ?V0 + 2,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   F5..         MOV     ?V0 + 3,A
   \   00004E                ; Setup parameters for call to function osal_mem_alloc
   \   00004E   7A0C         MOV     R2,#0xc
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ??osal_mem_alloc?relay
   \   000055   85..82       MOV     DPL,?V0 + 2
   \   000058   85..83       MOV     DPH,?V0 + 3
   \   00005B   12....       LCALL   ?Subroutine15 & 0xFFFF
    439              if (epDesc->simpleDesc)
   \                     ??CrossCallReturnLabel_16:
   \   00005E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??MT_BuildEndpointDesc_2 & 0xFFFF
    440              {
    441                /* Endpoint */
    442                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C0E0         PUSH    A
   \   00006D   85..82       MOV     DPL,?V0 + 2
   \   000070   85..83       MOV     DPH,?V0 + 3
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F583         MOV     DPH,A
   \   000077   8882         MOV     DPL,R0
   \   000079   D0E0         POP     A
   \   00007B   12....       LCALL   ?Subroutine16 & 0xFFFF
    443          
    444                /* AppProfId */
    445                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_18:
   \   00007E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000081   12....       LCALL   ?Subroutine14 & 0xFFFF
    446                pBuf += sizeof(uint16);
    447          
    448                /* AppDeviceId */
    449                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??CrossCallReturnLabel_14:
   \   000084   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   12....       LCALL   ?Subroutine14 & 0xFFFF
    450                pBuf += sizeof(uint16);
    451          
    452                /* AppDevVer */
    453                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_15:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   540F         ANL     A,#0xf
   \   00008F   F9           MOV     R1,A
   \   000090   A3           INC     DPTR
   \   000091   0E           INC     R6
   \   000092   AF83         MOV     R7,DPH
   \   000094   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000097   E0           MOVX    A,@DPTR
   \   000098   54F0         ANL     A,#0xf0
   \   00009A   49           ORL     A,R1
   \   00009B   C0E0         PUSH    A
   \   00009D   85..82       MOV     DPL,?V0 + 2
   \   0000A0   85..83       MOV     DPH,?V0 + 3
   \   0000A3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A6   D0E0         POP     A
   \   0000A8   12....       LCALL   ?Subroutine17 & 0xFFFF
    454          
    455                /* LatencyReq */
    456                pBuf++;
    457          
    458                /* AppNumInClusters */
    459                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_20:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C0E0         PUSH    A
   \   0000AE   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000B1   A3           INC     DPTR
   \   0000B2   D0E0         POP     A
   \   0000B4   12....       LCALL   ?Subroutine17 & 0xFFFF
    460                if (epDesc->simpleDesc->AppNumInClusters)
   \                     ??CrossCallReturnLabel_21:
   \   0000B7   85..82       MOV     DPL,?V0 + 2
   \   0000BA   85..83       MOV     DPH,?V0 + 3
   \   0000BD   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000C0   603C         JZ      ??MT_BuildEndpointDesc_3
    461                {
    462                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    463                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000C2                ; Setup parameters for call to function osal_mem_alloc
   \   0000C2   85..82       MOV     DPL,?V0 + 2
   \   0000C5   85..83       MOV     DPH,?V0 + 3
   \   0000C8   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000CB   C3           CLR     C
   \   0000CC   33           RLC     A
   \   0000CD   FA           MOV     R2,A
   \   0000CE   E4           CLR     A
   \   0000CF   33           RLC     A
   \   0000D0   FB           MOV     R3,A
   \   0000D1   12....       LCALL   ??osal_mem_alloc?relay
   \   0000D4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000D7   12....       LCALL   ?Subroutine15 & 0xFFFF
    464                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_17:
   \   0000DA   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000DD   601C         JZ      ??MT_BuildEndpointDesc_4
    465                  {
    466                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000DF   7B00         MOV     R3,#0x0
   \                     ??MT_BuildEndpointDesc_5:
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   85..83       MOV     DPH,?V0 + 1
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000ED   F8           MOV     R0,A
   \   0000EE   EB           MOV     A,R3
   \   0000EF   C3           CLR     C
   \   0000F0   98           SUBB    A,R0
   \   0000F1   500B         JNC     ??MT_BuildEndpointDesc_3
    467                    {
    468                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   0000F3   12....       LCALL   ?Subroutine3 & 0xFFFF
    469                      pBuf += 2;
    470                    }
    471                  }
   \                     ??CrossCallReturnLabel_0:
   \   0000F6   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000F9   80E6         SJMP    ??MT_BuildEndpointDesc_5
    472                  else
    473                  {
    474                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_4:
   \   0000FB   75..10       MOV     ?V0 + 4,#0x10
    475                  }
    476                }
    477          
    478                /* AppNumOutClusters */
    479                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_3:
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   D0E0         POP     A
   \   00010C   12....       LCALL   ?Subroutine16 & 0xFFFF
    480                if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??CrossCallReturnLabel_19:
   \   00010F   85..82       MOV     DPL,?V0 + 2
   \   000112   85..83       MOV     DPH,?V0 + 3
   \   000115   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000118   603D         JZ      ??MT_BuildEndpointDesc_6
    481                {
    482                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    483                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   00011A                ; Setup parameters for call to function osal_mem_alloc
   \   00011A   85..82       MOV     DPL,?V0 + 2
   \   00011D   85..83       MOV     DPH,?V0 + 3
   \   000120   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000123   C3           CLR     C
   \   000124   33           RLC     A
   \   000125   FA           MOV     R2,A
   \   000126   E4           CLR     A
   \   000127   33           RLC     A
   \   000128   FB           MOV     R3,A
   \   000129   12....       LCALL   ??osal_mem_alloc?relay
   \   00012C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00012F   EA           MOV     A,R2
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   EB           MOV     A,R3
   \   000133   F0           MOVX    @DPTR,A
    484                  if (epDesc->simpleDesc->pAppOutClusterList)
   \   000134   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000137   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00013A   6016         JZ      ??MT_BuildEndpointDesc_7
    485                  {
    486                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   00013C   7B00         MOV     R3,#0x0
   \                     ??MT_BuildEndpointDesc_8:
   \   00013E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000141   F8           MOV     R0,A
   \   000142   EB           MOV     A,R3
   \   000143   C3           CLR     C
   \   000144   98           SUBB    A,R0
   \   000145   5010         JNC     ??MT_BuildEndpointDesc_6
    487                    {
    488                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000147   12....       LCALL   ?Subroutine3 & 0xFFFF
    489                      pBuf += 2;
    490                    }
    491                  }
   \                     ??CrossCallReturnLabel_1:
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000150   80EC         SJMP    ??MT_BuildEndpointDesc_8
    492                  else
    493                  {
    494                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_7:
   \   000152   75..10       MOV     ?V0 + 4,#0x10
   \   000155   8006         SJMP    ??MT_BuildEndpointDesc_9
    495                  }
    496                }
    497          
    498                /* if any list cannot be allocated...free all */
    499                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_6:
   \   000157   7410         MOV     A,#0x10
   \   000159   65..         XRL     A,?V0 + 4
   \   00015B   7041         JNZ     ??MT_BuildEndpointDesc_1
    500                {
    501                  if (epDesc->simpleDesc->pAppInClusterList)
   \                     ??MT_BuildEndpointDesc_9:
   \   00015D   85..82       MOV     DPL,?V0 + 0
   \   000160   85..83       MOV     DPH,?V0 + 1
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000169   600F         JZ      ??CrossCallReturnLabel_31
    502                  {
    503                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00016B                ; Setup parameters for call to function osal_mem_free
   \   00016B   85..82       MOV     DPL,?V0 + 0
   \   00016E   85..83       MOV     DPH,?V0 + 1
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    504                  }
   \                     ??CrossCallReturnLabel_32:
   \   000177   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    505          
    506                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??CrossCallReturnLabel_31:
   \   00017A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00017D   6011         JZ      ??CrossCallReturnLabel_29
    507                  {
    508                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   00017F                ; Setup parameters for call to function osal_mem_free
   \   00017F   85..82       MOV     DPL,?V0 + 0
   \   000182   85..83       MOV     DPH,?V0 + 1
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   12....       LCALL   ?Subroutine13 & 0xFFFF
    509                  }
   \                     ??CrossCallReturnLabel_13:
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   12....       LCALL   ?Subroutine11 & 0xFFFF
    510          
    511                  osal_mem_free(epDesc->simpleDesc);
   \                     ??CrossCallReturnLabel_29:
   \   000190                ; Setup parameters for call to function osal_mem_free
   \   000190   85..82       MOV     DPL,?V0 + 0
   \   000193   85..83       MOV     DPH,?V0 + 1
   \   000196   12....       LCALL   ?Subroutine11 & 0xFFFF
    512                }
    513              }
   \                     ??CrossCallReturnLabel_30:
   \   000199   8003         SJMP    ??MT_BuildEndpointDesc_1
    514              else
    515              {
    516                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_2:
   \   00019B   75..10       MOV     ?V0 + 4,#0x10
    517              }
    518            }
    519          
    520            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   00019E   A9..         MOV     R1,?V0 + 4
   \   0001A0   7F05         MOV     R7,#0x5
   \   0001A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?V0 + 2
   \   000008   85..83       MOV     DPH,?V0 + 3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_free?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8A82         MOV     DPL,R2
   \   000008   F583         MOV     DPH,A
   \   00000A   EC           MOV     A,R4
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   ED           MOV     A,R5
   \   00000E   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000011   0B           INC     R3
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2402         ADD     A,#0x2
   \   000004   0E           INC     R6
   \   000005   0E           INC     R6
   \   000006   EF           MOV     A,R7
   \   000007   3400         ADDC    A,#0x0
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   2400         ADD     A,#0x0
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FB           MOV     R3,A
   \   00000B   85..82       MOV     DPL,?V0 + 2
   \   00000E   85..83       MOV     DPH,?V0 + 3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F583         MOV     DPH,A
   \   000017   8882         MOV     DPL,R0
   \   000019   A3           INC     DPTR
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009                REQUIRE ??Subroutine28_0
   \   000009                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EC           MOV     A,R4
   \   00000A   2400         ADD     A,#0x0
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   EB           MOV     A,R3
   \   000010   33           RLC     A
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F9           MOV     R1,A
   \   000015   85..82       MOV     DPL,?V0 + 0
   \   000018   85..83       MOV     DPH,?V0 + 1
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F583         MOV     DPH,A
   \   000024   8A82         MOV     DPL,R2
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildSPIMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildSPIMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildAndSendZToolResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MTProcessAppRspMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ReverseBytes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_Word2Buf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildEndpointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    522          #endif
    523          /***************************************************************************************************
    524          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MTProcessAppRspMsg                 0      0      9
       -> MT_BuildAndSendZToolResponse
                                        0      0     18
     MT_BuildAndSendZToolResponse       0      0     27
       -> MT_TransportAlloc             0      0     32
       -> MT_BuildSPIMsg                0      0     36
       -> MT_TransportSend              0      0     32
     MT_BuildEndpointDesc               1      0     13
       -> afFindEndPointDesc            0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_free                 0      0     26
       -> osal_mem_free                 0      0     26
       -> osal_mem_free                 0      0     26
     MT_BuildSPIMsg                     1      0     37
       -> osal_memcpy                   0      0     38
     MT_Init                            2      0      0
       -> MT_SysResetInd                4      0      0
     MT_ProcessIncoming                 3      0      3
       -> MT_BuildAndSendZToolResponse
                                        4      0      6
     MT_ReverseBytes                    1      0     12
     MT_Word2Buf                        1      0      9


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     mtProcessIncoming                      22
     debugThreshold                          1
     debugCompId                             1
     MT_Init                                 7
     ?Subroutine0                            7
     MT_BuildSPIMsg                         76
     ?Subroutine1                            5
     MT_BuildAndSendZToolResponse           69
     MT_ProcessIncoming                    170
     MTProcessAppRspMsg                     18
     ?Subroutine2                            5
     MT_ReverseBytes                        77
     MT_Word2Buf                            58
     MT_BuildEndpointDesc                  421
     ?Subroutine17                          10
     ?Subroutine16                          11
     ?Subroutine15                          12
     ?Subroutine14                          12
     ?Subroutine13                           4
     ?Subroutine12                          12
     ?Subroutine21                           4
     ?Subroutine24                          12
     ?Subroutine11                           3
     ??Subroutine25_0                        9
     ?Subroutine10                           6
     ??Subroutine26_0                        4
     ?Subroutine18                           7
     ?Subroutine9                           13
     ?Subroutine8                            2
     ??Subroutine27_0                        5
     ?Subroutine7                            7
     ?Subroutine19                           8
     ?Subroutine6                           19
     ?Subroutine22                          11
     ?Subroutine5                           27
     ?Subroutine4                            9
     ??Subroutine28_0                        2
     ??Subroutine29_0                        8
     ?Subroutine20                           4
     ?Subroutine23                           5
     ?Subroutine3                           46
     ??MT_Init?relay                         6
     ??MT_BuildSPIMsg?relay                  6
     ??MT_BuildAndSendZToolResponse?relay    6
     ??MT_ProcessIncoming?relay              6
     ??MTProcessAppRspMsg?relay              6
     ??MT_ReverseBytes?relay                 6
     ??MT_Word2Buf?relay                     6
     ??MT_BuildEndpointDesc?relay            6

 
 1 185 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    24 bytes in segment XDATA_Z
 
 1 233 bytes of CODE  memory
    24 bytes of XDATA memory

Errors: none
Warnings: none
